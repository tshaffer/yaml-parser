{
  "Name": "BMAP",
  "Version": "0.0.1",
  "Type": "BMAP",
  "FunctionBlocks": [
    {
      "Name": "ProductInfo",
      "Value": 0,
      "Mandatory": "M",
      "Description": "Static info about product",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Function Block Version (UTF-8 string)",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "BMAPVersion",
          "Value": 1,
          "Mandatory": "M",
          "Description": "BMAP Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.BMAPVersion",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.BMAPVersion",
              "Operator": "Operators.Status",
              "Description": "BMAP Version (UTF-8 string – no null terminator)",
              "Fields": [
                {
                  "Name": "Version",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "BMAP Version (UTF-8 string – no null terminator)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAllFBlocks",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Queries all Function Blocks supported by product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAllFBlocks",
              "Operator": "Operators.Start",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAllFBlocks",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAllFBlocks",
              "Operator": "Operators.Result",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAllFBlocks",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAllFBlocks",
              "Operator": "Operators.Status",
              "Description": "GetAllFBlocks Status Response",
              "Fields": [
                {
                  "Name": "SupportedFunctionBlocks",
                  "Type": "uint32",
                  "Description": "Bitfield of supported Function Blocks (MSB first).",
                  "VariableLength": true,
                  "Count": 1,
                  "Bitfields": [
                    {
                      "Name": "ProductInfo",
                      "NumBits": 1,
                      "Description": "ProductInfo"
                    },
                    {
                      "Name": "Settings",
                      "NumBits": 1,
                      "Description": "Settings"
                    },
                    {
                      "Name": "Status",
                      "NumBits": 1,
                      "Description": "Status"
                    },
                    {
                      "Name": "FirmwareUpdate",
                      "NumBits": 1,
                      "Description": "FirmwareUpdate"
                    },
                    {
                      "Name": "DeviceManagement",
                      "NumBits": 1,
                      "Description": "DeviceManagement"
                    },
                    {
                      "Name": "AudioManagement",
                      "NumBits": 1,
                      "Description": "AudioManagement"
                    },
                    {
                      "Name": "CallManagement",
                      "NumBits": 1,
                      "Description": "CallManagement"
                    },
                    {
                      "Name": "Control",
                      "NumBits": 1,
                      "Description": "Control"
                    },
                    {
                      "Name": "Debug",
                      "NumBits": 1,
                      "Description": "Debug"
                    },
                    {
                      "Name": "Notification",
                      "NumBits": 1,
                      "Description": "Notification"
                    },
                    {
                      "Name": "Reserved1",
                      "NumBits": 1,
                      "Description": "Reserved1"
                    },
                    {
                      "Name": "Reserved2",
                      "NumBits": 1,
                      "Description": "Reserved2"
                    },
                    {
                      "Name": "HearingAssistance",
                      "NumBits": 1,
                      "Description": "HearingAssistance"
                    },
                    {
                      "Name": "DataCollection",
                      "NumBits": 1,
                      "Description": "DataCollection"
                    },
                    {
                      "Name": "HeartRateMonitor",
                      "NumBits": 1,
                      "Description": "HeartRateMonitor"
                    },
                    {
                      "Name": "Peer",
                      "NumBits": 1,
                      "Description": "Peer"
                    },
                    {
                      "Name": "VPA",
                      "NumBits": 1,
                      "Description": "VPA"
                    },
                    {
                      "Name": "WiFi",
                      "NumBits": 1,
                      "Description": "WiFi"
                    },
                    {
                      "Name": "Auth",
                      "NumBits": 1,
                      "Description": "Auth"
                    },
                    {
                      "Name": "Experimental",
                      "NumBits": 1,
                      "Description": "Experimental"
                    },
                    {
                      "Name": "Cloud",
                      "NumBits": 1,
                      "Description": "Cloud"
                    },
                    {
                      "Name": "AugmentedReality",
                      "NumBits": 1,
                      "Description": "AugmentedReality"
                    },
                    {
                      "Name": "Unused",
                      "NumBits": 10,
                      "Description": "Unused"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ProductIDVariant",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Unique product identifier followed by a 1-byte variant number.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ProductIDVariant",
              "Operator": "Operators.Get",
              "Description": "Get ProductID/Variant Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ProductIDVariant",
              "Operator": "Operators.Status",
              "Description": "ProductID/Variant Status Response.",
              "Fields": [
                {
                  "Name": "ProductID",
                  "Type": "uint16",
                  "Units": "Enum",
                  "Enum": "ProductID"
                },
                {
                  "Name": "VariantID",
                  "Type": "uint8",
                  "Description": "Product-specific variant id"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 4,
          "Mandatory": "M",
          "Description": "Returns status information for ProductInfo functions (excluding BMAP version, Get All FBlocks and Product ID / Variant)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned"
            }
          ]
        },
        {
          "Name": "FirmwareVersion",
          "Value": 5,
          "Mandatory": "M",
          "Description": "Firmware version of product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.FirmwareVersion",
              "Operator": "Operators.Get",
              "Description": "Get Firmware Version"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.FirmwareVersion",
              "Operator": "Operators.Status",
              "Description": "Firmware Version (UTF-8 String)",
              "Fields": [
                {
                  "Name": "Version",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Firmware Version (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "MACAddress",
          "Value": 6,
          "Mandatory": "M",
          "Description": "MAC address of product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.MACAddress",
              "Operator": "Operators.Get",
              "Description": "(Empty) Get MAC Address"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.MACAddress",
              "Operator": "Operators.Status",
              "Description": "MAC Address",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC Address of BOSE Product"
                }
              ]
            }
          ]
        },
        {
          "Name": "SerialNumber",
          "Value": 7,
          "Mandatory": "M",
          "Description": "System serial number of product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.SerialNumber",
              "Operator": "Operators.Get",
              "Description": "Get Serial Number"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.SerialNumber",
              "Operator": "Operators.Status",
              "Description": "Serial Number",
              "Fields": [
                {
                  "Name": "SerialNumber",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Product Serial Number (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "DateOfManufacture",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Date of Manufacture of product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.DateOfManufacture",
              "Operator": "Operators.Get",
              "Description": "Get Date of Manufacturer"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.DateOfManufacture",
              "Operator": "Operators.Status",
              "Description": "Date of Manufacturer",
              "Fields": [
                {
                  "Name": "DateOfManufacture",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "(BCD number) MMDDYYYY"
                }
              ]
            }
          ]
        },
        {
          "Name": "BoardSerialNumber",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Board serial number for PCBA.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.BoardSerialNumber",
              "Operator": "Operators.Get",
              "Fields": [
                {
                  "Name": "BoardAssemblyID",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "If the payload length is 0, Returns Board serial number for main PCB (ID 0)  if no Board/Assembly ID specified. If the payload length is 1, Board/Assembly ID (use 0 unless the product contains  multiple PCBAs, in which case the specific PCBAs are assigned IDs on a product-by-product basis.)\n"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.BoardSerialNumber",
              "Operator": "Operators.Status",
              "Description": "Board Serial Number.",
              "Fields": [
                {
                  "Name": "BoardAssemblyID",
                  "Type": "uint8",
                  "Description": "Board/Assembly ID"
                },
                {
                  "Name": "BoardSerialNumber",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 59,
                  "Units": "ASCII",
                  "Description": "Serial Number (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "HardwareRevision",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Hardware revision of product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.HardwareRevision",
              "Operator": "Operators.Get",
              "Description": "Get Hardware Revision"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.HardwareRevision",
              "Operator": "Operators.Status",
              "Description": "Hardware Revision",
              "Fields": [
                {
                  "Name": "HardwareRevision",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Product Hardware Revision (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "ComponentDevices",
          "Value": 11,
          "Mandatory": "O",
          "Description": "MAC Addresses of independent networked devices that make up this product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ComponentDevices",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ComponentDevices",
              "Operator": "Operators.Status",
              "Description": "List of all MAC addresses making up this product (6 bytes each)",
              "Fields": [
                {
                  "Name": "MACAddresses",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Description": "List of all MAC addresses making up this product (6 bytes each)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GUID",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Globally Unique Identifier for product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GUID",
              "Operator": "Operators.Get",
              "Description": "Get Serial Number"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.GUID",
              "Operator": "Operators.Status",
              "Description": "Globally Unique Identifier",
              "Fields": [
                {
                  "Name": "GUID",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Description": "Signed/encrypted Globally Unique Identifier"
                }
              ]
            }
          ]
        },
        {
          "Name": "ProductSalesRegion",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Product specific sales region identifier",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ProductSalesRegion",
              "Operator": "Operators.Get",
              "Description": "Get Product Sales Region"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ProductSalesRegion",
              "Operator": "Operators.Status",
              "Description": "Product Sales Region Status Response",
              "Fields": [
                {
                  "Name": "SalesRegion",
                  "Type": "uint8",
                  "Description": "Product-specific sales region identifier"
                }
              ]
            }
          ]
        },
        {
          "Name": "ProductMarking",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Get various markings that will be displayed on the product or packaging",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ProductMarking",
              "Operator": "Operators.Get",
              "Description": "Get product/packaging markings",
              "Fields": [
                {
                  "Name": "Selector",
                  "Type": "uint8",
                  "Description": "(1 == UPC/EAN code, 2 == Date of manufacture, 3 == Serial number)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.ProductMarking",
              "Operator": "Operators.Status",
              "Description": "Return product/packaging marking",
              "Fields": [
                {
                  "Name": "Marking",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 32,
                  "Units": "ASCII",
                  "Description": "Requested string (UTF-8)"
                }
              ]
            }
          ]
        },
        {
          "Name": "OriginalProductName",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Original friendly name of product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.OriginalProductName",
              "Operator": "Operators.Get",
              "Description": "Get the original friendly name of the product"
            },
            {
              "FunctionBlock": "FunctionBlocks.ProductInfo",
              "Function": "ProductInfoFunctions.OriginalProductName",
              "Operator": "Operators.Status",
              "Description": "Original friendly name of the product",
              "Fields": [
                {
                  "Name": "OriginalProductName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Original friendly name of product (UTF-8)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Settings",
      "Value": 1,
      "Mandatory": "M",
      "Description": "Allows product settings to be configured",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Settings FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Settings FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "Count": 60,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported settings in product (excluding product name)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start command"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned"
            }
          ]
        },
        {
          "Name": "ProductName",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Friendly name of product that can be customized and displayed in the mobile app",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ProductName",
              "Operator": "Operators.Get",
              "Description": "Get the friendly name of the product."
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ProductName",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get the friendly name of the product.",
              "Fields": [
                {
                  "Name": "ProductName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "New name for product (UTF-8 string)."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ProductName",
              "Operator": "Operators.Status",
              "Description": "Friendly name of the product.",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "NameIsDefault",
                      "Units": "Boolean",
                      "Description": "0 -- Product name has been changed by user, 1 -- default product name.",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unusused",
                      "Description": "Not currently used.",
                      "NumBits": 7
                    }
                  ]
                },
                {
                  "Name": "ProductName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Friendly name of product."
                }
              ]
            }
          ]
        },
        {
          "Name": "VoicePrompts",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Voice prompts configuration",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.VoicePrompts",
              "Operator": "Operators.Get",
              "Type": "Command",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.VoicePrompts",
              "Operator": "Operators.SetGet",
              "Type": "Command",
              "Description": "Set/Get VoicePrompts",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": "Set/Get VoicePrompts.",
                  "Bitfields": [
                    {
                      "Name": "CurrentLanguage",
                      "NumBits": 5,
                      "Enum": "Languages",
                      "Description": "Currently supported languages"
                    },
                    {
                      "Name": "PromptEnable",
                      "NumBits": 1,
                      "Description": "Prompt enable flag"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.VoicePrompts",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Voice Prompts Status",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "CurrentLanguage",
                      "NumBits": 5,
                      "Enum": "Languages",
                      "Description": "Currently supported languages"
                    },
                    {
                      "Name": "PromptEnable",
                      "NumBits": 1,
                      "Description": "Prompt enable flag"
                    },
                    {
                      "Name": "LanguageMatchesDefault",
                      "NumBits": 1,
                      "Description": "0 -- voice prompt language has been changed or set by user, 1 -- voice prompt language is default (not changed or set by user)"
                    },
                    {
                      "Name": "UserEnableOrDisable",
                      "NumBits": 1,
                      "Description": "User can enable/disable (read-only)"
                    }
                  ]
                },
                {
                  "Name": "AvailableLanguages",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "Bitfield of available voicepromt languages. Each bit corresponds to the language selection ID specified in the next table.  The bitmask is big endian, with the MSB in byte 1 and the LSB in byte 4.  This field is read-only."
                }
              ]
            }
          ]
        },
        {
          "Name": "AutoOff",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Configures auto off timer in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.AutoOff",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.AutoOff",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "StandbyTimer",
                  "Type": "uint8",
                  "Units": "Minutes",
                  "Description": "Auto-off standby timer timer setting in minutes."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.AutoOff",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "StandbyTimer",
                  "Type": "uint8",
                  "Units": "Minutes",
                  "Description": "Current auto-off standy timer setting in minutes"
                }
              ]
            }
          ]
        },
        {
          "Name": "ControllableNoiseCancellation",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Configures Controllable Noise Cancellation (CNC) setting",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ControllableNoiseCancellation",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ControllableNoiseCancellation",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "CNCStep",
                  "Type": "uint8",
                  "Description": "The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"
                },
                {
                  "Name": "CNCState",
                  "Type": "uint8",
                  "Description": "Current CNC state, indicating whether to enable or disable CNC (0 == disable, 1 == enable)",
                  "Bitfields": [
                    {
                      "Name": "State",
                      "Description": "Enable/Disable Noise Cancellation (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ControllableNoiseCancellation",
              "Operator": "Operators.Status",
              "Description": "The Controllable Noise Cancellation Setting",
              "Fields": [
                {
                  "Name": "CNCStep",
                  "Type": "uint8",
                  "Description": "The number of supported Controllable Noise Cancellation steps (N)"
                },
                {
                  "Name": "CNCStepSelection",
                  "Type": "uint8",
                  "Description": "The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"
                },
                {
                  "Name": "CNCState",
                  "Type": "uint8",
                  "Description": "Current CNC state, indicating whether it is enabled or disabled (0 == disabled, 1 == enabled)",
                  "Bitfields": [
                    {
                      "Name": "State",
                      "Description": "Noise Cancellation Enabled/Disabled (0 == disabled, 1 == enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ANR",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Controls general Active Noise Reduction settings",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ANR",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ANR",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "CurrentANRMode",
                  "Type": "uint8",
                  "Units": "Enum",
                  "Enum": "ANRModes",
                  "Description": "Change ANR Mode."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ANR",
              "Operator": "Operators.Status",
              "Description": "Current ANR Mode and Supported Modes.",
              "Fields": [
                {
                  "Name": "CurrentANRMode",
                  "Type": "uint8",
                  "Units": "Enum",
                  "Enum": "ANRModes",
                  "Description": "Current ANR Mode."
                },
                {
                  "Name": "AvailableANRModes",
                  "Type": "uint8",
                  "Units": "Bitfield",
                  "VariableLength": true,
                  "Bitfield": "ANRModes",
                  "Description": "Bitfield of available ANR Settings",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "BassControl",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Allows bass level to be adjusted in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.BassControl",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.BassControl",
              "Operator": "Operators.SetGet",
              "Fields": [
                {
                  "Name": "Value",
                  "Type": "int8",
                  "Description": "Target bass control step (signed, -128 to +127)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.BassControl",
              "Operator": "Operators.Status",
              "Description": "Current Bass Control Settings.",
              "Fields": [
                {
                  "Name": "Min",
                  "Type": "int8",
                  "Description": "Min bass control step (signed, -128 to +127)"
                },
                {
                  "Name": "Max",
                  "Type": "int8",
                  "Description": "Max bass control step (signed, -128 to +127)"
                },
                {
                  "Name": "Current",
                  "Type": "int8",
                  "Description": "Current bass control step (signed, -128 to +127)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Alerts",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Configures haptic and audible alert settings",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Alerts",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Alerts",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "Alerts",
                  "Type": "uint8",
                  "Description": "Set/Get alerts.",
                  "Bitfields": [
                    {
                      "Name": "Ringtones",
                      "Description": "Enable ringtones (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Vibration",
                      "Description": "Enable vibration (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Alerts",
              "Operator": "Operators.Status",
              "Description": "Current Alerts Settings.",
              "Fields": [
                {
                  "Name": "Alerts",
                  "Type": "uint8",
                  "Description": "Current Alerts Settings.",
                  "Bitfields": [
                    {
                      "Name": "Ringtones",
                      "Description": "Enable ringtones (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Vibration",
                      "Description": "Enable vibration (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                },
                {
                  "Name": "AlertsSupported",
                  "Type": "uint8",
                  "Description": "Bitfield of supported alerts"
                }
              ]
            }
          ]
        },
        {
          "Name": "Buttons",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Configurable button settings",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Buttons",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Buttons",
              "Operator": "Operators.SetGet",
              "Description": "Button Settings",
              "Fields": [
                {
                  "Name": "ButtonID",
                  "Type": "uint8",
                  "Description": "Button ID (varies by product, see tables below)"
                },
                {
                  "Name": "ButtonEvent",
                  "Type": "uint8",
                  "Description": "Button Event",
                  "Enum": "ButtonEvents"
                },
                {
                  "Name": "ConfiguredFunction",
                  "Type": "uint8",
                  "Description": "Configured Function",
                  "Enum": "ButtonConfigFunctions"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Buttons",
              "Operator": "Operators.Status",
              "Description": "A Button Settings Packet for each configurable button.",
              "Fields": [
                {
                  "Name": "ButtonID",
                  "Type": "uint8",
                  "Description": "Button ID (varies by product, see tables below)"
                },
                {
                  "Name": "ButtonEvent",
                  "Type": "uint8",
                  "Description": "Button Event",
                  "Enum": "ButtonEvents"
                },
                {
                  "Name": "ConfiguredFunction",
                  "Type": "uint8",
                  "Description": "Configured Function",
                  "Enum": "ButtonConfigFunctions"
                },
                {
                  "Name": "SupportedFunctions",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "Bitfield of Supported Functions",
                  "LongPostDescription": null
                },
                {
                  "Name": "UnavailableFunctions",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "Optional bitfield of functions that are supported, but currently unavailable. May change at runtime. If no functions are unavailable, this part of the payload is optional."
                }
              ]
            }
          ]
        },
        {
          "Name": "Multipoint",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Configures multipoint settings",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Multipoint",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Multipoint",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": "Multipoint setting",
                  "Bitfields": [
                    {
                      "Name": "Multipoint",
                      "Description": "Enable multipoint (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Multipoint",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "MultipointStatus",
                  "Type": "uint8",
                  "Description": "Multipoint Status",
                  "Bitfields": [
                    {
                      "Name": "MultipointEnabled",
                      "Description": "0 == multipoint disabled, 1 == multipoint enabled",
                      "NumBits": 1
                    },
                    {
                      "Name": "MultipointSupported",
                      "Description": "0 == multipoint not supported, 1 == multipoint supported",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "Sidetone",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Configures sidetone setting",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Sidetone",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Sidetone",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "PersistSidetone",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "Persist",
                      "Description": "Persist the sidetone across power cycles (0 == do not persist, 1 == persist)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                },
                {
                  "Name": "CurrentSidetoneMode",
                  "Type": "uint8",
                  "Units": "Enum",
                  "Enum": "SidetoneModes",
                  "Description": "Change Sidetone Mode."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.Sidetone",
              "Operator": "Operators.Status",
              "Description": "Current Sidetone Mode and Supported Modes.",
              "Fields": [
                {
                  "Name": "PersistSidetone",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "Persist",
                      "Description": "Persist the sidetone across power cycles (0 == do not persist, 1 == persist)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                },
                {
                  "Name": "CurrentSidetoneMode",
                  "Type": "uint8",
                  "Units": "Enum",
                  "Enum": "SidetoneModes",
                  "Description": "Current Sidetone Mode."
                },
                {
                  "Name": "AvailableSidetoneModes",
                  "Type": "uint8",
                  "Units": "Bitfield",
                  "VariableLength": true,
                  "Bitfield": "SidetoneModes",
                  "Description": "Bitfield of available Sidetone Modes",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "SetupComplete",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Boolean to determine if product has completed setup",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.SetupComplete",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.SetupComplete",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": "Setup completion status status",
                  "Bitfields": [
                    {
                      "Name": "setupComplete",
                      "Description": "Has setup been completed? (0 == no, 1 == yes)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.SetupComplete",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": "Setup completion status",
                  "Bitfields": [
                    {
                      "Name": "setupComplete",
                      "Description": "Has setup been completed? (0 == no, 1 == yes)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ConversationMode",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Controls Conversation Mode",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ConversationMode",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ConversationMode",
              "Operator": "Operators.SetGet",
              "Fields": [
                {
                  "Name": "Value",
                  "Type": "uint8",
                  "Description": "Set the desired state of Conversation Mode and generate a status message with the result",
                  "Bitfields": [
                    {
                      "Name": "ConversationStates",
                      "NumBits": 1,
                      "Enum": "ConversationStates"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 7,
                      "Description": "Unused Bits"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.ConversationMode",
              "Operator": "Operators.Status",
              "Fields": [
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "The current state of Conversation Mode",
                  "Bitfields": [
                    {
                      "Name": "ConversationStates",
                      "NumBits": 1,
                      "Enum": "ConversationStates"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 7,
                      "Description": "Unused Bits"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "CNCPersistence",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Configures CNC Persistence",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.CNCPersistence",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.CNCPersistence",
              "Operator": "Operators.SetGet",
              "Description": "CNC Persistence",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": "Persistence",
                  "Bitfields": [
                    {
                      "Name": "Persistence",
                      "Description": "Enable CNC Persistence (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.CNCPersistence",
              "Operator": "Operators.Status",
              "Description": "CNC Preset Settings",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": "Persistence",
                  "Bitfields": [
                    {
                      "Name": "Persistence",
                      "Description": "Enable CNC Persistence (0 == disable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "CNCPresets",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Configures CNC Presets settings",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.CNCPresets",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.CNCPresets",
              "Operator": "Operators.SetGet",
              "Description": "CNC Preset Settings",
              "Fields": [
                {
                  "Name": "PresetIndex",
                  "Type": "uint8",
                  "Description": "CNC Preset Index"
                },
                {
                  "Name": "CNCLevels",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "A list of CNC Level Values; one for each CNC Preset"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.CNCPresets",
              "Operator": "Operators.Status",
              "Description": "CNC Preset Settings",
              "Fields": [
                {
                  "Name": "PresetIndex",
                  "Type": "uint8",
                  "Description": "CNC Preset Index"
                },
                {
                  "Name": "CNCLevels",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "A list of CNC Level Values; one for each CNC Preset"
                }
              ]
            }
          ]
        },
        {
          "Name": "OnHeadDetection",
          "Value": 16,
          "Mandatory": "O",
          "Description": "Toggles on-head detection and automatic control of product based on on-head state",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.OnHeadDetection",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.OnHeadDetection",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "EnableOnHeadDetection",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "OnHeadEnabled",
                      "Description": "Toggle on-head detection (0 == do not enable, 1 == enable)",
                      "NumBits": 1
                    },
                    {
                      "Name": "UnusedEnableOnHeadDetectionToggle",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                },
                {
                  "Name": "OnHeadControl",
                  "Type": "uint8",
                  "Description": "Change on-head detection automatic control",
                  "Bitfields": [
                    {
                      "Name": "OnHeadControlAutoPlayPause",
                      "Description": "Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "OnHeadControlAutoAnswerCall",
                      "Description": "Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "UnusedOnHeadControl",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.OnHeadDetection",
              "Operator": "Operators.Status",
              "Description": "Current on-head detection state and supported automatic control modes.",
              "Fields": [
                {
                  "Name": "EnableOnHeadDetection",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "OnHeadEnabledStatus",
                      "Description": "Toggle on-head detection (0 == not enabled, 1 == enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "OnHeadAutoPlayPauseSupported",
                      "Description": "Signals that auto-play pause feature is supported by product (0 == not supported, 1 == supported)",
                      "NumBits": 1
                    },
                    {
                      "Name": "OnHeadAutoAnswerCallSupported",
                      "Description": "Signals that auto-answer phone call feature is supported by product (0 == not supported, 1 == supported)",
                      "NumBits": 1
                    },
                    {
                      "Name": "UnusedEnableOnHeadDetectionStatus",
                      "Description": "Unused",
                      "NumBits": 5
                    }
                  ]
                },
                {
                  "Name": "OnHeadControl",
                  "Type": "uint8",
                  "Description": "Change on-head detection automatic control",
                  "Bitfields": [
                    {
                      "Name": "OnHeadControlAutoPlayPauseStatus",
                      "Description": "Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "OnHeadControlAutoAnswerCallStatus",
                      "Description": "Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "UnusedOnHeadControlStatus",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "BudDominance",
          "Value": 17,
          "Mandatory": "O",
          "Description": "Configures bud dominance and control switching, i.e. which bud has which controls",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.BudDominance",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.BudDominance",
              "Operator": "Operators.SetGet",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": "Which bud is configured as the dominant bud, and whether or not auto-switching is enabled",
                  "Bitfields": [
                    {
                      "Name": "BudDominance",
                      "Description": "Bud that is configured to be dominant (0 == right bud, 1 == left bud)",
                      "NumBits": 1
                    },
                    {
                      "Name": "BudDominanceAutoSwitch",
                      "Description": "Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.BudDominance",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": "Which bud is configured as the dominant bud, and whether or not auto-switching is enabled",
                  "Bitfields": [
                    {
                      "Name": "BudDominance",
                      "Description": "Bud that is configured to be dominant (0 == right bud, 1 == left bud)",
                      "NumBits": 1
                    },
                    {
                      "Name": "BudDominanceAutoSwitch",
                      "Description": "Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                },
                {
                  "Name": "DominantBudControls",
                  "Description": "Single-byte bitfield of controls on the dominant bud",
                  "Type": "uint8",
                  "Count": 1,
                  "Bitfields": [
                    {
                      "Name": "ControlPlaybackDominant",
                      "NumBits": 1,
                      "Description": "The dominant bud controls pause, play, adjusting media playback. Includes volume control."
                    },
                    {
                      "Name": "ControlPhoneDominant",
                      "NumBits": 1,
                      "Description": "The dominant bud controls answering/ending phone calls"
                    },
                    {
                      "Name": "ControlHotkeyDominant",
                      "NumBits": 1,
                      "Description": "The dominant bud controls using a custom hotkey"
                    },
                    {
                      "Name": "ControlNoiseCancellationDominant",
                      "NumBits": 1,
                      "Description": "The dominant bud controls noise cancellation"
                    },
                    {
                      "Name": "ControlVPADominant",
                      "NumBits": 1,
                      "Description": "The dominant bud controls a VPA"
                    }
                  ]
                },
                {
                  "Name": "SecondaryBudControls",
                  "Description": "Single-byte bitfield of controls currently on the secondary (non-dominant) bud",
                  "Type": "uint8",
                  "Count": 1,
                  "Bitfields": [
                    {
                      "Name": "ControlPlaybackSecondary",
                      "NumBits": 1,
                      "Description": "The secondary bud controls pause, play, adjusting media playback. Includes volume control."
                    },
                    {
                      "Name": "ControlPhoneSecondary",
                      "NumBits": 1,
                      "Description": "The secondary bud controls answering/ending phone calls"
                    },
                    {
                      "Name": "ControlHotkeySecondary",
                      "NumBits": 1,
                      "Description": "The secondary bud controls using a custom hotkey"
                    },
                    {
                      "Name": "ControlNoiseCancellationSecondary",
                      "NumBits": 1,
                      "Description": "The secondary bud controls noise cancellation"
                    },
                    {
                      "Name": "ControlVPASecondary",
                      "NumBits": 1,
                      "Description": "The secondary bud controls a VPA"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "LowPowerMode",
          "Value": 18,
          "Mandatory": "O",
          "Description": "Allows low power mode to be toggled on and off on the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.LowPowerMode",
              "Operator": "Operators.Get",
              "Description": "Get the Low Power Mode setting from the product."
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.LowPowerMode",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get the Low Power Mode setting on the product.",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": "Set/Get the Low Power Mode setting on the product.",
                  "Bitfields": [
                    {
                      "Name": "LowPowerEnable",
                      "Units": "Boolean",
                      "Description": "0 -- Low Power Mode is disabled, 1 -- Low Power Mode is enabled",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.LowPowerMode",
              "Operator": "Operators.Status",
              "Description": "Low Power Mode status on the product.",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": "Low Power Mode status on the product.",
                  "Bitfields": [
                    {
                      "Name": "LowPowerEnable",
                      "Units": "Boolean",
                      "Description": "0 -- Low Power Mode is disabled, 1 -- Low Power Mode is enabled",
                      "NumBits": 1
                    },
                    {
                      "Name": "Unused",
                      "Description": "Unused",
                      "NumBits": 7
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "LEDBrightness",
          "Value": 19,
          "Mandatory": "O",
          "Description": "Configures the brightness of LEDs on the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.LEDBrightness",
              "Operator": "Operators.Get",
              "Description": "Get the LED brightness setting from the product"
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.LEDBrightness",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get the LED brightness setting from the product",
              "Fields": [
                {
                  "Name": "TargetBrightnessStep",
                  "Type": "uint8",
                  "Description": "Set the target brightness step"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Settings",
              "Function": "SettingsFunctions.LEDBrightness",
              "Operator": "Operators.Status",
              "Description": "LED brightness status on the product",
              "Fields": [
                {
                  "Name": "TotalBrightnessSteps",
                  "Type": "uint8",
                  "Description": "Total brightness steps"
                },
                {
                  "Name": "CurrentBrightnessStep",
                  "Type": "uint8",
                  "Description": "Current brightness step"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Status",
      "Value": 2,
      "Mandatory": "M",
      "Description": "Product status information that may change during runtime",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Status FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all status information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start settings GetAll"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message."
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned."
            }
          ]
        },
        {
          "Name": "BatteryLevel",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Retrieves battery level and play time left",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.BatteryLevel",
              "Operator": "Operators.Get",
              "Description": "Battery level request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.BatteryLevel",
              "Operator": "Operators.Status",
              "Description": "Battery level(s) of product or product components",
              "Fields": [
                {
                  "Name": "BatteryLevel",
                  "VariableLength": true,
                  "Type": "uint8",
                  "Units": "percent",
                  "Description": "Battery Level as a percentage (0-100)",
                  "LongPostDescription": null
                },
                {
                  "Name": "PlayTimeRemaining",
                  "Type": "uint16",
                  "Units": "minutes",
                  "Description": "Optional remaining play time in minutes before battery depleted. If play time is not available or unsupported, product my report 0xFFFF."
                },
                {
                  "Name": "ComponentIdentifier",
                  "Type": "uint8",
                  "Enum": "ComponentID",
                  "Description": "Optional component identifier for products comprised of multiple components"
                }
              ]
            }
          ]
        },
        {
          "Name": "AuxCableDetect",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Reserved for BoseBuild Use",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.AuxCableDetect",
              "Operator": "Operators.Get",
              "Description": "Aux cable status get request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.AuxCableDetect",
              "Operator": "Operators.Status",
              "Description": "Aux cable status response",
              "Fields": [
                {
                  "Name": "CablePresent",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "Cable connection status (0-No cable detected at jack, 1-cable plugged into audio jack)"
                }
              ]
            }
          ]
        },
        {
          "Name": "MicrophoneLevel",
          "Value": 4,
          "Mandatory": "O",
          "Description": "TBD",
          "LongDescription": null,
          "Operators": []
        },
        {
          "Name": "ChargerDetect",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Indicates whether the charger is plugged into the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.ChargerDetect",
              "Operator": "Operators.Get",
              "Description": "Charger detect status request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.ChargerDetect",
              "Operator": "Operators.Status",
              "Description": "Charger detect status",
              "Fields": [
                {
                  "Name": "ChargerPlugged",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "0-Charger unplugged, 1-Charger plugged in"
                }
              ]
            }
          ]
        },
        {
          "Name": "Preset",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Indicates a user initiated change in the preset",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.Preset",
              "Operator": "Operators.Get",
              "Description": "Get Preset"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.Preset",
              "Operator": "Operators.Status",
              "Description": "Button press/release notification",
              "Fields": [
                {
                  "Name": "PresetTypes",
                  "Enum": "PresetTypes",
                  "Type": "uint8",
                  "Description": "Preset Information"
                }
              ]
            }
          ]
        },
        {
          "Name": "NetworkUp",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Indicates the product has an active network connect (e.g. LAN/Wi-Fi)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.NetworkUp",
              "Operator": "Operators.Get",
              "Description": "Request the network state from the product"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.NetworkUp",
              "Operator": "Operators.Status",
              "Description": "Network state status",
              "Fields": [
                {
                  "Name": "NetworkUp",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "0-Network is down, 1-Network is up"
                },
                {
                  "Name": "NetworkType",
                  "Description": "The primary type of network that is connected",
                  "Type": "uint8",
                  "Enum": "NetworkTypes",
                  "Count": 1
                }
              ]
            }
          ]
        },
        {
          "Name": "CrashData",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Allows mobile app to query new or currently stored crash data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.CrashData",
              "Operator": "Operators.Get",
              "Description": "Crash Data",
              "Fields": [
                {
                  "Name": "RequestType",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Optional. If not specified, new crash data is returned if available. Set to 0x01 to request currently stored data. New data is returned when Status.GetAll.Start message is sent."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.CrashData",
              "Operator": "Operators.Status",
              "Description": "Crash Data",
              "Fields": [
                {
                  "Name": "CrashDataKey",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "0x01 - Basic Info, 0x02 - Stack, 0x03 - Firmware Version Build Number"
                },
                {
                  "Name": "PayloadOrder",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "This value shows the order of the payload which is useful when more than 1 BMAP message are used to deliver a component of crash data."
                },
                {
                  "Name": "CrashData",
                  "Type": "uint8",
                  "Count": 253,
                  "VariableLength": true,
                  "Description": "Raw Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "InEar",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Indicates whether the product (bud) is currently in-ear",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.InEar",
              "Operator": "Operators.Get",
              "Description": "In-ear status request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.InEar",
              "Operator": "Operators.Status",
              "Description": "In-ear detect status",
              "Fields": [
                {
                  "Name": "InEarStatus",
                  "Type": "uint8",
                  "Description": "In Ear status of left and right buds",
                  "Bitfields": [
                    {
                      "Name": "InEarLeftStatus",
                      "Description": "In Ear status of left bud (0 == not in ear, 1 == currently in ear)",
                      "NumBits": 1
                    },
                    {
                      "Name": "InEarRightStatus",
                      "Description": "In Ear status of right bud (0 == not in ear, 1== currently in ear)",
                      "NumBits": 1
                    },
                    {
                      "Name": "InEarUnused",
                      "Description": "Unused",
                      "NumBits": 6
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargingCaseLidStatus",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Reports charging case lid open/close status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.ChargingCaseLidStatus",
              "Operator": "Operators.Get",
              "Description": "Get charging case lid status"
            },
            {
              "FunctionBlock": "FunctionBlocks.Status",
              "Function": "StatusFunctions.ChargingCaseLidStatus",
              "Operator": "Operators.Status",
              "Description": "Charging case lid status.",
              "Fields": [
                {
                  "Name": "LidStatus",
                  "Type": "uint8",
                  "Units": "LidStatus",
                  "Enum": "LidStatus",
                  "Description": "Charging case lid status."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "FirmwareUpdate",
      "Value": 3,
      "Mandatory": "O",
      "Description": "Facilitates over the air update of the product firmware",
      "Category": "Public",
      "Version": "1.0.1",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Info",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Firmware FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Firmware Update FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion(UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "State",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Used for getting the current update state.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.State",
              "Operator": "Operators.Get",
              "Description": null
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.State",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "currentFwuState",
                  "Type": "uint8",
                  "Enum": "FirmwareUpdateStates",
                  "Description": "Current FWU state of device"
                }
              ]
            }
          ]
        },
        {
          "Name": "Init",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Initializes the system for performing an update.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Init",
              "Operator": "Operators.Start",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "FlashSource",
                      "Enum": "FlashSources",
                      "NumBits": 1,
                      "Description": "Flash Sources"
                    }
                  ]
                },
                {
                  "Name": "BytesWritten",
                  "Type": "uint32",
                  "Description": "Number of bytes successfully written."
                },
                {
                  "Name": "ImageSize",
                  "Type": "uint32",
                  "Description": "Image size in bytes."
                },
                {
                  "Name": "FirmwareVersion",
                  "Type": "uint8",
                  "Count": 51,
                  "Units": "ASCII",
                  "Description": "Update image firmware version"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Init",
              "Operator": "Operators.Result",
              "Description": "Result"
            }
          ]
        },
        {
          "Name": "DataTransfer",
          "Value": 3,
          "Mandatory": "O",
          "Description": "(DEPRECATED) Send update image data.",
          "LongDescription": "This function has been deprecated in the latest specification. The DataTransferWithSeqNum function should be used instead to send firmware update data packets to the product.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.DataTransfer",
              "Operator": "Operators.Start",
              "Description": null,
              "Fields": [
                {
                  "Name": "FirmwareImageData",
                  "Type": "uint8",
                  "Count": 60,
                  "Description": "Image Data"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.DataTransfer",
              "Operator": "Operators.Processing",
              "Description": null
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.DataTransfer",
              "Operator": "Operators.Result",
              "Description": null
            }
          ]
        },
        {
          "Name": "Synchronize",
          "Value": 4,
          "Mandatory": "M",
          "Description": "Returns the update image's information.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Synchronize",
              "Operator": "Operators.Get",
              "Description": null
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Synchronize",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "FlashSource",
                      "Enum": "FlashSources",
                      "NumBits": 1
                    }
                  ]
                },
                {
                  "Name": "BytesWritten",
                  "Type": "uint32",
                  "Description": "Number of bytes successfully written."
                },
                {
                  "Name": "FirmwareVersion",
                  "Type": "uint8",
                  "Count": 51,
                  "Units": "ASCII",
                  "Description": "Update image firmware version"
                }
              ]
            }
          ]
        },
        {
          "Name": "Validate",
          "Value": 5,
          "Mandatory": "M",
          "Description": "Validates the uploaded update image.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Validate",
              "Operator": "Operators.Start",
              "Description": null,
              "Fields": [
                {
                  "Name": "Crc",
                  "Type": "uint32",
                  "Description": "Reversed CRC"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Validate",
              "Operator": "Operators.Processing",
              "Description": null
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Validate",
              "Operator": "Operators.Error",
              "Description": "Firmware Update Validate Error",
              "Fields": [
                {
                  "Name": "ErrorCodes",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Validate",
              "Operator": "Operators.Result",
              "Description": null
            }
          ]
        },
        {
          "Name": "Run",
          "Value": 6,
          "Mandatory": "M",
          "Description": "Run the update with the uploaded update image.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Run",
              "Operator": "Operators.Get",
              "Description": "Queries product to determine if it is ready to apply update or whether there are error conditions which would prevent the update from being applied successfully (i.e. battery too low)"
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Run",
              "Operator": "Operators.Start",
              "Description": "Command to start process of applying update to product.",
              "Fields": [
                {
                  "Name": "FwuMode",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Command to start process of applying update to product. If the command is sent without any data payload, the update gets applied immediately. If the command is sent with a payload length of 1 with a data value of 0x01, the update will be applied after the next power cycle, if supported by the product. Any other data value results in an error."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Run",
              "Operator": "Operators.Processing",
              "Description": "Acknowledgement from product that process to apply update to product has successfully started. This is a broadcast message to let all connected devices know DFU is happening."
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Run",
              "Operator": "Operators.Status",
              "Description": "Returns information about the product's readiness to perform an update, and ability to perform certain kinds of updates",
              "Fields": [
                {
                  "Name": "FwuStatus",
                  "Type": "uint8",
                  "Description": "0x00 if product is ready to apply update and all conditions are met to perform operation (i.e. battery level is sufficiently high, etc.)"
                },
                {
                  "Name": "FwuInformation",
                  "Type": "uint8",
                  "Description": "Optional field containing additional information about running the update. If this field is not present, client applications must assume all options in this field are not supported, i.e. set to 0.",
                  "Bitfields": [
                    {
                      "Name": "FwuDeferrable",
                      "NumBits": 1,
                      "Description": "0 -- Firmware updates may not be deferred, 1 -- firmware updates may be deferred. If firmware updates may not be deferred, client apps must not request a deferred update with .Run.Start.01."
                    },
                    {
                      "Name": "FwuInformationReserved",
                      "NumBits": 7,
                      "Description": "Reserved for future use. Must be set to zero while they are reserved."
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Run",
              "Operator": "Operators.Error",
              "Description": "Firmware Update Validate Error",
              "Fields": [
                {
                  "Name": "ErrorCodes",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Run",
              "Operator": "Operators.Result",
              "Description": "Firmware Update Successful",
              "Fields": [
                {
                  "Name": "ResultCode",
                  "Type": "uint8",
                  "Description": "Returns 0x00 if product was successfully able to update to a newer firmware.  Returns 0x01 if the product will apply the update on the next power-up cycle."
                }
              ]
            }
          ]
        },
        {
          "Name": "Reset",
          "Value": 7,
          "Mandatory": "M",
          "Description": "Reset's the software update process to its initial state.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Reset",
              "Operator": "Operators.Start",
              "Description": "Initiate a reset of the firmware update software on the device.  Note that the firmware will reject the Start operator if another device has initiated a firmware update that is still in progress."
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Reset",
              "Operator": "Operators.Result",
              "Description": "Notify the sender of the Start operation that the reset has been completed.  This message will be broadcast after the device reboots, but before it has had a chance to reconnect to the initiating device."
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Reset",
              "Operator": "Operators.Processing",
              "Description": "If the reset operation on the targetted device takes more than a few seconds to complete, it should send a Processing operator back to the sender to indicate that it has received the Start command and is working on it."
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Reset",
              "Operator": "Operators.Get",
              "Description": "Request the reset status of the firmware update software.  This will respond with a FirmwareUpdate.Reset.Status to indicate if the firmware update software is erasing the flash, has a flash erase scheduled for the next power-down, or does not have a reset operation in progress."
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.Reset",
              "Operator": "Operators.Status",
              "Description": "Return the reset status of the firmware update software.",
              "Fields": [
                {
                  "Name": "FwuResetStatus",
                  "Type": "uint8",
                  "Enum": "ResetStatus",
                  "Description": "Indicates if the firmware update software is erasing the flash, has a flash erase scheduled for the next power-down, or does not have a reset operation in progress."
                }
              ]
            }
          ]
        },
        {
          "Name": "DataTransferSeqNumber",
          "Value": 8,
          "Mandatory": "M",
          "Description": "Send update image data with rolling sequence number.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.DataTransferSeqNumber",
              "Operator": "Operators.Start",
              "Description": "Start command",
              "Fields": [
                {
                  "Name": "FwuSeqNo",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Rolling Sequence Number"
                },
                {
                  "Name": "FwuImageData",
                  "Type": "uint8",
                  "Count": 59,
                  "Description": "Update Image data"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.DataTransferSeqNumber",
              "Operator": "Operators.Processing",
              "Description": "Sent periodically but not after every packet received"
            },
            {
              "FunctionBlock": "FunctionBlocks.FirmwareUpdate",
              "Function": "FirmwareUpdateFunctions.DataTransferSeqNumber",
              "Operator": "Operators.Result",
              "Description": "Sent in response to an empty Start command to acknowledge end of data transfer"
            }
          ]
        }
      ]
    },
    {
      "Name": "DeviceManagement",
      "Value": 4,
      "Mandatory": "O",
      "Description": "Manages source device connections to the product",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock information",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Device Management FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Device Management FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Connect",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Command for product to connect to a source device",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Connect",
              "Operator": "Operators.Get",
              "Description": "Get Device Management Connect"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Connect",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Connect Status",
              "Fields": [
                {
                  "Name": "SupportedConnectionTypes",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "Unused1",
                      "NumBits": 1,
                      "Description": "Unused"
                    },
                    {
                      "Name": "VPASupportedWhileP2PConnectionActive",
                      "NumBits": 1,
                      "Description": "VPASupportedWhileP2PConnectionActive"
                    },
                    {
                      "Name": "ARStreamingSupportedWhileP2PConnectionActive",
                      "NumBits": 1,
                      "Description": "ARStreamingSupportedWhileP2PConnectionActive"
                    },
                    {
                      "Name": "VoiceP2PConnectionSupportedForProductOfOppositeType",
                      "NumBits": 1,
                      "Description": "VoiceP2PConnectionSupportedForProductOfOppositeType"
                    },
                    {
                      "Name": "VoiceP2PConnectionSupportedForProductOfSameType",
                      "NumBits": 1,
                      "Description": "VoiceP2PConnectionSupportedForProductOfSameType"
                    },
                    {
                      "Name": "MusicP2PConnectionOnlySupportForProductWithIdenticalPID",
                      "NumBits": 1,
                      "Description": "MusicP2PConnectionOnlySupportForProductWithIdenticalPID"
                    },
                    {
                      "Name": "MusicP2PConnectionSupportedForProductOfSameType",
                      "NumBits": 1,
                      "Description": "MusicP2PConnectionSupportedForProductOfSameType"
                    },
                    {
                      "Name": "ProductType",
                      "NumBits": 1,
                      "Description": "(0 = personal listening device, 1 = out loud listening device)"
                    }
                  ]
                },
                {
                  "Name": "CompatibilityNumber",
                  "Type": "uint8",
                  "Description": "Compatibility number that is incremented anytime changes are made to P2P firmware implementation that are not backward compatible. Compatibility number for first P2P implementation == 0."
                },
                {
                  "Name": "SupportedCodecs",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "SBCA2DPcodec",
                      "NumBits": 1,
                      "Description": "SBCA2DPcodec"
                    },
                    {
                      "Name": "AACA2DPcodec",
                      "NumBits": 1,
                      "Description": "AACA2DPcodec"
                    },
                    {
                      "Name": "Unused2",
                      "NumBits": 5,
                      "Description": "Unused"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Connect",
              "Operator": "Operators.Start",
              "Description": "Device Management Connect Start Request",
              "Fields": [
                {
                  "Name": "ConnectionType",
                  "Type": "uint8",
                  "Units": "P2PMode",
                  "Description": null,
                  "LongPreDescription": null,
                  "Bitfields": [
                    {
                      "Name": "MACAddress",
                      "NumBits": 2,
                      "Units": "Boolean",
                      "Description": "0 - Device identified by its MAC address, 1 - Device identified by its friendly name"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Second 2 bits unused"
                    },
                    {
                      "Name": "DeviceIdentifier",
                      "Enum": "P2PMode",
                      "NumBits": 3,
                      "Description": "Connection type P2P mode"
                    },
                    {
                      "Name": "ProductType",
                      "NumBits": 1,
                      "Description": "0 == personal listening device, 1 == out loud listening device"
                    }
                  ]
                },
                {
                  "Name": "DeviceInformation",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 59,
                  "Description": "Depends on value of device identifier in byte 0."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Connect",
              "Operator": "Operators.Processing",
              "Description": "Device Management Connect Processing Response",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source device's MAC address"
                },
                {
                  "Name": "FriendlyName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 54,
                  "Description": "Bluetooth friendly name if connect by Bluetooth friendly name was used"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Connect",
              "Operator": "Operators.Error",
              "Description": "Device Management Connect Error Response",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Description": "Error Code"
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC Address of failed connection"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Connect",
              "Operator": "Operators.Result",
              "Description": "Device Management Connect Result",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of connected device"
                },
                {
                  "Name": "SupportedCodecs",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "A2dpConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "A2dpConnected"
                    },
                    {
                      "Name": "HfpConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "HfpConnected"
                    },
                    {
                      "Name": "AvrcpConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "AvrcpConnected"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 5,
                      "Description": "Unused bits"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "Disconnect",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Command for product to disconnect from a source device",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Disconnect",
              "Operator": "Operators.Start",
              "Description": "Device Management Disconnect Start Request",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of source device to disconnect"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Disconnect",
              "Operator": "Operators.Processing",
              "Description": "When the reason code is less than or equal to 15 and the payload is of length 1, the recipient of the BMAP packet shall consider that the physical event that triggered disconnect occurred in the sender Product. For all other cases, the payload length shall be of length 7.",
              "Fields": [
                {
                  "Name": "ReasonCode",
                  "Type": "uint8",
                  "Enum": "ReasonCodes",
                  "Description": "Reason Code."
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "For Reason code 16 (Out of Range), the MAC address shall be the device that went out of range. For Reason code 32 and 33, the MAC address is the source device that got disconnected."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Disconnect",
              "Operator": "Operators.Result",
              "Description": "Device Management Disconnect Result Response",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of disconnected source device"
                }
              ]
            }
          ]
        },
        {
          "Name": "RemoveDevice",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Command for product to disconnect from a source device and remove it from its Device List",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.RemoveDevice",
              "Operator": "Operators.Start",
              "Description": "Device Management Remove Start Request",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of source device to disconnect"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.RemoveDevice",
              "Operator": "Operators.Processing",
              "Description": "Device Management Remove Processing Response"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.RemoveDevice",
              "Operator": "Operators.Result",
              "Description": "Device Management Remove Result Response",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of disconnected source device"
                }
              ]
            }
          ]
        },
        {
          "Name": "List",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Returns ordered list of MAC addresses corresponding to source devices that have been previously used with the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.List",
              "Operator": "Operators.Get",
              "Description": "Returns an ordered list of MAC addresses corresponding to source devices previously used and remembered by the product."
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.List",
              "Operator": "Operators.Status",
              "Description": "Bytes 1 - (1 +6*N) Ordered list of source device MAC addresses. N = number of source devices in device list.",
              "Fields": [
                {
                  "Name": "DeviceConnected",
                  "VariableLength": true,
                  "Type": "uint8",
                  "LongPostDescription": null,
                  "Bitfields": [
                    {
                      "Name": "DeviceOneConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the first device is connected"
                    },
                    {
                      "Name": "DeviceTwoConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the second device is connected"
                    },
                    {
                      "Name": "DeviceThreeConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the third device is connected"
                    },
                    {
                      "Name": "DeviceFourConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the fourth device is connected"
                    },
                    {
                      "Name": "DeviceFiveConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the fifth device is connected"
                    },
                    {
                      "Name": "DeviceSixConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the sixth device is connected"
                    },
                    {
                      "Name": "DeviceSevenConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the seventh device is connected"
                    },
                    {
                      "Name": "DeviceEightConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the eighth device is connected"
                    }
                  ]
                },
                {
                  "Name": "DeviceOneMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceTwoMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceThreeMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceFourMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceFiveMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceSixMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceSevenMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                },
                {
                  "Name": "DeviceEightMacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "Info",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Detailed information for a specific source device",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Info",
              "Operator": "Operators.Get",
              "Description": "Get Device Info by providing the MAC address",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of source device"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Info",
              "Operator": "Operators.Status",
              "Description": "Source device information.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 6,
                  "Description": "MAC address of source device",
                  "LongPostDescription": null
                },
                {
                  "Name": "SourceDeviceStatus",
                  "Type": "uint8",
                  "Description": "MAC address of source device",
                  "Bitfields": [
                    {
                      "Name": "DeviceConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if connected false otherwise"
                    },
                    {
                      "Name": "DeviceInfoQuery",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if this device sent the Device.Info Query"
                    },
                    {
                      "Name": "DeviceIsBoseProduct",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if the device is a Bose product"
                    },
                    {
                      "Name": "Unused",
                      "NumBits": 1,
                      "Description": "Unused"
                    },
                    {
                      "Name": "VoiceP2PSupportedForProductOfOppositeType",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if Voice P2P connection supported for product of opposite type"
                    },
                    {
                      "Name": "VoiceP2PSupportedForProductOfSameType",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if Voice P2P connection supported for product of same type"
                    },
                    {
                      "Name": "MusicP2PSupportedForProductOfSameType",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if Music P2P connection supported for product of same type"
                    },
                    {
                      "Name": "ProductType",
                      "NumBits": 1,
                      "Description": "0 == personal listening device, 1 == out loud listening device"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ExtendedInfo",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Extended information about a source device that may not be tied to visual elements in the mobile app",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.ExtendedInfo",
              "Operator": "Operators.Get",
              "Description": "Get Device Extended Info by providing the MAC address",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of source device"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.ExtendedInfo",
              "Operator": "Operators.Status",
              "Description": "Source device information.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 6,
                  "Description": "MAC address of source device"
                },
                {
                  "Name": "PairedProfiles",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "PairedA2DP",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if A2DP is a profile paired with the source device"
                    },
                    {
                      "Name": "PairedHFP",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if HFP is a profile paired with the source device"
                    },
                    {
                      "Name": "PairedAVRCP",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if AVRCP is a profile paired with the source device"
                    }
                  ]
                },
                {
                  "Name": "ConnectedProfiles",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "ConnectedA2DP",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if A2DP is a profile connected with the source device"
                    },
                    {
                      "Name": "ConnectedHFP",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if HFP is a profile connected with the source device"
                    },
                    {
                      "Name": "ConnectedAVRCP",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "True if AVRCP is a profile connected with the source device"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ClearDeviceList",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Deletes the stored list of previously used source devices",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.ClearDeviceList",
              "Operator": "Operators.Start",
              "Description": "Start Clear Device List Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.ClearDeviceList",
              "Operator": "Operators.Processing",
              "Description": "Processing Clear Device List Request"
            }
          ]
        },
        {
          "Name": "PairingMode",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Directs product to enter or exit pairing mode",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PairingMode",
              "Operator": "Operators.Get",
              "Description": "Device Management Pairing Mode Get request"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PairingMode",
              "Operator": "Operators.Status",
              "Description": "Device Management Pairing Mode Status, which is the final result to a Get request.",
              "Fields": [
                {
                  "Name": "PairingModeEnabled",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "0-pairing mode disabled, 1-pairing mode enabled."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PairingMode",
              "Operator": "Operators.Start",
              "Description": "Device Management Pairing Mode Start request",
              "Fields": [
                {
                  "Name": "EnablePairingMode",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "0-pairing mode disabled, 1-pairing mode enabled."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PairingMode",
              "Operator": "Operators.Processing",
              "Description": "Device Management Pairing Mode Processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PairingMode",
              "Operator": "Operators.Result",
              "Description": "Device Management Pairing Mode Result, which is the final response to a Start request",
              "Fields": [
                {
                  "Name": "StatusCode",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "0-pairing mode disabled, 1-pairing mode enabled."
                },
                {
                  "Name": "ReasonCode",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "Reason code depends on value of status code. Refer to Table~\\ref{tab:ReasonCodes-Enabled} and Table~\\ref{tab:ReasonCodes-Disabled}.",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "AppAddress",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Return MAC address of mobile app",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.AppAddress",
              "Operator": "Operators.Get",
              "Description": "App Address Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.AppAddress",
              "Operator": "Operators.Status",
              "Description": "Returned App Address",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of mobile device running app"
                }
              ]
            }
          ]
        },
        {
          "Name": "PrepareP2P",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Prepare for incoming product to product connection",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PrepareP2P",
              "Operator": "Operators.Start",
              "Description": "Prepare P2P Connection Start request",
              "Fields": [
                {
                  "Name": "ConnectionType",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "P2PMode",
                      "NumBits": 6,
                      "Units": "P2PMode",
                      "Description": "P2PMode"
                    },
                    {
                      "Name": "ProductType",
                      "NumBits": 1,
                      "Description": "0 == personal listening device, 1 == out loud listening device"
                    }
                  ]
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of P2P master"
                },
                {
                  "Name": "PIDP2PMaster",
                  "Type": "uint16",
                  "Description": "PID of P2P master (MSB first)"
                },
                {
                  "Name": "VariantIDP2PMaster",
                  "Type": "uint8",
                  "Description": "Variant ID of P2P master"
                },
                {
                  "Name": "SupportedConnectionTypes",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "UnusedBits",
                      "NumBits": 3,
                      "Description": "First 3 bits unused"
                    },
                    {
                      "Name": "VoiceP2PConnectionOppositeTypeSupported",
                      "NumBits": 1,
                      "Description": "Voice P2P connection supported for product of opposite type"
                    },
                    {
                      "Name": "VoiceP2PConnectionSameTypeSupported",
                      "NumBits": 1,
                      "Description": "Voice P2P connection supported for product of same type"
                    },
                    {
                      "Name": "MusicP2PConnectionIdenticalPIDOnlySupported",
                      "NumBits": 1,
                      "Description": "Music P2P connection only support for product with identical PID"
                    },
                    {
                      "Name": "MusicP2PConnectionSameTypeSupported",
                      "NumBits": 1,
                      "Description": "Music P2P connection supported for product of same type"
                    },
                    {
                      "Name": "ProductTypeSupported",
                      "NumBits": 1,
                      "Description": "0 == personal listening device, 1 == out loud listening device"
                    }
                  ]
                },
                {
                  "Name": "CompatibilityNumberP2PMaster",
                  "Type": "uint8",
                  "Description": "Compatibility number of P2P master"
                },
                {
                  "Name": "Codec",
                  "Type": "uint8",
                  "Description": "0 == SBC A2DP codec, 1 == AAC A2DP codec"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PrepareP2P",
              "Operator": "Operators.Processing",
              "Description": "Prepare P2P Connection Processing Response"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.PrepareP2P",
              "Operator": "Operators.Result",
              "Description": "Prepare P2P Connection Result Response",
              "Fields": [
                {
                  "Name": "AudioLatency",
                  "Type": "uint16",
                  "Units": "Milliseconds",
                  "Description": "Audio latency for product returned to allow P2P master to time align audio streams (16-bit, MFB first, in milliseconds)"
                }
              ]
            }
          ]
        },
        {
          "Name": "P2PMode",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Get/Set product to product connection mode",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.P2PMode",
              "Operator": "Operators.Get",
              "Description": "Get P2P Mode"
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.P2PMode",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get P2P Mode",
              "Fields": [
                {
                  "Name": "P2PMode",
                  "Type": "uint8",
                  "Units": "P2PMode",
                  "Enum": "P2PMode",
                  "Description": "P2PMode"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.P2PMode",
              "Operator": "Operators.Status",
              "Description": "P2P Mode Status",
              "Fields": [
                {
                  "Name": "P2PMode",
                  "Type": "uint8",
                  "Units": "P2PMode",
                  "Enum": "P2PMode",
                  "Description": "P2PMode"
                }
              ]
            }
          ]
        },
        {
          "Name": "Routing",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Start or stop routing packets via an intermediate node",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Routing",
              "Operator": "Operators.Start",
              "Description": "Start Routing sequence.",
              "Fields": [
                {
                  "Name": "Route",
                  "Type": "uint8",
                  "Description": "Route setup or teardown",
                  "Bitfields": [
                    {
                      "Name": "PortNumber",
                      "NumBits": 2,
                      "Description": "Port Number"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 5,
                      "Description": "Unused bits."
                    },
                    {
                      "Name": "Action",
                      "NumBits": 1,
                      "Description": "Action. UP = 1, DOWN = 0."
                    }
                  ]
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address to begin routing."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Routing",
              "Operator": "Operators.Processing",
              "Description": null,
              "Fields": [
                {
                  "Name": "Route",
                  "Type": "uint8",
                  "Description": "Route setup or teardown",
                  "Bitfields": [
                    {
                      "Name": "PortNumber",
                      "NumBits": 2,
                      "Description": "Port Number"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 5,
                      "Description": "Unused bits."
                    },
                    {
                      "Name": "Action",
                      "NumBits": 1,
                      "Description": "Action. UP = 1, DOWN = 0."
                    }
                  ]
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address to begin routing."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Routing",
              "Operator": "Operators.Result",
              "Description": null,
              "Fields": [
                {
                  "Name": "Route",
                  "Type": "uint8",
                  "Description": "Route setup or teardown",
                  "Bitfields": [
                    {
                      "Name": "PortNumber",
                      "NumBits": 2,
                      "Description": "Port Number"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 5,
                      "Description": "Unused bits."
                    },
                    {
                      "Name": "Action",
                      "NumBits": 1,
                      "Description": "Action. UP = 1, DOWN = 0."
                    }
                  ]
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address to begin routing."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.Routing",
              "Operator": "Operators.Error",
              "Description": null,
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Count": 2,
                  "Description": "Error Code"
                },
                {
                  "Name": "Route",
                  "Type": "uint8",
                  "Description": "Route setup or teardown",
                  "Bitfields": [
                    {
                      "Name": "PortNumber",
                      "NumBits": 2,
                      "Description": "Port Number"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 5,
                      "Description": "Unused bits."
                    },
                    {
                      "Name": "Action",
                      "NumBits": 1,
                      "Description": "Action. UP = 1, DOWN = 0."
                    }
                  ]
                },
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address to begin routing."
                }
              ]
            }
          ]
        },
        {
          "Name": "P2PFeatures",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Exchange P2P features between two connected products after a P2P connection has been established.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.P2PFeatures",
              "Operator": "Operators.SetGet",
              "Description": "SetGet P2PFeatures",
              "Fields": [
                {
                  "Name": "P2PFeatures",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Bitfield of P2PFeatures.",
                  "Bitfields": [
                    {
                      "Name": "P2PFeature",
                      "NumBits": 1,
                      "Description": "0 - no P2P features supported, 1 - Link Loss v2.0.0"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 7,
                      "Description": "Unused Bits"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DeviceManagement",
              "Function": "DeviceManagementFunctions.P2PFeatures",
              "Operator": "Operators.Status",
              "Description": "Status of P2PFeatures.",
              "Fields": [
                {
                  "Name": "P2PFeaturesStatus",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Bitfield of P2PFeatures.",
                  "LongPostDescription": null,
                  "Bitfields": [
                    {
                      "Name": "P2PFeature",
                      "NumBits": 1,
                      "Description": "0 - no P2P features supported, 1 - Link Loss v2.0.0"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 7,
                      "Description": "Unused Bits"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "AudioManagement",
      "Value": 5,
      "Mandatory": "O",
      "Description": "Allows mobile app to monitor and set audio related parameters in the product",
      "Category": "Public",
      "Version": "1.0.1",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Audio Management Function Block Info Status Response",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Source",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query or set the source device currently routing audio to product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Source",
              "Operator": "Operators.Get",
              "Description": "Audio Management Source Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Source",
              "Operator": "Operators.SetGet",
              "Description": "Audio Management Source Set / Get Request",
              "Fields": [
                {
                  "Name": "SourceType",
                  "Type": "uint8",
                  "Enum": "SourceType",
                  "Description": "Source type to select."
                },
                {
                  "Name": "AdditionalSourceIdentifier",
                  "Type": "uint8",
                  "Count": 6,
                  "VariableLength": true,
                  "Description": "If the source is of type Bluetooth this will contain the MAC Address of the audio source."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Source",
              "Operator": "Operators.Status",
              "Description": "Audio Management Source Status Response",
              "Fields": [
                {
                  "Name": "SupportedSourcesBitmask",
                  "Type": "uint8",
                  "Count": 2,
                  "Description": "Bit mask of supported sources, MSB first."
                },
                {
                  "Name": "CurrentlySelectedSourceType",
                  "Type": "uint8",
                  "Enum": "SourceType",
                  "Description": "Currently-selected source type."
                },
                {
                  "Name": "AdditionalSourceIdentifier",
                  "Type": "uint8",
                  "Count": 6,
                  "VariableLength": true,
                  "Description": "If the source is of type Bluetooth this will contain the MAC Address of the audio source."
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Returns all status information.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Queries currently selected source"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.GetAll",
              "Operator": "Operators.Error",
              "Description": "Audio Management GetAll Error Response",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Description": "Error Codes, Busy -- a busy error will be sent  if the product is already processing  a response to a GetAll command\n"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "Control",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Mobile app requesting product to control the audio from the currently playing source. Product uses the appropriate AVRCP commands to control the audio.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Control",
              "Operator": "Operators.Get",
              "Description": "Audio Management Control Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Control",
              "Operator": "Operators.Start",
              "Description": "Audio Management Control Start Request",
              "Fields": [
                {
                  "Name": "ControlValue",
                  "Type": "uint8",
                  "Enum": "ControlValue",
                  "Description": "Audio control value."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Control",
              "Operator": "Operators.Processing",
              "Description": "Audio Management Control Processing Response",
              "Fields": [
                {
                  "Name": "ControlValue",
                  "Type": "uint8",
                  "Enum": "ControlValue",
                  "Description": "Audio control value."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Control",
              "Operator": "Operators.Result",
              "Description": "Audio Management Control Result Response",
              "Fields": [
                {
                  "Name": "ControlValue",
                  "Type": "uint8",
                  "Enum": "ControlValue",
                  "Description": "Audio control value.",
                  "LongPostDescription": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Control",
              "Operator": "Operators.Status",
              "Description": "Audio Management Control Status Response",
              "Fields": [
                {
                  "Name": "SupportedAudioControls",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Description": "Supported audio controls bitmask"
                }
              ]
            }
          ]
        },
        {
          "Name": "Status",
          "Value": 4,
          "Mandatory": "M",
          "Description": "Indicates the current state of audio in the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Status",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Status",
              "Operator": "Operators.Error",
              "Description": "Error for Status",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Status",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "AudioStatus",
                  "Type": "uint8",
                  "Enum": "AudioStatuses"
                },
                {
                  "Name": "CurrentTrackPosition",
                  "Type": "uint16",
                  "Description": "Current track position in seconds, \\ MSB first, 0xffff = Unknown",
                  "LongDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "Volume",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Allows mobile app to query / set volume in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Volume",
              "Operator": "Operators.Get",
              "Type": "Command",
              "Description": "Get Volume"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Volume",
              "Operator": "Operators.SetGet",
              "Type": "Command",
              "Description": "Set/Get Volume",
              "Fields": [
                {
                  "Name": "TargetVolumeStep",
                  "Type": "uint8",
                  "Description": "Target Volume Step"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Volume",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Volume Status",
              "Fields": [
                {
                  "Name": "TotalVolumeSteps",
                  "Type": "uint8",
                  "Description": "Total no of volume steps"
                },
                {
                  "Name": "CurrentVolumeStep",
                  "Type": "uint8",
                  "Description": "Current Volume Step"
                }
              ]
            }
          ]
        },
        {
          "Name": "NowPlaying",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Currently playing track information provided by product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.NowPlaying",
              "Operator": "Operators.Start",
              "Description": "Query Now Playing information"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.NowPlaying",
              "Operator": "Operators.Processing",
              "Description": "Synchronous response to Start, indicates query is in progress"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.NowPlaying",
              "Operator": "Operators.Result",
              "Description": "Indicates query is complete"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.NowPlaying",
              "Operator": "Operators.Status",
              "Description": "Now Playing attribute information",
              "Fields": [
                {
                  "Name": "AttributeID",
                  "Type": "uint8",
                  "Units": "AttributeID",
                  "Description": "Now Playing attribute id"
                },
                {
                  "Name": "NowPlayingAttribute",
                  "Type": "uint8",
                  "Count": 59,
                  "VariableLength": true,
                  "Description": "Now playing attribute value",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "Latency",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Allows caller to get or set audio latency of the product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Latency",
              "Operator": "Operators.Get",
              "Description": "Source device MAC address"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Latency",
              "Operator": "Operators.SetGet",
              "Description": "Target Latency",
              "Fields": [
                {
                  "Name": "TargetLatency",
                  "Type": "uint16",
                  "Description": "TargetLatency (default latency value == 0)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Latency",
              "Operator": "Operators.Status",
              "Description": "Audio Latency status",
              "Fields": [
                {
                  "Name": "MinimumLatency",
                  "Type": "uint16",
                  "Description": "Minimum Latency"
                },
                {
                  "Name": "MaximumLatency",
                  "Type": "uint16",
                  "Description": "Maximum Latency"
                },
                {
                  "Name": "CurrentLatency",
                  "Type": "uint16",
                  "Description": "Current Latency"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChannelParameter",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Allows the mobile app to query/set per-channel audio parameters on a multi-channel product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.ChannelParameter",
              "Operator": "Operators.Get",
              "Type": "Command",
              "Description": "Get an audio parameter on a specific channel",
              "Fields": [
                {
                  "Name": "Channel",
                  "Type": "uint8",
                  "Description": "Channel being requested"
                },
                {
                  "Name": "Param",
                  "Type": "uint8",
                  "Enum": "ParameterTypes",
                  "Description": "Audio parameter being requested"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.ChannelParameter",
              "Operator": "Operators.SetGet",
              "Type": "Command",
              "Description": "Set an audio parameter on a specific channel",
              "Fields": [
                {
                  "Name": "Channel",
                  "Type": "uint8",
                  "Description": "Channel being set"
                },
                {
                  "Name": "Param",
                  "Type": "uint8",
                  "Enum": "ParameterTypes",
                  "Description": "Audio parameter being set"
                },
                {
                  "Name": "TargetStep",
                  "Type": "uint8",
                  "Description": "Target parameter step being set"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.ChannelParameter",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Audio parameter status",
              "Fields": [
                {
                  "Name": "Channel",
                  "Type": "uint8",
                  "Description": "Channel being set"
                },
                {
                  "Name": "Param",
                  "Type": "uint8",
                  "Enum": "ParameterTypes",
                  "Description": "Audio parameter being set"
                },
                {
                  "Name": "TotalSteps",
                  "Type": "uint8",
                  "Description": "Total parameter steps"
                },
                {
                  "Name": "CurrentStep",
                  "Type": "uint8",
                  "Description": "Current parameter step"
                }
              ]
            }
          ]
        },
        {
          "Name": "SignalClip",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Allows the mobile app to get the signal/clip status of each channel on a multi-channel product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.SignalClip",
              "Operator": "Operators.Get",
              "Type": "Command",
              "Fields": [
                {
                  "Name": "Channel",
                  "Type": "uint8",
                  "Description": "Get the signal/clip status of a specific channel"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.SignalClip",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Signal/clip status",
              "Fields": [
                {
                  "Name": "Channel",
                  "Type": "uint8",
                  "Description": "Channel being requested"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Enum": "SignalClipStatus",
                  "Description": "Signal/clip status"
                }
              ]
            }
          ]
        },
        {
          "Name": "Channels",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Allows the mobile app to query the number of discrete audio channels a device supports.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Channels",
              "Operator": "Operators.Get",
              "Type": "Command",
              "Description": "Get the number of audio channels a device supports"
            },
            {
              "FunctionBlock": "FunctionBlocks.AudioManagement",
              "Function": "AudioManagementFunctions.Channels",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Audio channels status",
              "Fields": [
                {
                  "Name": "Channels",
                  "Type": "uint8",
                  "Description": "Number of supported channels"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "CallManagement",
      "Value": 6,
      "Mandatory": "O",
      "Description": "Incoming / outgoing call management to product",
      "Category": "Public",
      "Version": "1.0.0",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Call Management FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Call Management FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function block version(UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Control",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Mobile app requests call related activities on the product based on the user request.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Control",
              "Operator": "Operators.Start",
              "Description": "Start Call Control Request",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address."
                },
                {
                  "Name": "CallControlValue",
                  "Type": "uint8",
                  "Enum": "CallControlValue",
                  "Description": "Call Control Value."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Control",
              "Operator": "Operators.Result",
              "Description": "Call Management Result Response"
            }
          ]
        },
        {
          "Name": "Status",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Product notifies call status info to mobile app when the call arrives.",
          "LongDescription": "This function is primarily used to indicate the call status of the product.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Status",
              "Operator": "Operators.Get",
              "Description": "Get Call Status Request."
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Status",
              "Operator": "Operators.Status",
              "Description": "Call Management Status Response.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address."
                },
                {
                  "Name": "CallStatusValue",
                  "Type": "uint8",
                  "Units": "CallStatusValue",
                  "Enum": "CallStatusValue",
                  "Description": "Call Status Value."
                }
              ]
            }
          ]
        },
        {
          "Name": "PlaceCall",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Mobile app requests product to dial a number provided in the Data field.",
          "LongDescription": "This function is used to initiate an outgoing call from the product.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.PlaceCall",
              "Operator": "Operators.Start",
              "Description": "Start a place call request.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address"
                },
                {
                  "Name": "PhoneNumber",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 59,
                  "Units": "ASCII",
                  "Description": "The phone number to place the call to."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.PlaceCall",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.PlaceCall",
              "Operator": "Operators.Result",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "Volume",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Changes call volume on product",
          "LongDescription": "This allows the user to change the call volume from the mobile app. The volume level should be kept in sync between the product and the app.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Volume",
              "Operator": "Operators.Get",
              "Description": "Get Call Volume Request",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Volume",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get Call Volume Request/Response.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address"
                },
                {
                  "Name": "TargetVolumeStep",
                  "Type": "uint8",
                  "Description": "Target volume step"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.Volume",
              "Operator": "Operators.Status",
              "Description": "Call Volume Status Response.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address."
                },
                {
                  "Name": "TargetVolumeStep",
                  "Type": "uint8",
                  "Description": "Target volume step."
                },
                {
                  "Name": "CurrentVolumeStep",
                  "Type": "uint8",
                  "Description": "Current volume step."
                }
              ]
            }
          ]
        },
        {
          "Name": "ManageActive",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Manages call functions like answer, end or rejecting a call",
          "LongDescription": "This function is used by the mobile app to request proper handling of the ongoing call based on the user input.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.ManageActive",
              "Operator": "Operators.Start",
              "Description": "Start a manage active call request",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address"
                },
                {
                  "Name": "ManageActiveCallValue",
                  "Type": "uint8",
                  "Units": "ManageActiveCallValue",
                  "Enum": "ManageActiveCallValue",
                  "Description": "The manage active call value"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.ManageActive",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.ManageActive",
              "Operator": "Operators.Result",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "CallerID",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Product indicates caller ID information to mobile app",
          "LongDescription": "This function is used by the product to provide the app with caller ID information (name and number) for an incoming call.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.CallManagement",
              "Function": "CallManagementFunctions.CallerID",
              "Operator": "Operators.Status",
              "Description": "Caller id status response.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Source MAC Address"
                },
                {
                  "Name": "CallerNumberLength",
                  "Type": "uint8",
                  "Description": "Caller number length."
                },
                {
                  "Name": "PhoneNumber",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 15,
                  "Units": "ASCII",
                  "Description": "The caller id phone number."
                },
                {
                  "Name": "CallerName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 28,
                  "Units": "ASCII",
                  "Description": "The caller id name."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Control",
      "Value": 7,
      "Mandatory": "O",
      "Description": "Controlling functions other than Audio and Call functions and those that cannot be characterized as settings in the Product.",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Control FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block Version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported controls in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Queries currently selected source"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "GetAll processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "GetAll result response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.GetAll",
              "Operator": "Operators.Error",
              "Description": "GetAll error response",
              "Fields": [
                {
                  "Name": "Busy",
                  "Type": "uint8",
                  "Description": "A busy error will be sent if the product is already processing a response to a GetAll command"
                }
              ]
            }
          ]
        },
        {
          "Name": "Chirp",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Used for starting, stopping or refreshing a self-generated audible sound from the Product so that the user can locate it.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Chirp",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Chirp",
              "Operator": "Operators.Start",
              "Description": "Send chirp command",
              "Fields": [
                {
                  "Name": "Command",
                  "Type": "uint8",
                  "Enum": "ChirpValue",
                  "Description": "Chirp command"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Chirp",
              "Operator": "Operators.Result",
              "Description": "Chirp result response",
              "Fields": [
                {
                  "Name": "TimeDuration",
                  "Type": "uint8",
                  "Description": "The time-duration of the Chirp sequence is greater than the payload value in seconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Chirp",
              "Operator": "Operators.Error",
              "Description": "Error response codes",
              "Fields": [
                {
                  "Name": "ErrorResponseCodes",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Chirp",
              "Operator": "Operators.Status",
              "Description": "Chirp status response",
              "Fields": [
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status of chirp",
                  "Bitfields": [
                    {
                      "Name": "ChirpCurrentStatus",
                      "NumBits": 1,
                      "Description": "Chirp is currently in progress [1 == yes, 0 == no]"
                    },
                    {
                      "Name": "ChirpEndReason",
                      "NumBits": 3,
                      "Enum": "ChirpEndReason"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 4,
                      "Description": "UnusedBits"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "BMAPRole",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Switch SPP Master or Puppet roles between two connected products",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.BMAPRole",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.BMAPRole",
              "Operator": "Operators.Status",
              "Description": "Status BMAPRole Info",
              "Fields": [
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Enum": "BmapRole"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.BMAPRole",
              "Operator": "Operators.Start",
              "Description": "Negotiate role switch of BMAP connection.",
              "Fields": [
                {
                  "Name": "Start",
                  "Type": "uint8",
                  "Enum": "BmapRole"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.BMAPRole",
              "Operator": "Operators.Processing",
              "Description": "BMAPRole processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.BMAPRole",
              "Operator": "Operators.Result",
              "Description": "BMAPRole result response",
              "Fields": [
                {
                  "Name": "Result",
                  "Type": "uint8",
                  "Enum": "BmapRole"
                }
              ]
            }
          ]
        },
        {
          "Name": "Power",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Initiate Power Off and Power On",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Power",
              "Operator": "Operators.Get",
              "Description": "Query current power state of product"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Power",
              "Operator": "Operators.Status",
              "Description": "Status Power Info",
              "Fields": [
                {
                  "Name": "ProductPowerStatus",
                  "Type": "uint8",
                  "Enum": "PowerStatus"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Power",
              "Operator": "Operators.Start",
              "Description": "Command to power on/off device.",
              "Fields": [
                {
                  "Name": "PowerStart",
                  "Type": "uint8",
                  "Enum": "PowerStatus"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Power",
              "Operator": "Operators.Processing",
              "Description": "Power processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Power",
              "Operator": "Operators.Result",
              "Description": "Power event sent"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.Power",
              "Operator": "Operators.Error",
              "Description": "Power Error response",
              "Fields": [
                {
                  "Name": "ErrorResponseCodes",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "FactoryDefault",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Reset product to factory default settings",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.FactoryDefault",
              "Operator": "Operators.Start",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.FactoryDefault",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Control",
              "Function": "ControlFunctions.FactoryDefault",
              "Operator": "Operators.Result",
              "Description": "(Empty)"
            }
          ]
        }
      ]
    },
    {
      "Name": "Debug",
      "Value": 8,
      "Mandatory": "O",
      "Description": "Debug information for engineering development",
      "Category": "Public",
      "Version": "1.0.0",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Info",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Debug Function Block Info Status Response",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all supported Debug FBlock function",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all supported functions returned."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.GetAll",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.GetAll",
              "Operator": "Operators.Status",
              "Description": "Bitfield of supported functions."
            }
          ]
        },
        {
          "Name": "RSSI",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Reports back radio signal strength indicator.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.RSSI",
              "Operator": "Operators.Get",
              "Description": "RSSI data get request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.RSSI",
              "Operator": "Operators.SetGet",
              "Description": "RSSI setup request",
              "Fields": [
                {
                  "Name": "MacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC Address of Source Device (chooses which radio link to query)"
                },
                {
                  "Name": "NotificationTimerInterval",
                  "Type": "uint16",
                  "Units": "ms",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.RSSI",
              "Operator": "Operators.Error",
              "Description": "RSSI data when error occurs",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.RSSI",
              "Operator": "Operators.Result",
              "Description": "RSSI data",
              "Fields": [
                {
                  "Name": "ConnectionValidity",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": null
                },
                {
                  "Name": "ConnectionRssi",
                  "Type": "int8",
                  "Units": "dB",
                  "Description": null
                },
                {
                  "Name": "SinkRssiValidity",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": null
                },
                {
                  "Name": "SinkRssi",
                  "Type": "int16",
                  "Units": "dB",
                  "Description": null
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint32",
                  "Units": "ms",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "LinkQuality",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Reports back bit error rate.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.LinkQuality",
              "Operator": "Operators.SetGet",
              "Description": "Link quality data request",
              "Fields": [
                {
                  "Name": "MacAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC Address of Source Device (chooses which radio link to query)"
                },
                {
                  "Name": "NotificationTimerInterval",
                  "Type": "uint16",
                  "Units": "ms",
                  "Description": "Notification Timer Interval (in ms, 1sec is default setting)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.LinkQuality",
              "Operator": "Operators.Result",
              "Description": "Link Quality data",
              "Fields": [
                {
                  "Name": "Validity",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "Link Quality Validity. (0 - invalid, 1 - valid)"
                },
                {
                  "Name": "LinkQualityValue",
                  "Type": "uint8",
                  "Units": "BER",
                  "Description": "Link Quality Value (i.e. bit error rate)."
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint32",
                  "Units": "ms",
                  "Description": "Timestamp (ms)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Battery",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Reports back battery, thermistor and charging state info.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Battery",
              "Operator": "Operators.Get",
              "Description": "Battery data get request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Battery",
              "Operator": "Operators.SetGet",
              "Description": "Battery timer setup request",
              "Fields": [
                {
                  "Name": "NotificationTimerInterval",
                  "Type": "uint8",
                  "Units": "minutes",
                  "Description": "NotificationTimerInterval"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Battery",
              "Operator": "Operators.Status",
              "Description": "Battery data status",
              "Fields": [
                {
                  "Name": "BatteryVoltage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "BatteryVoltage"
                },
                {
                  "Name": "ChargerState",
                  "Type": "uint8",
                  "Enum": "ChargerStates",
                  "Description": "Charger States."
                },
                {
                  "Name": "ThermistorVoltage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "ThermistorVoltage"
                }
              ]
            }
          ]
        },
        {
          "Name": "Charger",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Reports back charging state info.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Charger",
              "Operator": "Operators.Get",
              "Description": "Charger state request."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Charger",
              "Operator": "Operators.Status",
              "Description": "Current charger state.",
              "Fields": [
                {
                  "Name": "State",
                  "Type": "uint8",
                  "Description": "Charger state 1 = charging, 0 = discharging."
                }
              ]
            }
          ]
        },
        {
          "Name": "Faults",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Get/Set fault status in product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Faults",
              "Operator": "Operators.Get",
              "Description": "Faults state request."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Faults",
              "Operator": "Operators.SetGet",
              "Description": "set or clear a fault, then get state",
              "Fields": [
                {
                  "Name": "Fault",
                  "Type": "uint8",
                  "Enum": "FaultID",
                  "Description": "ID of fault you wish to set/clear"
                },
                {
                  "Name": "value",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "1 = set, 0 = clear"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Faults",
              "Operator": "Operators.Status",
              "Description": "Current state of faults",
              "Fields": [
                {
                  "Name": "ActiveFaults",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Array of fault IDs, one for each fault in the system that is set"
                }
              ]
            }
          ]
        },
        {
          "Name": "State",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Allows the internal state of the product to be queried.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.State",
              "Operator": "Operators.Get",
              "Description": "Internal state request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.State",
              "Operator": "Operators.Status",
              "Description": "Internal state",
              "Fields": [
                {
                  "Name": "State",
                  "Type": "uint8",
                  "Enum": "InternalState",
                  "Description": "Internal state of the product."
                }
              ]
            }
          ]
        },
        {
          "Name": "Buttons",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Allows button presses to be monitored or simulated.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Buttons",
              "Operator": "Operators.Get",
              "Description": "Button state request."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Buttons",
              "Operator": "Operators.SetGet",
              "Description": "Simulate Button press.",
              "Fields": [
                {
                  "Name": "Type",
                  "Type": "uint8",
                  "Enum": "ButtonPressType",
                  "Description": "Button press type."
                },
                {
                  "Name": "Buttons",
                  "Type": "uint8",
                  "Enum": "ButtonID",
                  "Description": "Bitfield of buttons pressed."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Buttons",
              "Operator": "Operators.Status",
              "Description": "Buttons state.",
              "Fields": [
                {
                  "Name": "Type",
                  "Type": "uint8",
                  "Enum": "ButtonPressType",
                  "Description": "Button press type."
                },
                {
                  "Name": "Buttons",
                  "Type": "uint8",
                  "Enum": "ButtonID",
                  "Description": "Bitfield of buttons pressed."
                }
              ]
            }
          ]
        },
        {
          "Name": "LEDs",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Allows the LED state to be queried or set.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.LEDs",
              "Operator": "Operators.Get",
              "Description": "LED state request."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.LEDs",
              "Operator": "Operators.SetGet",
              "Description": "LED state set.",
              "Fields": [
                {
                  "Name": "LedGroup",
                  "Type": "uint8",
                  "Enum": "LedGroupId",
                  "Description": "LED group."
                },
                {
                  "Name": "LedPattern",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "Priority",
                      "NumBits": 2,
                      "Description": "Priority of pattern"
                    },
                    {
                      "Name": "PatternID",
                      "NumBits": 6,
                      "Enum": "LedPatternId",
                      "Description": "Integer identification of pattern"
                    }
                  ],
                  "Description": "LED pattern."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.LEDs",
              "Operator": "Operators.Status",
              "Description": "LED state.",
              "Fields": [
                {
                  "Name": "LedPatterns",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Array of LED patterns representing all patterns currently playing.",
                  "Bitfields": [
                    {
                      "Name": "Priority",
                      "NumBits": 2,
                      "Description": "Priority of pattern"
                    },
                    {
                      "Name": "PatternID",
                      "NumBits": 6,
                      "Enum": "LedPatternId",
                      "Description": "Integer identification of pattern"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "Reset",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Initiates a software reset in the product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Reset",
              "Operator": "Operators.Start",
              "Description": "Initiate reset.",
              "Fields": [
                {
                  "Name": "ResetMode",
                  "Type": "uint8",
                  "Description": "Reset Mode (0 - soft reset)."
                },
                {
                  "Name": "ResetDelay",
                  "Type": "uint16",
                  "Units": "ms",
                  "Description": "Reset Delay in milliseconds."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Reset",
              "Operator": "Operators.Result",
              "Description": "Reset initiated"
            }
          ]
        },
        {
          "Name": "StackUsage",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Reports back app stack use (max) and stack size.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.StackUsage",
              "Operator": "Operators.Get",
              "Description": "Stack usage get request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.StackUsage",
              "Operator": "Operators.Status",
              "Description": "Battery data status",
              "Fields": [
                {
                  "Name": "StackUsage",
                  "Type": "uint32",
                  "Units": "bytes",
                  "Description": "High-Water mark of stack usage"
                },
                {
                  "Name": "StackSize",
                  "Type": "uint32",
                  "Units": "bytes",
                  "Description": "Size of stack"
                }
              ]
            }
          ]
        },
        {
          "Name": "VoicePrompts",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Voice prompts information and control.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.VoicePrompts",
              "Operator": "Operators.Get",
              "Description": "Voice Prompts state request."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.VoicePrompts",
              "Operator": "Operators.Status",
              "Description": "Voice Prompts state.",
              "Fields": [
                {
                  "Name": "Type",
                  "Type": "uint8",
                  "Description": "Last played Voice Prompt ID."
                },
                {
                  "Name": "VoicePrompts",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Enum": "VoicePromptsID",
                  "Description": "Bitfield of supported Voice Prompts."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.VoicePrompts",
              "Operator": "Operators.Start",
              "Description": "Start Voice Prompt.",
              "Fields": [
                {
                  "Name": "Type",
                  "Type": "uint8",
                  "Description": "Voice Prompt ID."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.VoicePrompts",
              "Operator": "Operators.Result",
              "Description": "Voice Prompt started.",
              "Fields": [
                {
                  "Name": "Type",
                  "Type": "uint8",
                  "Description": "Voice Prompt ID."
                }
              ]
            }
          ]
        },
        {
          "Name": "ExtVersion",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Returns extended version info.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.ExtVersion",
              "Operator": "Operators.Get",
              "Description": "Extended Version request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.ExtVersion",
              "Operator": "Operators.Status",
              "Description": "Extended Version info",
              "Fields": [
                {
                  "Name": "ExtVer",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "Extended Version string"
                }
              ]
            }
          ]
        },
        {
          "Name": "Printf",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Enables/disables printf debug statements in the product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Printf",
              "Operator": "Operators.Get",
              "Description": "Request current Printf status."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Printf",
              "Operator": "Operators.SetGet",
              "Description": "Bitfield of print statements to enable/disable.",
              "Fields": [
                {
                  "Name": "DebugID",
                  "Type": "uint8",
                  "Enum": "DebugID",
                  "Description": "Bitfield of print statements to enable/disable."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Printf",
              "Operator": "Operators.Status",
              "Description": "Bitfield of enabled print statements.",
              "Fields": [
                {
                  "Name": "DebugID",
                  "Type": "uint8",
                  "Enum": "DebugID",
                  "Description": "Bitfield of enabled print statements."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Printf",
              "Operator": "Operators.Result",
              "Description": "Asynchronous debug statements.",
              "Fields": [
                {
                  "Name": "Type",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "Asynchronous debug statement"
                }
              ]
            }
          ]
        },
        {
          "Name": "RadioTest",
          "Value": 16,
          "Mandatory": "O",
          "Description": "Enables device test mode.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.RadioTest",
              "Operator": "Operators.Start",
              "Description": "Initiate radio test.",
              "Fields": [
                {
                  "Name": "RadioTestMode",
                  "Type": "uint8",
                  "Enum": "RadioTestType",
                  "Description": "Radio Test Mode"
                },
                {
                  "Name": "Frequency",
                  "Type": "uint16",
                  "Unit": "MHz",
                  "Description": "LO Frequency from 2402 to 2480"
                },
                {
                  "Name": "PowerLevel",
                  "Type": "uint16",
                  "Unit": "arbitrary number",
                  "Description": "Power Level from 0 to 4095"
                },
                {
                  "Name": "FrequencyModulation",
                  "Type": "int16",
                  "Unit": "1/4096 MHz",
                  "Description": "Frequency Modulation from -32678 to 32767 in 1/4096 MHz steps, 4096 means 1MHz"
                },
                {
                  "Name": "TimeToReset",
                  "Type": "uint16",
                  "Units": "seconds",
                  "Description": "Time To Reset System. 0 means 'run test forever'"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.RadioTest",
              "Operator": "Operators.Result",
              "Description": "Radio test initiated"
            }
          ]
        },
        {
          "Name": "MotionInactivityAutoOff",
          "Value": 17,
          "Mandatory": "O",
          "Description": "Enables/disables auto power-off when the product is stationary for more than certain amount of time.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.MotionInactivityAutoOff",
              "Operator": "Operators.Get",
              "Description": "Queries the product to check if motion inactivity auto-off timer is enabled or disabled."
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.MotionInactivityAutoOff",
              "Operator": "Operators.SetGet",
              "Description": "Enables or disable motion inactivity auto-off timer in the product.",
              "Fields": [
                {
                  "Name": "enable",
                  "Type": "uint8",
                  "Enum": "MotionInactivityAutoOffControl",
                  "Description": "Enable/Disable motion inactivity auto-off timer."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.MotionInactivityAutoOff",
              "Operator": "Operators.Status",
              "Description": "Product's motion inactivity auto-off timer is enabled or disabled.",
              "Fields": [
                {
                  "Name": "enabled",
                  "Type": "uint8",
                  "Enum": "MotionInactivityAutoOffControl",
                  "Description": "Motion inactivity auto-off timer enabled or disabled."
                }
              ]
            }
          ]
        },
        {
          "Name": "WUW",
          "Value": 18,
          "Mandatory": "O",
          "Description": "Allows to debug WUW related code.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.WUW",
              "Operator": "Operators.Get",
              "Description": "Returns the status of the WUW subsystem"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.WUW",
              "Operator": "Operators.Status",
              "Description": "Returns the status of the WUW subsystem",
              "Fields": [
                {
                  "Name": "WUWVPAStatus",
                  "Type": "uint8",
                  "Description": "Bitfield of WUW VPA current status",
                  "Bitfields": [
                    {
                      "Name": "SelectedWUWVPA",
                      "NumBits": 7,
                      "Units": "WUWID",
                      "Description": "Currently Selected WUW VPA (0x7F == none). See VPA fBlock for details."
                    },
                    {
                      "Name": "IsConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "VPA Connected (1=connected, 0=disconnected)."
                    }
                  ]
                },
                {
                  "Name": "WUWStatus",
                  "Type": "uint8",
                  "Description": "Bitfield of WUW current status",
                  "Bitfields": [
                    {
                      "Name": "SelectedVPALanguage",
                      "NumBits": 7,
                      "Units": "VPALangID",
                      "Description": "Currently configured VPA Language for current VPA WUW. See VPA fBlock for details."
                    },
                    {
                      "Name": "IsWuwEnabled",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "WUW Enabled (1=enabled, 0=disabled)."
                    }
                  ]
                },
                {
                  "Name": "WUWDSPScore",
                  "Type": "uint16",
                  "Description": "WUW Score and WUW DSP operation status.",
                  "Bitfields": [
                    {
                      "Name": "WUWScore",
                      "NumBits": 15,
                      "Units": "uin16",
                      "Description": "WUW confidence score in {0,1000} -  Only for async status"
                    },
                    {
                      "Name": "IsWUWDSPOperational",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "WUW DSP Operation (1=running, 0=not running) - Only for get responses."
                    }
                  ]
                },
                {
                  "Name": "WUWThreshold",
                  "Type": "uint16",
                  "Description": "WUW Score threshold"
                },
                {
                  "Name": "WUWErrorMask",
                  "Type": "uint8",
                  "Units": "WUWErrorID",
                  "Description": "Error mask for WUW voice queries",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "BluetoothFrameworkVersion",
          "Value": 19,
          "Mandatory": "O",
          "Description": "Get the version string of the Bluetooth framework loaded in the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.BluetoothFrameworkVersion",
              "Operator": "Operators.Get"
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.BluetoothFrameworkVersion",
              "Operator": "Operators.Status",
              "Fields": [
                {
                  "Name": "FrameworkVersionString",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Version string of the Bluetooth framework loaded in the product"
                }
              ]
            }
          ]
        },
        {
          "Name": "Seize",
          "Value": 20,
          "Mandatory": "O",
          "Description": "Seizes or frees subsytems and resources",
          "LongDescription": "This is so test scripts can have exclusive access to the thing they're testing.",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Seize",
              "Operator": "Operators.Get",
              "Description": "Seizure status request",
              "Fields": [
                {
                  "Name": "ResourceID",
                  "Type": "uint8",
                  "Enum": "SeizableResources",
                  "Description": "ID of resource you wish to interrogate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Seize",
              "Operator": "Operators.SetGet",
              "Description": "Seizure status set",
              "Fields": [
                {
                  "Name": "ResourceID",
                  "Type": "uint8",
                  "Enum": "SeizableResources",
                  "Description": "ID of resource you wish to seize or free. 1 = seized by BMAP, 0 = available to UE"
                },
                {
                  "Name": "Action",
                  "Type": "uint8",
                  "Units": "Boolean"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Debug",
              "Function": "DebugFunctions.Seize",
              "Operator": "Operators.Status",
              "Description": "Seizure status",
              "Fields": [
                {
                  "Name": "SeizureStatus",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "Seizure status. 1 = seized by BMAP, 0 = available to UE"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Notification",
      "Value": 9,
      "Mandatory": "O",
      "Description": "Used to disable / enable notifications from product",
      "Category": "Public",
      "Version": "1.0.2",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Info",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Notification FunctionBlock Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Notification FunctionBlock Info Status Response",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion(UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Reset",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Resets notifications back to default settings for a given connection",
          "LongDescription": "The reset function is used to reset the notification  table for a given BMAP connection back to default  settings.  Note that notifications are enabled by default  for many Function Blocks / Functions. \n",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.Reset",
              "Operator": "Operators.Start",
              "Description": "(Empty) Start a reset notification table request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.Reset",
              "Operator": "Operators.Result",
              "Description": "(Empty) Result response of a notification table reset"
            }
          ]
        },
        {
          "Name": "ByFBlock",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Enable / Disable notifications for entire FBlocks",
          "LongDescription": "By default notifications are enabled for every Function  of every FBlock.  Notifications can be disabled or re-enabled  for an entire Function Block using the  Notification.ByFBlock.SetGet message.  The payload is a  bitfield of Function Blocks, where any bits set indicate that  notifications for corresponding Function Blocks should be  enabled.  When the bits are cleared, it indicates that  notifications for corresponding Function Blocks  should be disabled.\n\\par The bitmask type is used to allow the app to either  completely overwrite all existing notification settings, or  selectively enable / disable notifications for specific Function  Blocks without changing other existing settings.  This reduces the  amount of overhead on the mobile app to keep track of what notifications  are enabled / disabled for a given product at any one time.  \n",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFBlock",
              "Operator": "Operators.Get",
              "Description": "(Empty) Get request for ByFBlock"
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFBlock",
              "Operator": "Operators.SetGet",
              "Fields": [
                {
                  "Name": "BitmaskType",
                  "Type": "uint8",
                  "Enum": "BitmaskTypes"
                },
                {
                  "Name": "BitfieldOfFunctionBlocks",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 4,
                  "Description": "Enable/disable notifications for entire function blocks.  Bit == 0 -- Notifications disabled for FBlock;  Bit == 1 -- Notifications enabled for FBlock\n"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFBlock",
              "Operator": "Operators.Error",
              "Description": "Error for ByFBlock",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFBlock",
              "Operator": "Operators.Status",
              "Description": "Enabled/disabled notifications for entire function blocks.",
              "VariableLength": true,
              "Fields": [
                {
                  "Name": "BitfieldOfFunctionBlocks",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 4,
                  "Description": "Enable/disable notifications for entire function blocks.  Bit == 0 -- Notifications disabled for FBlock;  Bit == 1 -- Notifications enabled for FBlock\n",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "ByFunction",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Enable / Disable notifcations for Functions within a given FBlock",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFunction",
              "Operator": "Operators.Get",
              "Description": "Get request for ByFunction",
              "Fields": [
                {
                  "Name": "FBlockID",
                  "Type": "uint8",
                  "Description": "Function Block ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFunction",
              "Operator": "Operators.SetGet",
              "Description": "Enable/disable notifications for functions of a specific block.",
              "Fields": [
                {
                  "Name": "BitmaskType",
                  "Type": "uint8",
                  "Enum": "BitmaskTypes"
                },
                {
                  "Name": "FBlockID",
                  "Type": "uint8",
                  "Description": "Function Block ID"
                },
                {
                  "Name": "BitfieldOfFunctions",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 7,
                  "Description": "Enable/disable notifications for function.  Bit == 0 -- Notifications disabled for Function;  Bit == 1 -- Notifications enabled for Function\n"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFunction",
              "Operator": "Operators.Error",
              "Description": "Error for ByFBlock",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.ByFunction",
              "Operator": "Operators.Status",
              "Description": "Enabled/disabled status of notifications for functions of a specific block",
              "Fields": [
                {
                  "Name": "FBlockID",
                  "Type": "uint8",
                  "Description": "Function Block ID"
                },
                {
                  "Name": "BitfieldOfFunctions",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 7,
                  "Description": "Enable/disable notifications for function.  Bit == 0 -- Notifications disabled for Function;  Bit == 1 -- Notifications enabled for Function\n"
                }
              ]
            }
          ]
        },
        {
          "Name": "Periodic",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Schedule periodic notifications for Functions within a given FBlock",
          "LongDescription": "By default notifications are enabled for every Function of every FBlock.   Notifications can be disabled or re-enabled for any given Function using  the Notification.ByFunction.SetGet message.  The first byte contains  the Function Block ID, while the rest of the payload is a bitfield of  Functions, where any bits set indicate that notifications for the corresponding  Function should be enabled or when the bits are cleared that notifications  for the corresponding Function should be disabled. Note that this function is  not implemented in ECO 1 products.\n",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.Periodic",
              "Operator": "Operators.Get",
              "Description": "Get request for Periodic notifications by function block",
              "Fields": [
                {
                  "Type": "uint8",
                  "Description": "FBlock ID",
                  "Name": "FBlockID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.Periodic",
              "Operator": "Operators.SetGet",
              "Description": "Enable/disable periodic notifications for functions of a specific block.",
              "Fields": [
                {
                  "Name": "PeriodicInterval",
                  "Type": "uint16",
                  "Description": "Periodic interval (in milliseconds)"
                },
                {
                  "Name": "FBlockID",
                  "Type": "uint8",
                  "Description": "Function Block ID"
                },
                {
                  "Name": "BitfieldOfFunctions",
                  "Type": "uint16",
                  "VariableLength": true,
                  "Description": "Enable/disable notifications for function.  Bit == 0 -- Notifications disabled for Function;  Bit == 1 -- Notifications enabled for Function\n"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.Periodic",
              "Operator": "Operators.Error",
              "Description": "Error for Periodic notifications by function block",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Notification",
              "Function": "NotificationFunctions.Periodic",
              "Operator": "Operators.Status",
              "Description": "Status of periodic notifications for functions of a specific block",
              "Fields": [
                {
                  "Name": "PeriodicInterval",
                  "Type": "uint16",
                  "Description": "Periodic interval (in milliseconds)"
                },
                {
                  "Name": "FBlockID",
                  "Type": "uint8",
                  "Description": "Function Block ID"
                },
                {
                  "Name": "BitfieldOfFunctions",
                  "Type": "uint16",
                  "VariableLength": true,
                  "Description": "Enable/disable notifications for function.  Bit == 0 -- Notifications disabled for Function;  Bit == 1 -- Notifications enabled for Function\n"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Reserved1",
      "Value": 10,
      "Mandatory": "O",
      "Description": "Reserved for BOSEBuild use",
      "Category": "Public",
      "Version": "1.0.2",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Reserved1",
              "Function": "Reserved1Functions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Reserved1",
              "Function": "Reserved1Functions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Function Block Version (UTF-8 string)",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 string)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Reserved2",
      "Value": 11,
      "Mandatory": "O",
      "Description": "Reserved for BOSEBuild use",
      "Category": "Public",
      "Version": "1.0.2",
      "Functions": []
    },
    {
      "Name": "HearingAssistance",
      "Value": 12,
      "Mandatory": "O",
      "Description": "Assisted Hearing related",
      "Category": "Public",
      "Version": "1.1.0",
      "Functions": []
    },
    {
      "Name": "DataCollection",
      "Value": 13,
      "Mandatory": "O",
      "Description": "Data Collection",
      "Category": "Public",
      "Version": "1.1.0",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block Version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported DataCollection functions in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start command"
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all DataCollection returned"
            }
          ]
        },
        {
          "Name": "AllRecords",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Retrieve all stored records",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.AllRecords",
              "Operator": "Operators.Start",
              "Description": "Request to begin transferring records."
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.AllRecords",
              "Operator": "Operators.Processing",
              "Description": "Acknowledge Start command."
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.AllRecords",
              "Operator": "Operators.Status",
              "Description": "A segment of a record.",
              "Fields": [
                {
                  "Name": "RecordIdentifier",
                  "Type": "uint8",
                  "Description": "Identifier for current record stream."
                },
                {
                  "Name": "DataSegmentNumber",
                  "Type": "uint8",
                  "Description": "Data segment number."
                },
                {
                  "Name": "FinalSegmentNumber",
                  "Type": "uint8",
                  "Description": "Final segment number for this record."
                },
                {
                  "Name": "Data",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "N-3 bytes of data."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.AllRecords",
              "Operator": "Operators.Result",
              "Description": "Indicate that record transfer is complete."
            }
          ]
        },
        {
          "Name": "UID",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Get product's Data Collection Unique Identifier",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.UID",
              "Operator": "Operators.Get",
              "Description": "Request the product's unique identifier"
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.UID",
              "Operator": "Operators.Status",
              "Description": "Result FunctionBlock Info",
              "Fields": [
                {
                  "Name": "Handle",
                  "Type": "uint8",
                  "Variable Length": true,
                  "Count": 16,
                  "Description": "A 128-bit number, in binary format (MSB-LSB)"
                }
              ]
            }
          ]
        },
        {
          "Name": "Enable",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Persistently Enable/Disable Data Collection",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Enable",
              "Operator": "Operators.Set",
              "Description": "Enable/disable data collection (valid across power cycle)",
              "Fields": [
                {
                  "Name": "Enable",
                  "Type": "uint8",
                  "Description": "Data collection state (0 == disabled, 1 == enabled)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Enable",
              "Operator": "Operators.Get",
              "Description": "Request data collection status"
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Enable",
              "Operator": "Operators.SetGet",
              "Description": "Enable/disable data collection and return status",
              "Fields": [
                {
                  "Name": "Enable",
                  "Type": "uint8",
                  "Description": "Data collection state (0 == disabled, 1 == enabled)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Enable",
              "Operator": "Operators.Status",
              "Description": "Record collection enabled status",
              "Fields": [
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Data collection state (0 == disabled, 1 == enabled)"
                }
              ]
            }
          ]
        },
        {
          "Name": "OneRecord",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Retrieve a single record",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.OneRecord",
              "Operator": "Operators.Start",
              "Description": "Signal to begin transferring a Record"
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.OneRecord",
              "Operator": "Operators.Processing",
              "Description": "Indicate that Record transfer is about to start.  The payload is a variable length ascii encoded schema identifier (schemaID).",
              "Fields": [
                {
                  "Name": "schemaID",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "variable length ascii encoded schema identifier"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.OneRecord",
              "Operator": "Operators.Status",
              "Description": "A RecordSegment.",
              "Fields": [
                {
                  "Name": "TransactionID",
                  "Type": "uint8",
                  "Description": "Identifier for current record stream"
                },
                {
                  "Name": "RecordSegmentNumber",
                  "Type": "uint8",
                  "Description": "Number of this Segment in Record, indexed from 0"
                },
                {
                  "Name": "FinalRecordSegmentNumber",
                  "Type": "uint8",
                  "Description": "Final segment number for this record"
                },
                {
                  "Name": "Data",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "N bytes of data."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.OneRecord",
              "Operator": "Operators.Result",
              "Description": "Indicate that Record transfer is complete.  May contain optional payload",
              "Fields": [
                {
                  "Name": "SegmentsResultPayload",
                  "Type": "uint8",
                  "Enum": "SegmentsResultPayload",
                  "Description": "Information about the just-finished OneRecord transaction."
                }
              ]
            }
          ]
        },
        {
          "Name": "Confirmation",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Indicate that a record was successfully sent to an external system such as Bose Cloud",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Confirmation",
              "Operator": "Operators.Start",
              "Description": "Start a confirmation procedure.",
              "Fields": [
                {
                  "Name": "schemaID",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "variable length ascii encoded schema identifier"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Confirmation",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message."
            },
            {
              "FunctionBlock": "FunctionBlocks.DataCollection",
              "Function": "DataCollectionFunctions.Confirmation",
              "Operator": "Operators.Result",
              "Description": "Result of confirmation procedure.",
              "Fields": [
                {
                  "Name": "resultInformation",
                  "Type": "uint8",
                  "Description": "An invalid data error will be sent if schemaID received did not match any in the product"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "HeartRateMonitor",
      "Value": 14,
      "Mandatory": "O",
      "Description": "For products that include a heart rate sensor",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Info",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Heart Rate Monitor FunctionBlock Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Heart Rate Monitor FunctionBlock Info Status Response",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all status information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Heart Rate Monitor GetAll Start Request",
              "Fields": [
                {
                  "Name": "FunctionGroup",
                  "Type": "uint8",
                  "Units": "FunctionGroup",
                  "Enum": "FunctionGroup",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Heart Rate Monitor GetAll Processing Response"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Heart Rate Monitor GetAll Processing Response"
            }
          ]
        },
        {
          "Name": "HeartRate",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Retrieves the heart rate of the user from the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HeartRate",
              "Operator": "Operators.Get",
              "Description": "Heart Rate Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HeartRate",
              "Operator": "Operators.Status",
              "Description": "Heart Rate Status Response",
              "Fields": [
                {
                  "Name": "HeartRateMonitorStatus",
                  "Type": "uint8",
                  "Units": "HeartRateMonitorStatus",
                  "Enum": "HeartRateMonitorStatus",
                  "Description": null
                },
                {
                  "Name": "BPM",
                  "Type": "uint16",
                  "Description": "Heart Rate in BPMs"
                }
              ]
            }
          ]
        },
        {
          "Name": "HeartRateStatistics",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Retrieves the heart rate statistics calculated by the heart rate monitoring system during a workout session",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HeartRateStatistics",
              "Operator": "Operators.Get",
              "Description": "Heart Rate Statistics Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HeartRateStatistics",
              "Operator": "Operators.Status",
              "Description": "Heart Rate Statistics Status Response",
              "Fields": [
                {
                  "Name": "MinimumHeartRate",
                  "Type": "uint16",
                  "Description": "Minimum Heart Rate in BPMs"
                },
                {
                  "Name": "MaximumHeartRate",
                  "Type": "uint16",
                  "Description": "Maximum Heart Rate in BPMs"
                },
                {
                  "Name": "AverageHeartRate",
                  "Type": "uint16",
                  "Description": "Average Heart Rate in BPMs"
                }
              ]
            }
          ]
        },
        {
          "Name": "SpeedAndDistance",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Retrieves the Speed and distance covered by an athlete from the heart rate monitoring system during a workout session",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.SpeedAndDistance",
              "Operator": "Operators.Get",
              "Description": "Speed and Distance Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.SpeedAndDistance",
              "Operator": "Operators.Status",
              "Description": "Speed and Distance Status Response",
              "Fields": [
                {
                  "Name": "Speed",
                  "Type": "uint16",
                  "Description": "Speed (meters per hour)"
                },
                {
                  "Name": "Distance",
                  "Type": "uint16",
                  "Description": "Distance (meters)"
                }
              ]
            }
          ]
        },
        {
          "Name": "StepRateStatistics",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Retrieves the step rate statistics calculated by the heart rate monitoring system during a workout session",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.StepRateStatistics",
              "Operator": "Operators.Get",
              "Description": "Step Rate Statistics Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.StepRateStatistics",
              "Operator": "Operators.Status",
              "Description": "Step Rate Statistics Status Response",
              "Fields": [
                {
                  "Name": "StepRate",
                  "Type": "uint16",
                  "Description": "Step rate in steps per minute"
                },
                {
                  "Name": "TotalStepsTaken",
                  "Type": "uint16",
                  "Description": "Total steps taken"
                }
              ]
            }
          ]
        },
        {
          "Name": "Calories",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Retrieves calorie information of the athlete from the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.Calories",
              "Operator": "Operators.Get",
              "Description": "Calories Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.Calories",
              "Operator": "Operators.Status",
              "Description": "Calories Status Response",
              "Fields": [
                {
                  "Name": "CalorieBurnRate",
                  "Type": "uint16",
                  "Description": "Active calorie burn rate (in kCal/min)"
                },
                {
                  "Name": "TotalCalories",
                  "Type": "uint16",
                  "Description": "Total calories (in kCal)"
                }
              ]
            }
          ]
        },
        {
          "Name": "VO2",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Retrieves VO2 information of the athlete from the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.VO2",
              "Operator": "Operators.Get",
              "Description": "VO2 Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.VO2",
              "Operator": "Operators.Status",
              "Description": "VO2 Status Response",
              "Fields": [
                {
                  "Name": "MostRecentVO2",
                  "Type": "uint16",
                  "Description": "Most recent VO2 in 10x ml/kg/min"
                },
                {
                  "Name": "MaximumSessionVO2",
                  "Type": "uint16",
                  "Description": "Maximum session VO2 in 10x ms/kg/min"
                }
              ]
            }
          ]
        },
        {
          "Name": "UserInfo",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Information about the user intending to start the workout session",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.UserInfo",
              "Operator": "Operators.Get",
              "Description": "User Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.UserInfo",
              "Operator": "Operators.SetGet",
              "Description": "User Info Set/Get Request",
              "Fields": [
                {
                  "Name": "Age",
                  "Type": "uint16",
                  "Description": "Age (in months)"
                },
                {
                  "Name": "IsMale",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "Gender true if male, false if female"
                },
                {
                  "Name": "Weight",
                  "Type": "uint16",
                  "Description": "Weight (in 1/10 kg)"
                },
                {
                  "Name": "Height",
                  "Type": "uint8",
                  "Description": "Height (in cm)"
                },
                {
                  "Name": "RestingHeartRate",
                  "Type": "uint8",
                  "Description": "Resting heart rate (in BPM)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.UserInfo",
              "Operator": "Operators.Status",
              "Description": "User Info Status Response",
              "Fields": [
                {
                  "Name": "Age",
                  "Type": "uint16",
                  "Description": "Age (in months)"
                },
                {
                  "Name": "IsMale",
                  "Type": "uint8",
                  "Units": "Boolean",
                  "Description": "Gender true if male, false if female"
                },
                {
                  "Name": "Weight",
                  "Type": "uint16",
                  "Description": "Weight (in 1/10 kg)"
                },
                {
                  "Name": "Height",
                  "Type": "uint8",
                  "Description": "Height (in cm)"
                },
                {
                  "Name": "RestingHeartRate",
                  "Type": "uint8",
                  "Description": "Resting heart rate (in BPM)"
                }
              ]
            }
          ]
        },
        {
          "Name": "WorkoutInfo",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Information about the user’s workout that may have to be set before beginning a session",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.WorkoutInfo",
              "Operator": "Operators.Get",
              "Description": "User Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.WorkoutInfo",
              "Operator": "Operators.SetGet",
              "Description": "Workout Info Set/Get Request",
              "Fields": [
                {
                  "Name": "SetGetData",
                  "Type": "uint8",
                  "Description": "WorkoutInfo Data",
                  "Bitfields": [
                    {
                      "Name": "ActivityMode",
                      "NumBits": 4,
                      "Enum": "ActivityMode",
                      "Description": "Activity Mode of User"
                    },
                    {
                      "Name": "HeartRateZone",
                      "NumBits": 4,
                      "Enum": "HeartRateZones",
                      "Description": "Heart rate zone of User"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.WorkoutInfo",
              "Operator": "Operators.Status",
              "Description": "Workout Info Status Response",
              "Fields": [
                {
                  "Name": "SetGetData",
                  "Type": "uint8",
                  "Description": "WorkoutInfo Data",
                  "Bitfields": [
                    {
                      "Name": "ActivityMode",
                      "NumBits": 4,
                      "Enum": "ActivityMode",
                      "Description": "Activity Mode of User"
                    },
                    {
                      "Name": "HeartRateZone",
                      "NumBits": 4,
                      "Enum": "HeartRateZones",
                      "Description": "Heart rate zone of User"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "HRReadingReliabilityStatus",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Retrieves the status of reliability of the heart rate reading from the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HRReadingReliabilityStatus",
              "Operator": "Operators.Get",
              "Description": "Heart Rate Reading Reliability Status Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HRReadingReliabilityStatus",
              "Operator": "Operators.Status",
              "Description": "Heart Rate Reading Reliability Status, Status Response",
              "Fields": [
                {
                  "Name": "HRReadingReliabilityStatus",
                  "Type": "uint8",
                  "Description": "Heart rate reading reliability status indicates the reliability of the heart rate reading. Higher value indicates higher reliability."
                }
              ]
            }
          ]
        },
        {
          "Name": "OpticalSensorStatus",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Retrieves the status or strength of the optical sensor readings from the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.OpticalSensorStatus",
              "Operator": "Operators.Get",
              "Description": "Optical Sensor Status Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.OpticalSensorStatus",
              "Operator": "Operators.Status",
              "Description": "Optical Sensor Status, Status Response",
              "Fields": [
                {
                  "Name": "OpticalSensorStatus",
                  "Type": "uint16",
                  "Description": "Optical sensor status is the measure of light intensity passing through the sensor. Higher value indicates higher intensity of light passing through the sensor."
                }
              ]
            }
          ]
        },
        {
          "Name": "PowerOnSelftestStatus",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Retrieves the status of the power on self-test from the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.PowerOnSelftestStatus",
              "Operator": "Operators.Get",
              "Description": "Power On Selftest Status Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.PowerOnSelftestStatus",
              "Operator": "Operators.Status",
              "Description": "Power On Selftest Status, Status Response",
              "Fields": [
                {
                  "Name": "PowerOnSelftestStatus",
                  "Type": "uint16",
                  "Description": "The power on self-test status from the heart rate monitoring system."
                }
              ]
            }
          ]
        },
        {
          "Name": "CalibrationInfo",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Information to calibrate the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.CalibrationInfo",
              "Operator": "Operators.Get",
              "Description": "Calibration Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.CalibrationInfo",
              "Operator": "Operators.SetGet",
              "Description": "Calibration Info Set/Get Request",
              "Fields": [
                {
                  "Name": "WalkSpeedCalibration",
                  "Type": "uint16",
                  "Description": "Walk Speed Calibration"
                },
                {
                  "Name": "RunSpeedCalibration",
                  "Type": "uint16",
                  "Description": "Run Speed Calibration"
                },
                {
                  "Name": "VO2Calibration",
                  "Type": "uint16",
                  "Description": "VO2 Calibration"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.CalibrationInfo",
              "Operator": "Operators.Status",
              "Description": "Calibration Info Status Response",
              "Fields": [
                {
                  "Name": "WalkSpeedCalibration",
                  "Type": "uint16",
                  "Description": "Walk Speed Calibration"
                },
                {
                  "Name": "RunSpeedCalibration",
                  "Type": "uint16",
                  "Description": "Run Speed Calibration"
                },
                {
                  "Name": "VO2Calibration",
                  "Type": "uint16",
                  "Description": "VO2 Calibration"
                }
              ]
            }
          ]
        },
        {
          "Name": "FirmwareVersion",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Retrieves the firmware version of the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.FirmwareVersion",
              "Operator": "Operators.Get",
              "Description": "Firmware Version Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.FirmwareVersion",
              "Operator": "Operators.Status",
              "Description": "Firmware Version Status Response",
              "Fields": [
                {
                  "Name": "HeartRateMonitorFirmwareVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Heart Rate Monitor Firmware Version"
                }
              ]
            }
          ]
        },
        {
          "Name": "HardwareInfo",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Retrieves hardware IDs of chips and/or modules of the heart rate monitoring system",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HardwareInfo",
              "Operator": "Operators.Get",
              "Description": "Hardware Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.HeartRateMonitor",
              "Function": "HeartRateMonitorFunctions.HardwareInfo",
              "Operator": "Operators.Status",
              "Description": "Hardware Info Status Response",
              "Fields": [
                {
                  "Name": "MicroprocessorPartID",
                  "Type": "uint16",
                  "Description": "Microprocessor - Part ID"
                },
                {
                  "Name": "MicroprocessorSerialIDUpper",
                  "Type": "uint16",
                  "Description": "Microprocessor - Serial ID Upper"
                },
                {
                  "Name": "MicroprocessorSerialIDLower",
                  "Type": "uint16",
                  "Description": "Microprocessor - Serial ID Lower"
                },
                {
                  "Name": "SensorPartID",
                  "Type": "uint16",
                  "Description": "Sensor - Part ID"
                },
                {
                  "Name": "SensorSerialIDUpper",
                  "Type": "uint16",
                  "Description": "Sensor - Serial ID Upper"
                },
                {
                  "Name": "SensorSerialIDLower",
                  "Type": "uint16",
                  "Description": "Sensor - Serial ID Lower"
                },
                {
                  "Name": "AccelerometerPartID",
                  "Type": "uint16",
                  "Description": "Accelerometer - Part ID"
                },
                {
                  "Name": "AccelerometerSerialIDUpper",
                  "Type": "uint16",
                  "Description": "Accelerometer - Serial ID Upper"
                },
                {
                  "Name": "AccelerometerSerialIDLower",
                  "Type": "uint16",
                  "Description": "Accelerometer - Serial ID Lower"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Peer",
      "Value": 15,
      "Mandatory": "O",
      "Description": "For data exchange in multi-component products",
      "Category": "Public",
      "Version": "1.0.4",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Peer Function Block Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Peer Function Block Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all status information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start Peer GetAll"
            },
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Peer GetAll processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Peer GetAll result response"
            }
          ]
        },
        {
          "Name": "ButtonPress",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Indicates button event (press, release, press and hold, etc)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.ButtonPress",
              "Operator": "Operators.Status",
              "Description": "Button press/release notification",
              "Fields": [
                {
                  "Name": "ButtonPressType",
                  "Type": "uint8",
                  "Units": "ButtonPressType",
                  "Enum": "ButtonPressType",
                  "Description": "Button Press Type."
                },
                {
                  "Name": "ButtonMask",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 59,
                  "Description": "Button Mask."
                }
              ]
            }
          ]
        },
        {
          "Name": "Temperature",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Reports product temperature reading",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.Temperature",
              "Operator": "Operators.Get",
              "Description": "Get Peer Temperature Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.Temperature",
              "Operator": "Operators.Status",
              "Description": "Peer Temperature Status Response",
              "Fields": [
                {
                  "Name": "Temperature",
                  "Type": "uint8",
                  "Description": "Temperature in degrees C (signed byte, -128 - +127)"
                }
              ]
            }
          ]
        },
        {
          "Name": "StateChangeNotification",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Indicates state change",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Peer",
              "Function": "PeerFunctions.StateChangeNotification",
              "Operator": "Operators.Set",
              "Description": "State Change Notification Set Request",
              "Fields": [
                {
                  "Name": "PeerSource",
                  "Type": "uint8",
                  "Units": "PeerSource",
                  "Enum": "PeerSource",
                  "Description": "Peer Source."
                },
                {
                  "Name": "PeerState",
                  "Type": "uint8",
                  "Units": "PeerState",
                  "Enum": "PeerState",
                  "Description": "Peer State."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "VPA",
      "Value": 16,
      "Mandatory": "O",
      "Description": "Voice Personal Assistant Interface",
      "Category": "Public",
      "Version": "1.0.2",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get VPA Function Block Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "VPA Function Block Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all VPA information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start VPA GetAll Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message."
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned."
            }
          ]
        },
        {
          "Name": "PushToTalkVPA",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Push To Talk VPA",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.PushToTalkVPA",
              "Operator": "Operators.Get",
              "Description": "PTT VPA Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.PushToTalkVPA",
              "Operator": "Operators.SetGet",
              "Description": "PTT VPA Set/Get Request",
              "Fields": [
                {
                  "Name": "SelectedPTTVPA",
                  "Type": "uint8",
                  "Units": "VPAID",
                  "Description": "Currently Selected PTT VPA (0x7F == none)."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.PushToTalkVPA",
              "Operator": "Operators.Status",
              "Description": "PTT VPA Status Response",
              "Fields": [
                {
                  "Name": "PTTVPAStatus",
                  "Type": "uint8",
                  "Description": "Bitfield of PTT VPA current status",
                  "Bitfields": [
                    {
                      "Name": "SelectedPTTVPA",
                      "NumBits": 7,
                      "Units": "VPAID",
                      "Description": "Currently Selected PTT VPA (0x7F == none)."
                    },
                    {
                      "Name": "IsConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "VPA Connected (1=connected, 0=disconnected)."
                    }
                  ]
                },
                {
                  "Name": "SupportedPTTVPA",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Bitfield of supported PTT VPAs (MSB first)",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "WakeUpWordVPA",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Wake Up Word VPA",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.WakeUpWordVPA",
              "Operator": "Operators.Get",
              "Description": "WUW VPA Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.WakeUpWordVPA",
              "Operator": "Operators.SetGet",
              "Description": "WUW VPA Set/Get Request",
              "Fields": [
                {
                  "Name": "WUWVPASetGet",
                  "Type": "uint8",
                  "Description": "Set/Get WUW VPA",
                  "Bitfields": [
                    {
                      "Name": "SelectedWUWVPA",
                      "NumBits": 6,
                      "Units": "WUWID",
                      "Description": "Currently Selected WUW VPA (0x3F == none)."
                    },
                    {
                      "Name": "IsEnabled",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "WUW Enabled (1=enabled, 0=disabled)."
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.WakeUpWordVPA",
              "Operator": "Operators.Status",
              "Description": "WUW VPA Status Response",
              "Fields": [
                {
                  "Name": "WUWVPAStatus",
                  "Type": "uint8",
                  "Description": "Bitfield of WUW VPA current status",
                  "Bitfields": [
                    {
                      "Name": "SelectedWUWVPA",
                      "NumBits": 6,
                      "Units": "WUWID",
                      "Description": "Currently Selected WUW VPA (0x3F == none)."
                    },
                    {
                      "Name": "IsEnabled",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "WUW Enabled (1=enabled, 0=disabled)."
                    },
                    {
                      "Name": "IsReadOnly",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "WUW Read-Only (1=read-only, 0=read/write)."
                    }
                  ]
                },
                {
                  "Name": "SupportedWUWVPA",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Bitfield of supported WUWs (MSB first)",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "VPALanguage",
          "Value": 4,
          "Mandatory": "O",
          "Description": "VPA Language",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.VPALanguage",
              "Operator": "Operators.Get",
              "Description": "VPA Language Get Request for current VPA WUW"
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.VPALanguage",
              "Operator": "Operators.SetGet",
              "Description": "VPA Language Set/Get Request for current VPA WUW",
              "Fields": [
                {
                  "Name": "SelectedVPALanguage",
                  "Type": "uint8",
                  "Units": "VPALangID",
                  "Description": "Set/Get VPA Language of current VPA WUW"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.VPALanguage",
              "Operator": "Operators.Status",
              "Description": "VPA Language Status Response",
              "Fields": [
                {
                  "Name": "SelectedWUWVPA",
                  "Type": "uint8",
                  "Units": "WUWID",
                  "Description": "Currently Selected VPA WUW"
                },
                {
                  "Name": "SelectedVPALanguage",
                  "Type": "uint8",
                  "Units": "VPALangID",
                  "Description": "Currently configured VPA Language for current VPA WUW"
                },
                {
                  "Name": "SupportedVPALanguage",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Bitfield of supported VPA Languages (MSB first) for current VPA WUW",
                  "LongPostDescription": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.VPALanguage",
              "Operator": "Operators.Error",
              "Description": "VPA Language Error Response",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Description": "InvalidData if setting a non-supported language to selected VPA"
                }
              ]
            }
          ]
        },
        {
          "Name": "VPATrigger",
          "Value": 5,
          "Mandatory": "M",
          "Description": "VPA Trigger",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.VPA",
              "Function": "VPAFunctions.VPATrigger",
              "Operator": "Operators.Status",
              "Description": "VPA Trigger Status Response",
              "Fields": [
                {
                  "Name": "VPATrigID",
                  "Type": "uint8",
                  "Units": "VPATrigID",
                  "Enum": "VPATrigID",
                  "Description": "VPA trigger type ID"
                },
                {
                  "Name": "VPAID",
                  "Type": "uint8",
                  "Units": "VPAID",
                  "Enum": "VPAID",
                  "Description": "VPA ID"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "WiFi",
      "Value": 17,
      "Mandatory": "O",
      "Description": "Wi-Fi network configuration management",
      "Category": "Public",
      "Version": "1.1.0",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get WiFi FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "WiFi FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "Count": 60,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all Wi-Fi setup information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start command"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned"
            }
          ]
        },
        {
          "Name": "AvailableNetworks",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Retrieves all networks visible to the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.AvailableNetworks",
              "Operator": "Operators.Start",
              "Description": "Retrieve all available WiFi networks visible to the product"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.AvailableNetworks",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge Start message"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.AvailableNetworks",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Sent when a network is discovered",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiSecurityType",
                      "Description": "Network security type",
                      "Enum": "WiFiSecurityTypes",
                      "NumBits": 4
                    },
                    {
                      "Name": "WiFiCanConnect",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Product can connect to this network (already configured)"
                    },
                    {
                      "Name": "WiFiIsConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Product is currently connected to this network"
                    },
                    {
                      "Name": "WiFiIsEnterprise",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Network uses Enterprise security"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 1,
                      "Description": "Unused bit"
                    }
                  ]
                },
                {
                  "Name": "BSSID",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "Access point MAC address (BSSID)"
                },
                {
                  "Name": "WiFiRSSI",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiRSSIValue",
                      "Description": "Access point RSSI",
                      "NumBits": 7
                    },
                    {
                      "Name": "WiFiRSSIUnusedBits",
                      "Description": "Unused bit",
                      "NumBits": 1
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.AvailableNetworks",
              "Operator": "Operators.Result",
              "Description": "AvailableNetworks result signals the product has finished sending available networks"
            }
          ]
        },
        {
          "Name": "ConfigureNetwork",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Configures and connects to a network",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.ConfigureNetwork",
              "Operator": "Operators.Start",
              "Description": "Configures the security type and password for a wireless network",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiSecurity",
                      "Description": "Network security type",
                      "NumBits": 4,
                      "Enum": "WiFiSecurityTypes"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 4,
                      "Description": "Unused bit"
                    }
                  ]
                },
                {
                  "Name": "WiFiPassword",
                  "Description": "Network password",
                  "Type": "uint8",
                  "VariableLength": true
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.ConfigureNetwork",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge Start message"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.ConfigureNetwork",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Optionally sent as the network state changes",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name, padded with zeros",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiStatus",
                      "Description": "Network state/error",
                      "Enum": "WiFiNetworkStates",
                      "NumBits": 5
                    },
                    {
                      "Name": "WiFiStatusType",
                      "NumBits": 1,
                      "Description": "Status type (0 == state, 1 == error)"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.ConfigureNetwork",
              "Operator": "Operators.Result",
              "Type": "Response",
              "Description": "Sent when the attempt to configure and join the network has completed",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiStatus",
                      "Description": "Network state/error",
                      "Enum": "WiFiNetworkErrors",
                      "NumBits": 5
                    },
                    {
                      "Name": "WiFiStatusType",
                      "NumBits": 1,
                      "Description": "Status type (0 == state, 1 == error)"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "GetSecurityType",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Get the security type for a particular network",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetSecurityType",
              "Operator": "Operators.Start",
              "Description": "Determines the security type for a particular network that is visible to the product.",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetSecurityType",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge Start message",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetSecurityType",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Sent when the network has been found.",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiSecurityType",
                      "Description": "Network security type",
                      "NumBits": 4
                    },
                    {
                      "Name": "WiFiCanConnect",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Product can connect to this network (already configured)"
                    },
                    {
                      "Name": "WiFiIsConnected",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Product is currently connected to this network"
                    },
                    {
                      "Name": "WiFiIsEnterprise",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Network uses Enterprise security"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 1,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.GetSecurityType",
              "Operator": "Operators.Result",
              "Type": "Response",
              "Description": "Scan is complete; no further network information will be returned."
            }
          ]
        },
        {
          "Name": "RemoveNetwork",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Removes a network configuration from the product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.RemoveNetwork",
              "Operator": "Operators.Start",
              "Description": "Tell product to disconnect and remove a network configuration",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.RemoveNetwork",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge Start message",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.RemoveNetwork",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Optionally sent as the network state changes",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiStatus",
                      "Description": "Network state/error",
                      "NumBits": 5
                    },
                    {
                      "Name": "WiFiStatusType",
                      "NumBits": 1,
                      "Description": "Status type (0 == state, 1 == error)"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.RemoveNetwork",
              "Operator": "Operators.Result",
              "Type": "Response",
              "Description": "Sent when the network has been disconnected and the configuration removed.",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiStatus",
                      "Description": "Network state/error",
                      "NumBits": 5
                    },
                    {
                      "Name": "WiFiStatusType",
                      "NumBits": 1,
                      "Description": "Status type (0 == state, 1 == error)"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "EncryptedConfigureNetwork",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Configures and connects to a network (encrypted payload)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.EncryptedConfigureNetwork",
              "Operator": "Operators.Start",
              "Description": "Configures the security type and password for a wireless network",
              "Fields": [
                {
                  "Name": "CipherSuite",
                  "Description": "The cipher suite used for key exchange and message authentication",
                  "Type": "uint8",
                  "Enum": "WiFiCipherSuites",
                  "Count": 1
                },
                {
                  "Name": "PublicKey",
                  "Description": "The public key of the application",
                  "Type": "uint8",
                  "Count": 65
                },
                {
                  "Name": "CredentialsBlob",
                  "Description": "BLOB containing encrypted WiFi security type, SSID, network password concatenated with MAC",
                  "Type": "uint8",
                  "Count": 144
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.EncryptedConfigureNetwork",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge Start message"
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.EncryptedConfigureNetwork",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Optionally sent as the network state changes",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiStatus",
                      "Description": "Network state/error",
                      "Enum": "WiFiNetworkStates",
                      "NumBits": 5
                    },
                    {
                      "Name": "WiFiStatusType",
                      "NumBits": 1,
                      "Description": "Status type (0 == state, 1 == error)"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.WiFi",
              "Function": "WiFiFunctions.EncryptedConfigureNetwork",
              "Operator": "Operators.Result",
              "Type": "Response",
              "Description": "Sent when the attempt to configure and join the network has completed",
              "Fields": [
                {
                  "Name": "SSID",
                  "Description": "Network name",
                  "Type": "uint8",
                  "Count": 32
                },
                {
                  "Name": "WiFiFlags",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "WiFiStatus",
                      "Description": "Network state/error",
                      "Enum": "WiFiNetworkErrors",
                      "NumBits": 5
                    },
                    {
                      "Name": "WiFiStatusType",
                      "NumBits": 1,
                      "Description": "Status type (0 == state, 1 == error)"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 2,
                      "Description": "Unused bit"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Auth",
      "Value": 18,
      "Mandatory": "O",
      "Description": "Used for product authentication.",
      "Category": "Public",
      "Version": "1.1.0",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Auth Function Block Info Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Auth Function Block Info Status Response",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported functions.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GetAll",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GetAll",
              "Operator": "Operators.Status",
              "Type": "uint8",
              "VariableLength": true,
              "Description": "Bitfield of supported functions. The bitfield of supported functions is of variable length, dictated by the highest function ID that is supported.  If the highest function ID is 7, for instance, the product with only send one byte in its response and truncate the MSB's that would be all 0's."
            }
          ]
        },
        {
          "Name": "RotatingPublicKey",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Sets rotating public key used by product during authentication.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.RotatingPublicKey",
              "Operator": "Operators.SetGet",
              "Description": "Auth Function Block SetGet.",
              "Fields": [
                {
                  "Name": "x",
                  "Type": "uint8",
                  "Count": 64,
                  "Description": "x"
                },
                {
                  "Name": "y",
                  "Type": "uint8",
                  "Count": 64,
                  "Description": "y"
                },
                {
                  "Name": "signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 104,
                  "Description": "ECDSA signature length varies between 102 and 104 bytes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.RotatingPublicKey",
              "Operator": "Operators.Status",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "Challenge",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Kicks off authentication process with product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.Challenge",
              "Operator": "Operators.Start",
              "Description": "Auth Function Block Start command.",
              "Fields": [
                {
                  "Name": "Timestamp",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "Challenge Timestamp. For more details, refer to the section \\textit{Challenge Timestamp} below."
                },
                {
                  "Name": "Signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 104,
                  "Description": "ECDSA signature length varies between 102 and 104 bytes."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.Challenge",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.Challenge",
              "Operator": "Operators.Result",
              "Description": "(Empty)",
              "Fields": [
                {
                  "Name": "GUID",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "GUID"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "Challenge Timestamp. For more details, refer to the section \\textit{Challenge Timestamp} below."
                },
                {
                  "Name": "publicKey",
                  "Type": "uint8",
                  "Count": 88,
                  "Description": "Base-64 encoded ECDHE public key. For more details, refer to the section \\textit{ECDHE Public Key} below."
                },
                {
                  "Name": "Signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 104,
                  "Description": "Signature",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "ECDHEPublicKey",
          "Value": 4,
          "Mandatory": "O",
          "Description": null,
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ECDHEPublicKey",
              "Operator": "Operators.SetGet",
              "Description": "Auth Function Block SetGet.",
              "Fields": [
                {
                  "Name": "publicKey",
                  "Type": "uint8",
                  "Count": 88,
                  "Description": "Base-64 encoded ECDHE public key"
                },
                {
                  "Name": "signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 104,
                  "Description": "ECDSA signature length varies between 102 and 104 bytes",
                  "LongPostDescription": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ECDHEPublicKey",
              "Operator": "Operators.Status",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "GenerateChallenge",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Causes product to generate a signed challenge.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GenerateChallenge",
              "Operator": "Operators.Start",
              "Description": "Auth Function Block Start command."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GenerateChallenge",
              "Operator": "Operators.Result",
              "Description": "Encrypt and sign a challenge using the ECDHE shared secret derived from a previous E2E authentication sequence.",
              "Fields": [
                {
                  "Name": "EncryptedData",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "Encryption of a 128-bit nonce, 16-bit bitfield and 14-byte PKCS\\#7 padding field. Encryption is done using AES-128-CBC algorithm with first 128-bits of ECDHE shared secret as the Initialization Vector and the last 128 bits of ECDHE shared secret as the AES-128 encryption Key."
                },
                {
                  "Name": "Signature",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "256-bit HMAC signature applied to encrypted payload. The signature is generated using HMAC-SHA-256 algorithm with the 256-bit ECDHE shared secret as the SHA-256 HMAC key."
                }
              ]
            }
          ]
        },
        {
          "Name": "VerifyChallengeResponse",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Causes the product to verify the response to a challenge.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.VerifyChallengeResponse",
              "Operator": "Operators.Start",
              "Description": "Auth Function Block Start command.",
              "Fields": [
                {
                  "Name": "EncryptedData",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "Encryption of 128-bit incremented nonce, 16-bit bitfield and 14-byte PKCS\\#7 padding. Encryption is done using AES-128-CBC algorithm with first 128-bits of ECDHE shared secret as the Initialization Vector and the last 128 bits of ECDHE shared secret as the AES-128 encryption Key."
                },
                {
                  "Name": "Signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 32,
                  "Description": "256-bit HMAC signature of the encrypted payload.  The signature is generated using the HMAC-SHA-256 algorithm with the 256-bit ECDHE shared secret as the SHA-256 HMAC key."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.VerifyChallengeResponse",
              "Operator": "Operators.Result",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "ProductIRK",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Gets the signed encrypted Product IRK stored on product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ProductIRK",
              "Operator": "Operators.Get",
              "Description": "Asks the device to get and respond in a status message with its Product IRK (Encrypted) along with a verification signature."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ProductIRK",
              "Operator": "Operators.Status",
              "Description": "The Product IRK, with encrypted Product IRK and signature if no errors.",
              "Fields": [
                {
                  "Name": "EncryptedProductIRK",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "16 bytes of Product IRK encrypted using AES-128-CBC algorithm w/ first 128-bits of ECDHE shared secret as the Initialization Vector (IV) and last 128-bits as the encryption key."
                },
                {
                  "Name": "ProductIRKSignature",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "32 bytes of Product IRK signature using SHA256-HMAC algorithm w/ entire ECDHE shared secret as the HMAC signing key."
                }
              ]
            }
          ]
        },
        {
          "Name": "CondensedChallenge",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Kicks off authentication process with a product that already has cloud public keys",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.CondensedChallenge",
              "Operator": "Operators.Start",
              "Description": "Auth Function Block Start command."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.CondensedChallenge",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.CondensedChallenge",
              "Operator": "Operators.Result",
              "Description": "(Empty)",
              "Fields": [
                {
                  "Name": "Timestamp",
                  "Type": "uint8",
                  "Count": 10,
                  "Description": "Timestamp"
                },
                {
                  "Name": "GUID",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "GUID"
                },
                {
                  "Name": "Signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 104,
                  "Description": "Signature"
                }
              ]
            }
          ]
        },
        {
          "Name": "DeviceIdentityPublicKey",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Request the device identity public key.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.DeviceIdentityPublicKey",
              "Operator": "Operators.Get",
              "Description": "Requests the device identity public key."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.DeviceIdentityPublicKey",
              "Operator": "Operators.Status",
              "Description": "Return the device identity public key.",
              "Fields": [
                {
                  "Name": "PublicKey",
                  "Type": "uint8",
                  "Count": 215,
                  "Description": "Contains device identity public key in PEM format",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "FeatureLock",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Control feature locking and unlocking.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.FeatureLock",
              "Operator": "Operators.Get",
              "Description": "Requests the locked/unlocked state of all features that can be locked or unlocked as well as whether the state will persist across device reboots, or if the state is temporary.",
              "Fields": [
                {
                  "Name": "QueryType",
                  "Type": "uint8",
                  "Count": 1,
                  "Units": "Enum",
                  "Enum": "FeatureLockType",
                  "Description": "Specifies the type of feature lock being queried."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.FeatureLock",
              "Operator": "Operators.Status",
              "Description": "Contains the current state of the feature lock settings.",
              "Fields": [
                {
                  "Name": "QueryType",
                  "Type": "uint8",
                  "Count": 1,
                  "Units": "Enum",
                  "Enum": "FeatureLockType",
                  "Description": "Specifies the type of feature lock being queried. For more details, see description for enum \\textbf{FeatureLockType}."
                },
                {
                  "Name": "FeatureState",
                  "Type": "uint16",
                  "Count": 1,
                  "Description": "Each bit in the array is mapped to a specific product feature.  If the bit is set, it means that the query result is true (i.e., if we asked if the device was temporarily unlocked, a set bit indicates that it is for that feature).",
                  "Bitfields": [
                    {
                      "Name": "TAP",
                      "NumBits": 1,
                      "Description": "Query result for TAP being locked/unlocked"
                    },
                    {
                      "Name": "BMAPDebug",
                      "NumBits": 1,
                      "Description": "Query result for BMAP's debugging fblocks being locked/unlocked."
                    },
                    {
                      "Name": "USBDebug",
                      "NumBits": 1,
                      "Description": "Query result for USBDBG interface being locked/unlocked. This interface is used for low-level debugging and access to non-volatile storage on banded headphones and truly wireless products via USB port. Its used for development and programmer-level troubleshooting of the firmware running on these products."
                    },
                    {
                      "Name": "PersistentUnlockCommand",
                      "NumBits": 1,
                      "Description": "Query result for ability to persistently unlock a feature."
                    },
                    {
                      "Name": "Unused",
                      "NumBits": 12,
                      "Description": "Reserved for future features."
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.FeatureLock",
              "Operator": "Operators.SetGet",
              "Description": "Lock or unlock specific features of the device.",
              "Fields": [
                {
                  "Name": "Action",
                  "Type": "uint8",
                  "Count": 1,
                  "Units": "Enum",
                  "Enum": "FeatureLockType",
                  "Description": "Specifies what action to take. For more details, see description for enum \\textbf{FeatureLockType}."
                },
                {
                  "Name": "Features",
                  "Type": "uint16",
                  "Count": 1,
                  "Description": "Each bit in the array is mapped to a specific product feature.  If the bit is set, it means that the we will take the specifed action on the associated feature.  If the bit is clear, no action will be taken for that feature.",
                  "Bitfields": [
                    {
                      "Name": "TAP",
                      "NumBits": 1,
                      "Description": "Lock or unlock the TAP feature."
                    },
                    {
                      "Name": "BMAPDebug",
                      "NumBits": 1,
                      "Description": "Lock or unlock the BMAP Debug FBlocks."
                    },
                    {
                      "Name": "USBDebug",
                      "NumBits": 1,
                      "Description": "Lock of unlock USBDBG interface."
                    },
                    {
                      "Name": "PersistentUnlockCommand",
                      "NumBits": 1,
                      "Description": "Enable or disable the ability to persistently unlock a feature."
                    },
                    {
                      "Name": "Unused",
                      "NumBits": 12,
                      "Description": "Reserved for future features."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "OtpKeyType",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Request the OTP key type.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.OtpKeyType",
              "Operator": "Operators.Get",
              "Description": "Requests the OTP key type."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.OtpKeyType",
              "Operator": "Operators.Status",
              "Description": "Return the device OTP key type.",
              "Fields": [
                {
                  "Name": "CurrentOtpKeyType",
                  "Type": "uint8",
                  "Units": "Enum",
                  "Enum": "OtpKeyType",
                  "Description": "Current OTP key type."
                }
              ]
            }
          ]
        },
        {
          "Name": "ProductName",
          "Value": 12,
          "Mandatory": "M",
          "Description": "Request the product name.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ProductName",
              "Operator": "Operators.Get",
              "Description": "Get the Product Name"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ProductName",
              "Operator": "Operators.Status",
              "Description": "Product Name (ASCII String)",
              "Fields": [
                {
                  "Name": "ProductName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Product Name (ASCII String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "PlatformName",
          "Value": 13,
          "Mandatory": "M",
          "Description": "Request the platform name.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.PlatformName",
              "Operator": "Operators.Get",
              "Description": "Get the Platform Name"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.PlatformName",
              "Operator": "Operators.Status",
              "Description": "Platform Name (ASCII String)",
              "Fields": [
                {
                  "Name": "PlatformName",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Platform Name (ASCII String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "AppIRK",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Sends the signed encrypted App IRK to the product.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.AppIRK",
              "Operator": "Operators.SetGet",
              "Description": "Sends the app's unique Identity Resolving Key (IRK) in an encrypted and signed representation to the device.",
              "Fields": [
                {
                  "Name": "EncryptedAppIRK",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "16 bytes of App IRK encrypted using AES-128-CBC algorithm w/ first 128-bits of ECDHE shared secret as the Initialization Vector (IV) and last 128-bits as the encryption key."
                },
                {
                  "Name": "AppIRKSignature",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "32 bytes of App IRK signature using SHA256-HMAC algorithm w/ entire ECDHE shared secret as the HMAC signing key."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.AppIRK",
              "Operator": "Operators.Status",
              "Description": "(Empty)"
            }
          ]
        },
        {
          "Name": "GenerateActivationChallenge",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Request the product to generate Activation challenge.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GenerateActivationChallenge",
              "Operator": "Operators.Start",
              "Description": "App requests the product to generate a random 128-bit activation challenge for each component."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GenerateActivationChallenge",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.GenerateActivationChallenge",
              "Operator": "Operators.Result",
              "Description": "128-bit activation challenge(s), one for each product component.",
              "Fields": [
                {
                  "Name": "numOfChallenges",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Number of activation challenges generated (1 for single component product such as banded headphone, 2 for multi-component product such as truely wireless earbuds.)"
                },
                {
                  "Name": "challenge1",
                  "Type": "uint8",
                  "Variable Length": true,
                  "Count": 16,
                  "Description": "128-bit activation challenge generated by a product component."
                },
                {
                  "Name": "challenge2",
                  "Type": "uint8",
                  "Variable Length": true,
                  "Count": 16,
                  "Description": "128-bit activation challenge generated by a product component."
                }
              ]
            }
          ]
        },
        {
          "Name": "VerifyActivationChallengeResponse",
          "Value": 16,
          "Mandatory": "O",
          "Description": "Request the product to verify Activation challenge-response.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.VerifyActivationChallengeResponse",
              "Operator": "Operators.Start",
              "Description": "App forwards an external system's Activation challenge response to the product in order to set Activation bit in each product component.",
              "Fields": [
                {
                  "Name": "numberOfResponses",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Number of activation challenge-responses generated by the external system (1 for single-component products such as banded headphone, 2 for multi-component products such as truely wireless earbuds.)"
                },
                {
                  "Name": "challenge1",
                  "Type": "uint8",
                  "Count": 16,
                  "VariableLength": true,
                  "Description": "128-bit activation challenge. This must match the challenge generated and passed by a product component to the app in Auth.GenerateActivationChallenge message."
                },
                {
                  "Name": "signatureLength1",
                  "Type": "uint8",
                  "Count": 1,
                  "VariableLength": true,
                  "Description": "Length of ECC-384 signature of the activation challenge."
                },
                {
                  "Name": "signature1",
                  "Type": "uint8",
                  "Count": 104,
                  "VariableLength": true,
                  "Description": "ECC-384 signature of the activation challenge. This signature is generated by the external system using a Rotating Private Key after activating the product in the system."
                },
                {
                  "Name": "challenge2",
                  "Type": "uint8",
                  "Count": 16,
                  "VariableLength": true,
                  "Description": "128-bit activation challenge. This must match the challenge generated and passed by a product component to the app in Auth.GenerateActivationChallenge message."
                },
                {
                  "Name": "signatureLength2",
                  "Type": "uint8",
                  "Count": 1,
                  "VariableLength": true,
                  "Description": "Length of ECC-384 signature of the activaton challenge."
                },
                {
                  "Name": "signature2",
                  "Type": "uint8",
                  "Count": 104,
                  "Description": "ECC-384 signature of the activation challenge.  This signature is generated by the external system using a Rotating Private Key after activating the product in the system."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.VerifyActivationChallengeResponse",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.VerifyActivationChallengeResponse",
              "Operator": "Operators.Result",
              "Description": "Product sends this response to the app after successfully verifying an external system's activation challenge-response and setting Activation bit in each product component."
            }
          ]
        },
        {
          "Name": "Activation",
          "Value": 17,
          "Mandatory": "O",
          "Description": "Check Activation status in the product's persistent storage.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.Activation",
              "Operator": "Operators.Get",
              "Description": "App requests the product to send Activation status."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.Activation",
              "Operator": "Operators.Status",
              "Description": "Activation status as recorded in the product's persistent storage.",
              "Fields": [
                {
                  "Name": "ActivationBit",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "Flag indicating if Activation bit is set in the product's persistent storage (1=activated, 0=not_activated)"
                }
              ]
            }
          ]
        },
        {
          "Name": "CondensedCloudChallenge",
          "Value": 18,
          "Mandatory": "O",
          "Description": "Get a signed challenge to associate a cloud-connected product with a user account.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.CondensedCloudChallenge",
              "Operator": "Operators.Start",
              "Description": "Auth Function Block Start command."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.CondensedCloudChallenge",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.CondensedCloudChallenge",
              "Operator": "Operators.Result",
              "Description": "(Empty)",
              "Fields": [
                {
                  "Name": "Timestamp",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "Challenge Timestamp. For more details, refer to the section \\textit{Cloud Challenge Timestamp} below."
                },
                {
                  "Name": "GUID",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "GUID"
                },
                {
                  "Name": "Signature",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 104,
                  "Description": "Signature",
                  "LongPostDescription": null
                }
              ]
            }
          ]
        },
        {
          "Name": "ValidateDeviceIdentityKeypair",
          "Value": 19,
          "Mandatory": "O",
          "Description": "Cryptographically check if the product's device ID keypair is valid.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ValidateDeviceIdentityKeypair",
              "Operator": "Operators.Start",
              "Description": "Request a product to cryptographically validate its device identity keypair."
            },
            {
              "FunctionBlock": "FunctionBlocks.Auth",
              "Function": "AuthFunctions.ValidateDeviceIdentityKeypair",
              "Operator": "Operators.Result",
              "Description": "Product succesfully validated its device identity keypair."
            }
          ]
        }
      ]
    },
    {
      "Name": "Experimental",
      "Value": 19,
      "Mandatory": "O",
      "Description": "Experimental messages not yet part of the official BMAP specification.",
      "Category": "Public",
      "Version": "0.0.1",
      "Functions": [
        {
          "Name": "GyroData",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Raw Gyro Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GyroData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Gyro data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X axis"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y axis"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z axis"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status",
                  "Enum": "SensorHubStatus"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GyroData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Gyro data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GyroData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Gyro query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "AccelData",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Raw Accelerometer Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AccelData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Accel data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X axis"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y axis"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z axis"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status",
                  "Enum": "SensorHubStatus"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AccelData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Accel data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AccelData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Accel query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "ActivityRecognition",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Activity start/end notifications.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.ActivityRecognition",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Activity Recognition data",
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint16",
                  "Description": "Container",
                  "Bitfields": [
                    {
                      "Name": "StillEnded",
                      "NumBits": 1,
                      "Description": "StillEnded"
                    },
                    {
                      "Name": "WalkingEnded",
                      "NumBits": 1,
                      "Description": "WalkingEnded"
                    },
                    {
                      "Name": "RunningEnded",
                      "NumBits": 1,
                      "Description": "RunningEnded"
                    },
                    {
                      "Name": "BicycleEnded",
                      "NumBits": 1,
                      "Description": "BicycleEnded"
                    },
                    {
                      "Name": "VehicleEnded",
                      "NumBits": 1,
                      "Description": "VehicleEnded"
                    },
                    {
                      "Name": "TiltingEnded",
                      "NumBits": 1,
                      "Description": "TiltingEnded"
                    },
                    {
                      "Name": "UnusedEnded",
                      "NumBits": 2,
                      "Description": "UnusedEnded"
                    },
                    {
                      "Name": "StillStarted",
                      "NumBits": 1,
                      "Description": "StillStarted"
                    },
                    {
                      "Name": "WalkingStarted",
                      "NumBits": 1,
                      "Description": "WalkingStarted"
                    },
                    {
                      "Name": "RunningStarted",
                      "NumBits": 1,
                      "Description": "RunningStarted"
                    },
                    {
                      "Name": "BicycleStarted",
                      "NumBits": 1,
                      "Description": "BicycleStarted"
                    },
                    {
                      "Name": "VehicleStarted",
                      "NumBits": 1,
                      "Description": "VehicleStarted"
                    },
                    {
                      "Name": "TiltingStarted",
                      "NumBits": 1,
                      "Description": "TiltingStarted"
                    },
                    {
                      "Name": "UnusedStarted",
                      "NumBits": 2,
                      "Description": "UnusedStarted"
                    }
                  ]
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            }
          ]
        },
        {
          "Name": "GestureRecognition",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Gesture recognition notifications.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GestureRecognition",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Gesture Recognition data",
              "Fields": [
                {
                  "Name": "Gesture",
                  "Type": "uint8",
                  "Enum": "Gestures"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            }
          ]
        },
        {
          "Name": "ButtonPress",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Button press/release notification",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.ButtonPress",
              "Operator": "Operators.Get",
              "Description": "Get current button state",
              "Fields": [
                {
                  "Name": "ignored",
                  "Type": "uint8"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.ButtonPress",
              "Operator": "Operators.Status",
              "Description": "Button press or release notification",
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": "Container",
                  "Bitfields": [
                    {
                      "Name": "ButtonID",
                      "Enum": "ButtonIDs",
                      "NumBits": 7
                    },
                    {
                      "Name": "ButtonEvent",
                      "Enum": "ButtonEvents",
                      "NumBits": 1
                    }
                  ]
                },
                {
                  "Name": "Duration",
                  "Type": "uint16",
                  "Units": "milliseconds",
                  "Description": "Amount of time held before release.  Not available for Pressed."
                },
                {
                  "Name": "Mask",
                  "Type": "uint32",
                  "Description": "Bitmask of all key states"
                }
              ]
            }
          ]
        },
        {
          "Name": "Printf",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Diagnostic print message",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.Printf",
              "Operator": "Operators.Status",
              "Description": "Used to display debug information as strings.",
              "Alias": "DebugPrintf",
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "StreamID",
                      "Units": "PlatformSpecific",
                      "Description": "Some sort of identifier for the thread printing the message.",
                      "NumBits": 6
                    },
                    {
                      "Name": "Priority",
                      "Description": "How important the debug message is.",
                      "Enum": "Priorities",
                      "NumBits": 2
                    }
                  ]
                },
                {
                  "Name": "Buffer",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The string to display."
                }
              ]
            }
          ]
        },
        {
          "Name": "PrintfID",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Diagnostic print message using ID for format string instead of string.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PrintfID",
              "Operator": "Operators.Status",
              "Description": "Used to display debug information as strings.",
              "Alias": "DebugPrintfID",
              "Fields": [
                {
                  "Name": "Container",
                  "Type": "uint32",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "StreamID",
                      "Units": "PlatformSpecific",
                      "Description": "Some sort of identifier for the stream printing the message.",
                      "NumBits": 6
                    },
                    {
                      "Name": "Priority",
                      "Description": "How important the debug message is.",
                      "Enum": "Priorities",
                      "NumBits": 2
                    },
                    {
                      "Name": "FormatStringID",
                      "Description": "A unique identifier for the format string.",
                      "NumBits": 24
                    }
                  ]
                },
                {
                  "Name": "Parameters",
                  "Type": "uint32",
                  "Count": 4,
                  "Description": "Parameters to use in the format string."
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornControl",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Control of Acorn mute/unmute/etc.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornControl",
              "Operator": "Operators.Set",
              "Description": "Acorn Control Command",
              "Fields": [
                {
                  "Name": "AcornCommand",
                  "Type": "uint8",
                  "Enum": "AcornControls"
                },
                {
                  "Name": "AcornSelect",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "AcornOutput",
                  "Type": "uint8",
                  "Enum": "AcornOutputs"
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornFwupdate",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Setup which image to activate",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornFwupdate",
              "Operator": "Operators.Get",
              "Description": "Acorn Firmware Image Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornFwupdate",
              "Operator": "Operators.Set",
              "Description": "Acorn Firmware Image Set Request",
              "Fields": [
                {
                  "Name": "AcornTarget",
                  "Type": "uint8",
                  "Enum": "AcornTarget"
                },
                {
                  "Name": "AcornBankSelect",
                  "Type": "uint8",
                  "Enum": "AcornBank"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornFwupdate",
              "Operator": "Operators.Status",
              "Description": "Acorn Firmware Image Set Status",
              "Fields": [
                {
                  "Name": "AcornCount",
                  "Type": "uint8",
                  "Description": "AcornCount"
                },
                {
                  "Name": "AcornData",
                  "Type": "uint8",
                  "Count": 20,
                  "Description": "The Acorn Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornRegAccess",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Read and write Acorn Registers (byte)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornRegAccess",
              "Operator": "Operators.Get",
              "Description": "Register to read and size",
              "Fields": [
                {
                  "Name": "acorn_select",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "register_address",
                  "Type": "uint16",
                  "Description": "register_address"
                },
                {
                  "Name": "num_bytes",
                  "Type": "uint16",
                  "Max": 78,
                  "Description": "num_bytes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornRegAccess",
              "Operator": "Operators.Set",
              "Description": "Register Write data",
              "Fields": [
                {
                  "Name": "acorn_select",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "register_address",
                  "Type": "uint16",
                  "Description": "register_address"
                },
                {
                  "Name": "length",
                  "Type": "uint16",
                  "Description": "length"
                },
                {
                  "Name": "register_value",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "register_value"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornRegAccess",
              "Operator": "Operators.Status",
              "Description": "Register read data",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint8",
                  "Count": 60,
                  "Description": "Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornCoeffAccess",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Read and write Acorn Coefficients (uint32)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCoeffAccess",
              "Operator": "Operators.Get",
              "Description": "Register to read and size",
              "Fields": [
                {
                  "Name": "acorn_select",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "bank_select",
                  "Type": "uint8",
                  "Enum": "BankSelector"
                },
                {
                  "Name": "coeff_type",
                  "Type": "uint8",
                  "Enum": "CoeffType"
                },
                {
                  "Name": "coeff_sequence_num",
                  "Type": "uint16",
                  "Description": "coeff_sequence_num"
                },
                {
                  "Name": "coeff_cnt",
                  "Type": "uint16",
                  "Max": 32,
                  "Description": "coeff_cnt"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCoeffAccess",
              "Operator": "Operators.Set",
              "Description": "Coefficient Write data",
              "Fields": [
                {
                  "Name": "acorn_select",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "bank_select",
                  "Type": "uint8",
                  "Enum": "BankSelector"
                },
                {
                  "Name": "coeff_type",
                  "Type": "uint8",
                  "Enum": "CoeffType"
                },
                {
                  "Name": "coeff_sequence_num",
                  "Type": "uint16",
                  "Description": "coeff_sequence_num"
                },
                {
                  "Name": "coeff_cnt",
                  "Type": "uint16",
                  "Description": "coeff_cnt"
                },
                {
                  "Name": "coeff_value",
                  "Type": "uint32",
                  "Count": 16,
                  "Description": "coeff_value"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCoeffAccess",
              "Operator": "Operators.Status",
              "Description": "Coefficient read data",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint32",
                  "Count": 32,
                  "Description": "Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "AweData",
          "Value": 16,
          "Mandatory": "O",
          "Description": "Data for Audio Weaver between PC and hardware.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AweData",
              "Operator": "Operators.Status",
              "Description": "Used to send data between audio weaver on PC and on hardware.",
              "Fields": [
                {
                  "Name": "Buffer",
                  "Type": "uint8",
                  "Count": 64,
                  "Description": "The audio weaver data."
                }
              ]
            }
          ]
        },
        {
          "Name": "AweStats",
          "Value": 17,
          "Mandatory": "O",
          "Description": "Statistics about Audio Weaver execution.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AweStats",
              "Operator": "Operators.Status",
              "Description": "Used to send statistics about Audio Weaver execution.",
              "Fields": [
                {
                  "Name": "TaskWakes",
                  "Type": "uint16",
                  "Description": "TaskWakes"
                },
                {
                  "Name": "FwPumped",
                  "Type": "uint16",
                  "Description": "FwPumped"
                },
                {
                  "Name": "Processings",
                  "Type": "uint16",
                  "Description": "Processings"
                },
                {
                  "Name": "Overrun1",
                  "Type": "uint16",
                  "Description": "Overrun1"
                },
                {
                  "Name": "Overrun2",
                  "Type": "uint16",
                  "Description": "Overrun2"
                },
                {
                  "Name": "InstantaneousCpu",
                  "Type": "float32",
                  "Description": "InstantaneousCpu"
                },
                {
                  "Name": "PeakCpu",
                  "Type": "float32",
                  "Description": "PeakCpu"
                },
                {
                  "Name": "AverageCpu",
                  "Type": "float32",
                  "Description": "AverageCpu"
                }
              ]
            }
          ]
        },
        {
          "Name": "BandwidthTest",
          "Value": 18,
          "Mandatory": "O",
          "Description": "Message used to test BMAP data bandwidth",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BandwidthTest",
              "Operator": "Operators.Status",
              "Description": "Used to display debug information as strings.",
              "Fields": [
                {
                  "Name": "SequenceNumber",
                  "Type": "uint8",
                  "Description": "SequenceNumber"
                },
                {
                  "Name": "TestData",
                  "Type": "uint32",
                  "Count": 30,
                  "Description": "Any relevant test data, such as timestamps."
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornCurrentBank",
          "Value": 19,
          "Mandatory": "O",
          "Description": "Select or read bank on acorn",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCurrentBank",
              "Operator": "Operators.Get",
              "Description": "Acorn Current Bank Get Request",
              "Fields": [
                {
                  "Name": "AcornSelect",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCurrentBank",
              "Operator": "Operators.Set",
              "Description": "Acorn Current Bank Set Request",
              "Fields": [
                {
                  "Name": "AcornSelect",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "AcornBank",
                  "Type": "uint8",
                  "Enum": "BankSelector"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCurrentBank",
              "Operator": "Operators.Result",
              "Description": "Acorn Current Bank Result Response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCurrentBank",
              "Operator": "Operators.Status",
              "Description": "Acorn Current Bank Status Response",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornNextBank",
          "Value": 20,
          "Mandatory": "O",
          "Description": "Select or read bank on acorn",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornNextBank",
              "Operator": "Operators.Get",
              "Description": "Acorn Next Bank Get Request",
              "Fields": [
                {
                  "Name": "AcornSelect",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornNextBank",
              "Operator": "Operators.Set",
              "Description": "Acorn Next Bank Set Request",
              "Fields": [
                {
                  "Name": "AcornSelect",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornNextBank",
              "Operator": "Operators.Status",
              "Description": "Acorn Next Bank Status Response",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "CapTouchGesture",
          "Value": 21,
          "Mandatory": "O",
          "Description": "Capacitive Touch Sensor Gesture data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchGesture",
              "Operator": "Operators.Status",
              "Description": "Capacitive Touch Sensor Gesture data",
              "Fields": [
                {
                  "Name": "Gesture",
                  "Type": "uint16",
                  "Description": "Gesture",
                  "Bitfields": [
                    {
                      "Name": "Tap",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "TapHold",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "SwipeBackward",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "SwipeForward",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "SwipeUp",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "SwipeDown",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "DoubleTap",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unassigned1",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "TwoTap",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unassigned2",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unassigned3",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unassigned4",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unassigned5",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unassigned6",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "TwoSwipeUp",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "TwoSwipeDown",
                      "NumBits": 1,
                      "Description": null
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "CapTouchTouches",
          "Value": 22,
          "Mandatory": "O",
          "Description": "Capacitive Touch Sensor Touch data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchTouches",
              "Operator": "Operators.Status",
              "Description": "Capacitive Touch Sensor Touch Data",
              "Fields": [
                {
                  "Name": "SystemInfo0",
                  "Type": "uint8",
                  "Description": "System Info 0 register"
                },
                {
                  "Name": "SystemInfo1",
                  "Type": "uint8",
                  "Description": "System Info 1 register",
                  "Bitfields": [
                    {
                      "Name": "TpMovement",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Activity or movement on trackpad status"
                    },
                    {
                      "Name": "PalmDetect",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Palm detect status"
                    },
                    {
                      "Name": "TooManyFingers",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Total finger status"
                    }
                  ]
                },
                {
                  "Name": "NumberOfFingers",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "RelativeX",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "RelativeY",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "AbsoluteX1",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "AbsoluteY1",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchStrength1",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchArea1",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "AbsoluteX2",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "AbsoluteY2",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchStrength2",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchArea2",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "AbsoluteX3",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "AbsoluteY3",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchStrength3",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchArea3",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "AbsoluteX4",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "AbsoluteY4",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchStrength4",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchArea4",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "AbsoluteX5",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "AbsoluteY5",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchStrength5",
                  "Type": "uint16",
                  "Description": null
                },
                {
                  "Name": "TouchArea5",
                  "Type": "uint8",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "CapTouchActiveReportRate",
          "Value": 23,
          "Mandatory": "O",
          "Description": "Capacitive Touch Sensor Active Report Rate",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchActiveReportRate",
              "Operator": "Operators.Get",
              "Description": "Get Active Report Rate"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchActiveReportRate",
              "Operator": "Operators.Set",
              "Description": "Set Active Report Rate",
              "Fields": [
                {
                  "Name": "ActiveReportRate",
                  "Type": "uint8",
                  "Units": "Hz",
                  "Min": 0,
                  "Max": 100,
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchActiveReportRate",
              "Operator": "Operators.Status",
              "Description": "Active Report Rate",
              "Fields": [
                {
                  "Name": "ActiveReportRate",
                  "Type": "uint8",
                  "Units": "Hz",
                  "Min": 0,
                  "Max": 100,
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchActiveReportRate",
              "Operator": "Operators.Error",
              "Description": "Error for setting the active report rate",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "LedControl",
          "Value": 24,
          "Mandatory": "O",
          "Description": "Set operation of specified LED",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.LedControl",
              "Operator": "Operators.Set",
              "Description": "Led Control Command",
              "Fields": [
                {
                  "Name": "LedSelect",
                  "Type": "uint8",
                  "Enum": "LedSelector"
                },
                {
                  "Name": "ActionSelect",
                  "Type": "uint8",
                  "Enum": "ActionSelector"
                }
              ]
            }
          ]
        },
        {
          "Name": "BoseActivityRecognition",
          "Value": 25,
          "Mandatory": "O",
          "Description": "Bose-specific Activity start/end notifications.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BoseActivityRecognition",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Activity Recognition data, Bose-specific",
              "Fields": [
                {
                  "Name": "Position",
                  "Type": "uint8",
                  "Enum": "HeadphonePositions"
                }
              ]
            }
          ]
        },
        {
          "Name": "TAP",
          "Value": 26,
          "Mandatory": "O",
          "Description": "TAP commands and responses.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TAP",
              "Operator": "Operators.Get",
              "Alias": "MsgText.Command",
              "Description": "Used to send TAP commands to the hardware.",
              "Fields": [
                {
                  "Name": "Buffer",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The string of the TAP command."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TAP",
              "Operator": "Operators.Status",
              "Alias": "MsgText.Response",
              "Description": "TAP responses from the hardware.",
              "Fields": [
                {
                  "Name": "Buffer",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The string of the TAP command response."
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornBiquadAccess",
          "Value": 27,
          "Mandatory": "O",
          "Description": "Access to coefficients organized by a single filter",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornBiquadAccess",
              "Operator": "Operators.Get",
              "Description": "Biquad Access Get Request",
              "Fields": [
                {
                  "Name": "acorn_select",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "bank_select",
                  "Type": "uint8",
                  "Enum": "BankSelector"
                },
                {
                  "Name": "biquad_sequence_num",
                  "Type": "uint16",
                  "Description": "biquad_sequence_num"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornBiquadAccess",
              "Operator": "Operators.Set",
              "Description": "Biquad Access Set Request",
              "Fields": [
                {
                  "Name": "acorn_select",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "bank_select",
                  "Type": "uint8",
                  "Enum": "BankSelector"
                },
                {
                  "Name": "biquad_sequence_num",
                  "Type": "uint16",
                  "Description": "biquad_sequence_num"
                },
                {
                  "Name": "coeff_values",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "coeff_values"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornBiquadAccess",
              "Operator": "Operators.Status",
              "Description": "Biquad Access Status Response",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "GeneralConfig",
          "Value": 28,
          "Mandatory": "O",
          "Description": "Access to general system configuration information",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GeneralConfig",
              "Operator": "Operators.Get",
              "Description": "General Config Get Request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GeneralConfig",
              "Operator": "Operators.Status",
              "Description": "General Config Status Response",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint32",
                  "Description": "Data",
                  "Bitfields": [
                    {
                      "Name": "UseHardcodedAcorn",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unused",
                      "NumBits": 31,
                      "Description": "Unused bits"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornCommentRead",
          "Value": 29,
          "Mandatory": "O",
          "Description": "Read comment field (metadata) from Acorn image",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCommentRead",
              "Operator": "Operators.Get",
              "Description": "Request Comment lenght",
              "Fields": [
                {
                  "Name": "AcornTarget",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCommentRead",
              "Operator": "Operators.Status",
              "Description": "Response with Comment lenght",
              "Fields": [
                {
                  "Name": "AcornTarget",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "CommentLength",
                  "Type": "uint16"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCommentRead",
              "Operator": "Operators.Start",
              "Description": "Begin request to read Comment",
              "Fields": [
                {
                  "Name": "AcornTarget",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCommentRead",
              "Operator": "Operators.Processing",
              "Description": "Responses to start request",
              "Fields": [
                {
                  "Name": "AcornTarget",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "BufferLength",
                  "Type": "uint16"
                },
                {
                  "Name": "DataBuffer",
                  "Type": "uint8",
                  "Count": 64,
                  "Description": "Comment data"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornCommentRead",
              "Operator": "Operators.Result",
              "Description": "End of processing response",
              "Fields": [
                {
                  "Name": "AcornTarget",
                  "Type": "uint8",
                  "Enum": "AcornSelector"
                },
                {
                  "Name": "BufferLength",
                  "Type": "uint16"
                }
              ]
            }
          ]
        },
        {
          "Name": "GravityData",
          "Value": 30,
          "Mandatory": "O",
          "Description": "Raw Gravity Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GravityData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Gravity data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X axis"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y axis"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z axis"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status",
                  "Enum": "SensorHubStatus"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint32",
                  "Description": "Validity time of data, in ticks of 32kHz clock",
                  "Scale": 0.00003125,
                  "Units": "seconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GravityData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Gravity data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GravityData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Gravity data query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornBiquadFq",
          "Value": 31,
          "Mandatory": "O",
          "Description": "Calc and Read BiquadFq Coefficients",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornBiquadFq",
              "Operator": "Operators.Get",
              "Description": "Biquad Fq Calculation Request",
              "Fields": [
                {
                  "Name": "zf",
                  "Type": "float32",
                  "Description": "Zf"
                },
                {
                  "Name": "zq",
                  "Type": "float32",
                  "Description": "Zq"
                },
                {
                  "Name": "pf",
                  "Type": "float32",
                  "Description": "Pf"
                },
                {
                  "Name": "pq",
                  "Type": "float32",
                  "Description": "Pq"
                },
                {
                  "Name": "fs",
                  "Type": "float32",
                  "Description": "Fs (sampling frequency)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornBiquadFq",
              "Operator": "Operators.Status",
              "Description": "Biquad Fq Calculated Data",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "int32",
                  "Count": 6,
                  "Description": "Calculated biquad coefficients in 5.27 format"
                }
              ]
            }
          ]
        },
        {
          "Name": "AcornFastBiquadFq",
          "Value": 32,
          "Mandatory": "O",
          "Description": "Calc and Read FastBiquadFq Coefficients",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornFastBiquadFq",
              "Operator": "Operators.Get",
              "Description": "Fast Biquad Fq Calculation Request",
              "Fields": [
                {
                  "Name": "zf",
                  "Type": "float32",
                  "Description": "Zf"
                },
                {
                  "Name": "zq",
                  "Type": "float32",
                  "Description": "Zq"
                },
                {
                  "Name": "pf",
                  "Type": "float32",
                  "Description": "Pf"
                },
                {
                  "Name": "pq",
                  "Type": "float32",
                  "Description": "Pq"
                },
                {
                  "Name": "fs",
                  "Type": "float32",
                  "Description": "Fs (sampling frequency)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AcornFastBiquadFq",
              "Operator": "Operators.Status",
              "Description": "Fast Biquad Fq Calculated Data",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "int32",
                  "Count": 6,
                  "Description": "Calculated biquad coefficients in 5.27 format"
                }
              ]
            }
          ]
        },
        {
          "Name": "CapTouchDeltas",
          "Value": 33,
          "Mandatory": "O",
          "Description": "Capacitive Touch Sensor Delta values",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchDeltas",
              "Operator": "Operators.Set",
              "Description": "Enable/Disable data collection from the delta values",
              "Fields": [
                {
                  "Name": "EnableDC",
                  "Type": "uint8",
                  "Enum": "CollectDataControl",
                  "Description": "Enable/Disable data collection"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchDeltas",
              "Operator": "Operators.Status",
              "Description": "Capacitive Touch Sensor Delta values",
              "Fields": [
                {
                  "Name": "DeltaValue03",
                  "Type": "int16",
                  "Description": "Delta value for row 0 column 3"
                },
                {
                  "Name": "DeltaValue05",
                  "Type": "int16",
                  "Description": "Delta value for row 0 column 5"
                },
                {
                  "Name": "DeltaValue12",
                  "Type": "int16",
                  "Description": "Delta value for row 1 column 2"
                },
                {
                  "Name": "DeltaValue13",
                  "Type": "int16",
                  "Description": "Delta value for row 1 column 3"
                },
                {
                  "Name": "DeltaValue15",
                  "Type": "int16",
                  "Description": "Delta value for row 1 column 5"
                },
                {
                  "Name": "DeltaValue16",
                  "Type": "int16",
                  "Description": "Delta value for row 1 column 6"
                },
                {
                  "Name": "DeltaValue21",
                  "Type": "int16",
                  "Description": "Delta value for row 2 column 1"
                },
                {
                  "Name": "DeltaValue22",
                  "Type": "int16",
                  "Description": "Delta value for row 2 column 2"
                },
                {
                  "Name": "DeltaValue23",
                  "Type": "int16",
                  "Description": "Delta value for row 2 column 3"
                },
                {
                  "Name": "DeltaValue25",
                  "Type": "int16",
                  "Description": "Delta value for row 2 column 5"
                },
                {
                  "Name": "DeltaValue26",
                  "Type": "int16",
                  "Description": "Delta value for row 2 column 6"
                },
                {
                  "Name": "DeltaValue27",
                  "Type": "int16",
                  "Description": "Delta value for row 2 column 7"
                },
                {
                  "Name": "DeltaValue30",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 0"
                },
                {
                  "Name": "DeltaValue31",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 1"
                },
                {
                  "Name": "DeltaValue32",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 2"
                },
                {
                  "Name": "DeltaValue33",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 3"
                },
                {
                  "Name": "DeltaValue35",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 5"
                },
                {
                  "Name": "DeltaValue36",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 6"
                },
                {
                  "Name": "DeltaValue37",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 7"
                },
                {
                  "Name": "DeltaValue38",
                  "Type": "int16",
                  "Description": "Delta value for row 3 column 8"
                },
                {
                  "Name": "DeltaValue40",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 0"
                },
                {
                  "Name": "DeltaValue41",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 1"
                },
                {
                  "Name": "DeltaValue42",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 2"
                },
                {
                  "Name": "DeltaValue43",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 3"
                },
                {
                  "Name": "DeltaValue45",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 5"
                },
                {
                  "Name": "DeltaValue46",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 6"
                },
                {
                  "Name": "DeltaValue47",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 7"
                },
                {
                  "Name": "DeltaValue48",
                  "Type": "int16",
                  "Description": "Delta value for row 4 column 8"
                },
                {
                  "Name": "DeltaValue50",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 0"
                },
                {
                  "Name": "DeltaValue51",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 1"
                },
                {
                  "Name": "DeltaValue52",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 2"
                },
                {
                  "Name": "DeltaValue53",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 3"
                },
                {
                  "Name": "DeltaValue55",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 5"
                },
                {
                  "Name": "DeltaValue56",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 6"
                },
                {
                  "Name": "DeltaValue57",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 7"
                },
                {
                  "Name": "DeltaValue58",
                  "Type": "int16",
                  "Description": "Delta value for row 5 column 8"
                },
                {
                  "Name": "DeltaValue61",
                  "Type": "int16",
                  "Description": "Delta value for row 6 column 1"
                },
                {
                  "Name": "DeltaValue62",
                  "Type": "int16",
                  "Description": "Delta value for row 6 column 2"
                },
                {
                  "Name": "DeltaValue63",
                  "Type": "int16",
                  "Description": "Delta value for row 6 column 3"
                },
                {
                  "Name": "DeltaValue65",
                  "Type": "int16",
                  "Description": "Delta value for row 6 column 5"
                },
                {
                  "Name": "DeltaValue66",
                  "Type": "int16",
                  "Description": "Delta value for row 6 column 6"
                },
                {
                  "Name": "DeltaValue67",
                  "Type": "int16",
                  "Description": "Delta value for row 6 column 7"
                },
                {
                  "Name": "DeltaValue72",
                  "Type": "int16",
                  "Description": "Delta value for row 7 column 2"
                },
                {
                  "Name": "DeltaValue73",
                  "Type": "int16",
                  "Description": "Delta value for row 7 column 3"
                },
                {
                  "Name": "DeltaValue75",
                  "Type": "int16",
                  "Description": "Delta value for row 7 column 5"
                },
                {
                  "Name": "DeltaValue76",
                  "Type": "int16",
                  "Description": "Delta value for row 7 column 6"
                },
                {
                  "Name": "DeltaValue83",
                  "Type": "int16",
                  "Description": "Delta value for row 8 column 3"
                },
                {
                  "Name": "DeltaValue85",
                  "Type": "int16",
                  "Description": "Delta value for row 8 column 5"
                }
              ]
            }
          ]
        },
        {
          "Name": "CapTouchProxTouch",
          "Value": 34,
          "Mandatory": "O",
          "Description": "Capacitive Touch Sensor Proximity and Touch values",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchProxTouch",
              "Operator": "Operators.Set",
              "Description": "Enable/Disable data collection from Proximity and Touch status values",
              "Fields": [
                {
                  "Name": "EnableDC",
                  "Type": "uint8",
                  "Enum": "CollectDataControl",
                  "Description": "Enable/Disable data collection"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.CapTouchProxTouch",
              "Operator": "Operators.Status",
              "Description": "Capacitive Touch Sensor Proximity and Touch status values",
              "Fields": [
                {
                  "Name": "SystemInfo0",
                  "Type": "uint8",
                  "Description": "System Info 0 register"
                },
                {
                  "Name": "SystemInfo1",
                  "Type": "uint8",
                  "Description": "System Info 1 register",
                  "Bitfields": [
                    {
                      "Name": "TpMovement",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Activity or movement on trackpad status"
                    },
                    {
                      "Name": "PalmDetect",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Palm detect status"
                    },
                    {
                      "Name": "TooManyFingers",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Total finger status"
                    },
                    {
                      "Name": "RrMissed",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "SwitchState",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "SnapToggle",
                      "NumBits": 1,
                      "Description": null
                    },
                    {
                      "Name": "Unused",
                      "NumBits": 2,
                      "Description": null
                    }
                  ]
                },
                {
                  "Name": "ProximityStatus0",
                  "Type": "uint8",
                  "Description": "Proximity status for row 0"
                },
                {
                  "Name": "ProximityStatus1",
                  "Type": "uint8",
                  "Description": "Proximity status for row 1"
                },
                {
                  "Name": "ProximityStatus2",
                  "Type": "uint8",
                  "Description": "Proximity status for row 2"
                },
                {
                  "Name": "ProximityStatus3",
                  "Type": "uint8",
                  "Description": "Proximity status for row 3"
                },
                {
                  "Name": "ProximityStatus4",
                  "Type": "uint8",
                  "Description": "Proximity status for row 4"
                },
                {
                  "Name": "ProximityStatus5",
                  "Type": "uint8",
                  "Description": "Proximity status for row 5"
                },
                {
                  "Name": "ProximityStatus6",
                  "Type": "uint8",
                  "Description": "Proximity status for row 6"
                },
                {
                  "Name": "ProximityStatus7",
                  "Type": "uint8",
                  "Description": "Proximity status for row 7"
                },
                {
                  "Name": "ProximityStatus8",
                  "Type": "uint8",
                  "Description": "Proximity status for row 8"
                },
                {
                  "Name": "TouchStatus0",
                  "Type": "uint8",
                  "Description": "Touch status for row 0"
                },
                {
                  "Name": "TouchStatus1",
                  "Type": "uint8",
                  "Description": "Touch status for row 1"
                },
                {
                  "Name": "TouchStatus2",
                  "Type": "uint8",
                  "Description": "Touch status for row 2"
                },
                {
                  "Name": "TouchStatus3",
                  "Type": "uint8",
                  "Description": "Touch status for row 3"
                },
                {
                  "Name": "TouchStatus4",
                  "Type": "uint8",
                  "Description": "Touch status for row 4"
                },
                {
                  "Name": "TouchStatus5",
                  "Type": "uint8",
                  "Description": "Touch status for row 5"
                },
                {
                  "Name": "TouchStatus6",
                  "Type": "uint8",
                  "Description": "Touch status for row 6"
                },
                {
                  "Name": "TouchStatus7",
                  "Type": "uint8",
                  "Description": "Touch status for row 7"
                },
                {
                  "Name": "TouchStatus8",
                  "Type": "uint8",
                  "Description": "Touch status for row 8"
                }
              ]
            }
          ]
        },
        {
          "Name": "RotationVectorData",
          "Value": 35,
          "Mandatory": "O",
          "Description": "Rotation Vector Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.RotationVectorData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Rotation Vector data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z"
                },
                {
                  "Name": "W",
                  "Type": "int16",
                  "Description": "W"
                },
                {
                  "Name": "Accuracy",
                  "Type": "int16",
                  "Description": "Estimated Accuracy"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.RotationVectorData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Rotation Vector data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.RotationVectorData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Rotation Vector query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "MagnetometerData",
          "Value": 36,
          "Mandatory": "O",
          "Description": "Raw Magnetometer Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.MagnetometerData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Magnetometer data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X axis"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y axis"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z axis"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status",
                  "Enum": "SensorHubStatus"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.MagnetometerData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Magnetometer data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.MagnetometerData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Magnetometer query result",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "OrientationData",
          "Value": 37,
          "Mandatory": "O",
          "Description": "Orientation Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.OrientationData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Orientation Euler Angle",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X axis"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y axis"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z axis"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status",
                  "Enum": "SensorHubStatus"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.OrientationData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Orientation data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.OrientationData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Orientation query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "LoadSensorHub",
          "Value": 38,
          "Mandatory": "O",
          "Description": "Command to load the bosch sensor hub",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.LoadSensorHub",
              "Operator": "Operators.Set",
              "Description": "Bosch Sensor Hub Load firmware command",
              "Fields": [
                {
                  "Name": "FirmwarePatchOption",
                  "Type": "uint8",
                  "Enum": "FirmwarePatchChoice"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.LoadSensorHub",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Load firmware status",
              "Fields": [
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Enum": "FirmwareLoadStatus"
                },
                {
                  "Name": "InterruptStatusTimeoutCount",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "RegisterWriteFailedCount",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "TimeoutWaitingForAckCount",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "FifoReadFailedCount",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "SensorEnableErrorCount",
                  "Type": "uint8",
                  "Description": null
                },
                {
                  "Name": "ReadRegisterFailedCount",
                  "Type": "uint8",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "MagnetometerUncalData",
          "Value": 39,
          "Mandatory": "O",
          "Description": "Raw Uncalibrated Magnetometer Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.MagnetometerUncalData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Magnetometer data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X axis"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y axis"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z axis"
                },
                {
                  "Name": "XBias",
                  "Type": "int16",
                  "Description": "X axis bias"
                },
                {
                  "Name": "YBias",
                  "Type": "int16",
                  "Description": "Y axis bias"
                },
                {
                  "Name": "ZBias",
                  "Type": "int16",
                  "Description": "Z axis bias"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Status",
                  "Enum": "SensorHubStatus"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.MagnetometerUncalData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Magnetometer data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.MagnetometerUncalData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Magnetometer query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "GameRotationVectorData",
          "Value": 40,
          "Mandatory": "O",
          "Description": "Game Rotation Vector Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GameRotationVectorData",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Game Rotation Vector data",
              "Fields": [
                {
                  "Name": "X",
                  "Type": "int16",
                  "Description": "X"
                },
                {
                  "Name": "Y",
                  "Type": "int16",
                  "Description": "Y"
                },
                {
                  "Name": "Z",
                  "Type": "int16",
                  "Description": "Z"
                },
                {
                  "Name": "W",
                  "Type": "int16",
                  "Description": "W"
                },
                {
                  "Name": "Accuracy",
                  "Type": "int16",
                  "Description": "Estimated Accuracy"
                },
                {
                  "Name": "Timestamp",
                  "Type": "uint16",
                  "Description": "Validity time of data, in ticks milliseconds",
                  "Units": "milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GameRotationVectorData",
              "Operator": "Operators.SetGet",
              "Description": "Bosch Sensor Hub Game Rotation Vector data request",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GameRotationVectorData",
              "Operator": "Operators.Result",
              "Description": "Bosch Sensor Hub Game Rotation Vector query response",
              "Fields": [
                {
                  "Name": "Rate",
                  "Type": "int16",
                  "Units": "Hz",
                  "Description": "Report rate"
                }
              ]
            }
          ]
        },
        {
          "Name": "SoftIronCalibration",
          "Value": 41,
          "Mandatory": "O",
          "Description": "Soft Iron Calibration matrix for magnetometer",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SoftIronCalibration",
              "Operator": "Operators.Set",
              "Description": "Bosch Sensor Hub Soft Iron Calibration Matrix",
              "Fields": [
                {
                  "Name": "Matrix",
                  "Type": "float32",
                  "Count": 9,
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SoftIronCalibration",
              "Operator": "Operators.Get",
              "Description": "Bosch Sensor Hub Magnetometer data request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SoftIronCalibration",
              "Operator": "Operators.Status",
              "Description": "Bosch Sensor Hub Soft Iron Calibration Matrix",
              "Fields": [
                {
                  "Name": "Matrix",
                  "Type": "float32",
                  "Count": 9,
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "InterruptOut",
          "Value": 42,
          "Mandatory": "O",
          "Description": "Interrupt out",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.InterruptOut",
              "Operator": "Operators.Set",
              "Description": "Interrupt out"
            }
          ]
        },
        {
          "Name": "BdspMemAccess",
          "Value": 43,
          "Mandatory": "O",
          "Description": "Read and Write 32bit Ints to BDSP Memmory",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BdspMemAccess",
              "Operator": "Operators.Get",
              "Description": "Mem address to read, count of ints to read",
              "Fields": [
                {
                  "Name": "address",
                  "Type": "uint32",
                  "Description": "Address of first int to read"
                },
                {
                  "Name": "count",
                  "Type": "uint8",
                  "Max": 12,
                  "Description": "Number of ints to read"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BdspMemAccess",
              "Operator": "Operators.Set",
              "Description": "Mem Write data",
              "Fields": [
                {
                  "Name": "address",
                  "Type": "uint32",
                  "Description": "Address of first int to write"
                },
                {
                  "Name": "count",
                  "Type": "uint8",
                  "Max": 12,
                  "Description": "Number of ints to write"
                },
                {
                  "Name": "write_values",
                  "Type": "int32",
                  "Count": 12,
                  "Description": "Values to be written"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BdspMemAccess",
              "Operator": "Operators.Status",
              "Description": "Register read data",
              "Fields": [
                {
                  "Name": "count",
                  "Type": "uint8",
                  "Max": 12,
                  "Description": "Count of valid return values"
                },
                {
                  "Name": "values_read",
                  "Type": "int32",
                  "Count": 12,
                  "Description": "Values returned per get command"
                }
              ]
            }
          ]
        },
        {
          "Name": "BdspInfo",
          "Value": 44,
          "Mandatory": "O",
          "Description": "Get BDSP Xmodel Master address",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BdspInfo",
              "Operator": "Operators.Get",
              "Description": "Request info status message",
              "Fields": [
                {
                  "Name": "ignored",
                  "Type": "uint8"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BdspInfo",
              "Operator": "Operators.Status",
              "Description": "Address for Xmodel Master",
              "Fields": [
                {
                  "Name": "XmodelMasterAddress",
                  "Type": "uint32",
                  "Description": "Address of Xmodel Master"
                }
              ]
            }
          ]
        },
        {
          "Name": "ClockTime",
          "Value": 45,
          "Mandatory": "O",
          "Description": "Get/Set Date and Time",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.ClockTime",
              "Operator": "Operators.Set",
              "Description": "Get date and time",
              "Fields": [
                {
                  "Name": "weekDay",
                  "Type": "uint8",
                  "Description": "1 - 7 for Mon - Sun"
                },
                {
                  "Name": "month",
                  "Type": "uint8",
                  "Description": "1 - 12 for Jan - Dec"
                },
                {
                  "Name": "date",
                  "Type": "uint8",
                  "Description": "1 - 31 for day of month"
                },
                {
                  "Name": "year",
                  "Type": "uint8",
                  "Description": "00 - 99 for 2018 - 2117"
                },
                {
                  "Name": "hour",
                  "Type": "uint8",
                  "Description": "0 - 23 for 12am - 11pm"
                },
                {
                  "Name": "minute",
                  "Type": "uint8",
                  "Description": "0 - 59"
                },
                {
                  "Name": "second",
                  "Type": "uint8",
                  "Description": "0 - 59"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.ClockTime",
              "Operator": "Operators.Get",
              "Description": "Request Date and Time"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.ClockTime",
              "Operator": "Operators.Status",
              "Description": "Date and Time results from get",
              "Fields": [
                {
                  "Name": "weekDay",
                  "Type": "uint8",
                  "Description": "1 - 7 for Mon - Sun"
                },
                {
                  "Name": "month",
                  "Type": "uint8",
                  "Description": "1 - 12 for Jan - Dec"
                },
                {
                  "Name": "date",
                  "Type": "uint8",
                  "Description": "1 - 31 for day of month"
                },
                {
                  "Name": "year",
                  "Type": "uint8",
                  "Description": "00 - 99 for 2018 - 2117"
                },
                {
                  "Name": "hour",
                  "Type": "uint8",
                  "Description": "0 - 23 for 12am - 11pm"
                },
                {
                  "Name": "minute",
                  "Type": "uint8",
                  "Description": "0 - 59"
                },
                {
                  "Name": "second",
                  "Type": "uint8",
                  "Description": "0 - 59"
                }
              ]
            }
          ]
        },
        {
          "Name": "GpsPositionData",
          "Value": 46,
          "Mandatory": "O",
          "Description": "GPS Position Data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.GpsPositionData",
              "Operator": "Operators.Status",
              "Description": "Position data reported by a GPS receiver",
              "Fields": [
                {
                  "Name": "Lat",
                  "Type": "float64",
                  "Description": "Latitude associated with a location, in WGS84 refecence frame",
                  "Units": "degrees"
                },
                {
                  "Name": "Lon",
                  "Type": "float64",
                  "Description": "Longitude associated with a location, in WGS84 refecence frame",
                  "Units": "degrees"
                },
                {
                  "Name": "Height",
                  "Type": "float64",
                  "Description": "Height above WGS84 ellipsoid",
                  "Units": "meters"
                },
                {
                  "Name": "HAccuracy",
                  "Type": "uint16",
                  "Description": "Horizontal position estimated standard deviation",
                  "Units": "millimeters"
                },
                {
                  "Name": "VAccuracy",
                  "Type": "uint16",
                  "Description": "Vertical position estimated standard deviation",
                  "Units": "millimeters"
                },
                {
                  "Name": "Tow",
                  "Type": "uint32",
                  "Description": "GPS Time of Week, relative to the full GPS time",
                  "Units": "milliseconds"
                }
              ]
            }
          ]
        },
        {
          "Name": "SamplingRateControl",
          "Value": 47,
          "Mandatory": "O",
          "Description": "Set Sampling rate",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SamplingRateControl",
              "Operator": "Operators.Set",
              "Description": "Sampling rate control command",
              "Fields": [
                {
                  "Name": "ComponentSelect",
                  "Type": "uint8",
                  "Enum": "ComponentSelector"
                },
                {
                  "Name": "SamplingRateSelect",
                  "Type": "uint8",
                  "Enum": "SamplingRateSelector"
                }
              ]
            }
          ]
        },
        {
          "Name": "AlexaProtocol",
          "Value": 48,
          "Mandatory": "O",
          "Description": "Test/exercise Google Protocol Buffer decode, encode and message handling used with Alexa VPA",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AlexaProtocol",
              "Operator": "Operators.Start",
              "Description": "Test/exercise Google Protocol Buffer decode, encode and message handling used with Alexa VPA",
              "Fields": [
                {
                  "Name": "FunctionOption",
                  "Type": "uint8",
                  "Enum": "AlexaProtocolFunctionOption",
                  "Description": "Function option (1 thru 8)"
                },
                {
                  "Name": "FunctionInput",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 254,
                  "Description": "Input Octet(s)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AlexaProtocol",
              "Operator": "Operators.Result",
              "Description": "Function initiated"
            }
          ]
        },
        {
          "Name": "PeregrineSymbolicParam",
          "Value": 49,
          "Mandatory": "O",
          "Description": "Symbolic access to Peregrine data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineSymbolicParam",
              "Operator": "Operators.Get",
              "Description": "Symbolic access to Peregrine data",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the parameter to get"
                },
                {
                  "Name": "wordcnt",
                  "Type": "uint8",
                  "Max": 16,
                  "Description": "how many uint32s to get"
                },
                {
                  "Name": "offset",
                  "Type": "int16",
                  "Description": "offset word to start from"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineSymbolicParam",
              "Operator": "Operators.Set",
              "Description": "Symbolic access to Peregrine data",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the parameter to set"
                },
                {
                  "Name": "wordcnt",
                  "Type": "uint8",
                  "Max": 16,
                  "Description": "how many uint32s to set, 0 means autosize"
                },
                {
                  "Name": "offset",
                  "Type": "int16",
                  "Description": "offset word to start from"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 16,
                  "Description": "data (uint32)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineSymbolicParam",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine data",
              "Fields": [
                {
                  "Name": "length",
                  "Type": "uint8",
                  "Description": "Number of words in response."
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 16,
                  "Description": "data (uint32)"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineMemory",
          "Value": 50,
          "Mandatory": "O",
          "Description": "Raw read/write of Peregrine address space",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineMemory",
              "Operator": "Operators.Get",
              "Description": "Raw read/write of Peregrine address space",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "register_address",
                  "Type": "uint16",
                  "Description": "16-bit address"
                },
                {
                  "Name": "length",
                  "Type": "uint8",
                  "Max": 32,
                  "Description": "Byte count"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineMemory",
              "Operator": "Operators.Set",
              "Description": "Raw read/write of Peregrine address space",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "register_address",
                  "Type": "uint16",
                  "Description": "16-bit address"
                },
                {
                  "Name": "length",
                  "Type": "uint8",
                  "Max": 32,
                  "Description": "Byte count"
                },
                {
                  "Name": "register_value",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "value(s) to write"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineMemory",
              "Operator": "Operators.Status",
              "Description": "Raw read/write of Peregrine address space",
              "Fields": [
                {
                  "Name": "Data",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "Data"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPBq",
          "Value": 51,
          "Mandatory": "O",
          "Description": "Symbolic access to Peregrine FDSP Filter",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBq",
              "Operator": "Operators.Get",
              "Description": "Symbolic access to Peregrine FDSP Filter",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "biquad_num",
                  "Type": "uint8",
                  "Description": "Which biquad within the filter"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the filter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBq",
              "Operator": "Operators.Set",
              "Description": "Symbolic access to Peregrine FDSP Filter",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "biquad_num",
                  "Type": "uint8",
                  "Description": "Which biquad within the filter"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the filter"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Coefficient data, 5x 5.27 ints"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBq",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine FDSP Filter",
              "Fields": [
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Coefficient data, 5x 5.27 ints"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBq",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPLim",
          "Value": 52,
          "Mandatory": "O",
          "Description": "Symbolic access to Peregrine FDSP Limiter",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPLim",
              "Operator": "Operators.Get",
              "Description": "Symbolic access to Peregrine FDSP Limiter",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the limiter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPLim",
              "Operator": "Operators.Set",
              "Description": "Symbolic access to Peregrine FDSP Limiter",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the limiter"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPLim",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine FDSP Limiter",
              "Fields": [
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPLim",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPExp",
          "Value": 53,
          "Mandatory": "O",
          "Description": "Symbolic access to Peregrine FDSP Expander",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPExp",
              "Operator": "Operators.Get",
              "Description": "Symbolic access to Peregrine FDSP Expander",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Expander"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPExp",
              "Operator": "Operators.Set",
              "Description": "Symbolic access to Peregrine FDSP Expander",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Expander"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPExp",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine FDSP Expander",
              "Fields": [
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPExp",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPVol",
          "Value": 54,
          "Mandatory": "O",
          "Description": "Symbolic access to Peregrine FDSP Volume Block",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPVol",
              "Operator": "Operators.Get",
              "Description": "Symbolic access to Peregrine FDSP Volume Block",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Volume Block"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPVol",
              "Operator": "Operators.Set",
              "Description": "Symbolic access to Peregrine FDSP Volume Block",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Volume Block"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPVol",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine FDSP Volume Block",
              "Fields": [
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPVol",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPMix",
          "Value": 55,
          "Mandatory": "O",
          "Description": "Symbolic access to Peregrine FDSP Mixer",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPMix",
              "Operator": "Operators.Get",
              "Description": "Symbolic access to Peregrine FDSP Mixer",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Mixer"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPMix",
              "Operator": "Operators.Set",
              "Description": "Symbolic access to Peregrine FDSP Mixer",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Mixer"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPMix",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine FDSP Mixer",
              "Fields": [
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPMix",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPBank",
          "Value": 56,
          "Mandatory": "O",
          "Description": "Access to FDSP Current Bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBank",
              "Operator": "Operators.Get",
              "Description": "Access to FDSP Current Bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBank",
              "Operator": "Operators.Set",
              "Description": "Access to FDSP Current Bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank to activate"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBank",
              "Operator": "Operators.Status",
              "Description": "Access to FDSP Current Bank",
              "Fields": [
                {
                  "Name": "bank_num",
                  "Type": "uint8",
                  "Description": "Which bank was active"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBank",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPBankCopy",
          "Value": 57,
          "Mandatory": "O",
          "Description": "Copy from one FDSP bank to another",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBankCopy",
              "Operator": "Operators.Set",
              "Description": "Copy from one FDSP bank to another",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "dest_bank",
                  "Type": "uint8",
                  "Description": "Destination Bank"
                },
                {
                  "Name": "source_bank",
                  "Type": "uint8",
                  "Description": "Source Bank"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBankCopy",
              "Operator": "Operators.Status",
              "Description": "Copy from one FDSP bank to another"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPBankCopy",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPSafeLoadBq",
          "Value": 58,
          "Mandatory": "O",
          "Description": "Safe access to Peregrine FDSP filter param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadBq",
              "Operator": "Operators.Set",
              "Description": "Safe access to Peregrine FDSP filter param in the active bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "biquad_num",
                  "Type": "uint8",
                  "Description": "Which biquad within the filter"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the filter"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Coefficient data, 5x 5.27 ints"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadBq",
              "Operator": "Operators.Status",
              "Description": "Safe access to Peregrine FDSP filter param in the active bank"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadBq",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPSafeLoadLim",
          "Value": 59,
          "Mandatory": "O",
          "Description": "Safe access to Peregrine FDSP limiter param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadLim",
              "Operator": "Operators.Set",
              "Description": "Safe access to Peregrine FDSP limiter param in the active bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the limiter"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadLim",
              "Operator": "Operators.Status",
              "Description": "Safe access to Peregrine FDSP limiter param in the active bank"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadLim",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPSafeLoadExp",
          "Value": 60,
          "Mandatory": "O",
          "Description": "Safe access to Peregrine FDSP expander param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadExp",
              "Operator": "Operators.Set",
              "Description": "Safe access to Peregrine FDSP expander param in the active bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the expander"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadExp",
              "Operator": "Operators.Status",
              "Description": "Safe access to Peregrine FDSP expander param in the active bank"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadExp",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPSafeLoadVol",
          "Value": 61,
          "Mandatory": "O",
          "Description": "Safe access to Peregrine FDSP volume block param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadVol",
              "Operator": "Operators.Set",
              "Description": "Safe access to Peregrine FDSP volume block param in the active bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the volume block"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadVol",
              "Operator": "Operators.Status",
              "Description": "Safe access to Peregrine FDSP volume block param in the active bank"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadVol",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineFDSPSafeLoadMix",
          "Value": 62,
          "Mandatory": "O",
          "Description": "Safe access to Peregrine FDSP mixer param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadMix",
              "Operator": "Operators.Set",
              "Description": "Safe access to Peregrine FDSP mixer param in the active bank",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the mixer"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "Parameter data, 5x uint32"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadMix",
              "Operator": "Operators.Status",
              "Description": "Safe access to Peregrine FDSP mixer param in the active bank"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineFDSPSafeLoadMix",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "PeregrineSDSPSafeLoad",
          "Value": 63,
          "Mandatory": "O",
          "Description": "Safe load a Peregrine SDSP symbol",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineSDSPSafeLoad",
              "Operator": "Operators.Set",
              "Description": "Safe load a Peregrine SDSP symbol",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of Peregrine to access"
                },
                {
                  "Name": "symbolic_name",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the symbol"
                },
                {
                  "Name": "wordcnt",
                  "Type": "uint8",
                  "Max": 5,
                  "Description": "Word count"
                },
                {
                  "Name": "offset",
                  "Type": "int16",
                  "Description": "offset word to start from"
                },
                {
                  "Name": "data",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "data, 1 to 5 uint32s"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineSDSPSafeLoad",
              "Operator": "Operators.Status",
              "Description": "Safe load a Peregrine SDSP symbol"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineSDSPSafeLoad",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "TaylorRequest",
          "Value": 64,
          "Mandatory": "O",
          "Description": "Define and send the Taylor HTTP request to FrontDoor",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TaylorRequest",
              "Operator": "Operators.Set",
              "Description": "Sends the full JSON payload to the pass-through proxy",
              "VariableLength": true,
              "Fields": [
                {
                  "Name": "TaySeqNo",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Rolling Sequence Number"
                },
                {
                  "Name": "TaylorPayload",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Payload data, variable length"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TaylorRequest",
              "Operator": "Operators.Start",
              "Description": "Tell the pass-through proxy to send the request to FrontDoor. Empty start command indicates end of JSON payload transfer."
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TaylorRequest",
              "Operator": "Operators.Status",
              "Description": "Sends the full JSON payload to the client from the pass-through proxy",
              "VariableLength": true,
              "Fields": [
                {
                  "Name": "TaySeqNo",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Rolling Sequence Number"
                },
                {
                  "Name": "FrontDoorPayload",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Description": "Payload response data from FrontDoor, variable length"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TaylorRequest",
              "Operator": "Operators.Result",
              "Description": "Tells the client that the payload transfer from the pass-through proxy is complete."
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.TaylorRequest",
              "Operator": "Operators.Processing",
              "Description": "Processing status during command execution"
            }
          ]
        },
        {
          "Name": "PeregrineInterrupt",
          "Value": 66,
          "Mandatory": "O",
          "Description": "cervelo ipc for peregrine interrupts",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.PeregrineInterrupt",
              "Operator": "Operators.Status",
              "Description": "cervelo ipc for peregrine interrupts",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "id of peregrine that has issued interrupt"
                }
              ]
            }
          ]
        },
        {
          "Name": "AudioInterrupt",
          "Value": 67,
          "Mandatory": "O",
          "Description": "cervelo ipc for audio interrupts",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AudioInterrupt",
              "Operator": "Operators.Status",
              "Description": "cervelo ipc for audio interrupts",
              "Fields": [
                {
                  "Name": "in1",
                  "Type": "uint32",
                  "Description": "Input sample ptr, port 1"
                },
                {
                  "Name": "out1",
                  "Type": "uint32",
                  "Description": "Output sample ptr, port 1"
                },
                {
                  "Name": "in2",
                  "Type": "uint32",
                  "Description": "Input sample ptr, port 2"
                },
                {
                  "Name": "out2",
                  "Type": "uint32",
                  "Description": "Output sample ptr, port 2"
                },
                {
                  "Name": "count",
                  "Type": "uint16",
                  "Descriptioon": "Sample count"
                }
              ]
            }
          ]
        },
        {
          "Name": "Algorithm",
          "Value": 68,
          "Mandatory": "O",
          "Description": "Access to a cervelo algorithm",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.Algorithm",
              "Operator": "Operators.Get",
              "Description": "Get data from a particular algorithm",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "Some algos may have duplicate managers running for each peregrine.  This is to id them individually."
                },
                {
                  "Name": "algorithm_name",
                  "Type": "uint8",
                  "Count": 32,
                  "Units": "ASCII",
                  "Description": "Null-terminated name of algorithm to get data from."
                },
                {
                  "Name": "parameter_name",
                  "Type": "uint8",
                  "Count": 32,
                  "Units": "ASCII",
                  "Description": "Null-terminated name of algo parameter to access"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.Algorithm",
              "Operator": "Operators.SetGet",
              "Description": "Symbolic access to Peregrine data",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "Some algos may have duplicate managers running for each peregrine.  This is to id them individually."
                },
                {
                  "Name": "algorithm_name",
                  "Type": "uint8",
                  "Count": 32,
                  "Units": "ASCII",
                  "Description": "Null-terminated name of algorithm to write data to."
                },
                {
                  "Name": "parameter_name",
                  "Type": "uint8",
                  "Count": 32,
                  "Units": "ASCII",
                  "Description": "Null-terminated name of algo parameter to access"
                },
                {
                  "Name": "bytecnt",
                  "Type": "uint8",
                  "Max": 64,
                  "Description": "how many bytes to write"
                },
                {
                  "Name": "data",
                  "Type": "uint8",
                  "Count": 64,
                  "Description": "data - meaning depends on target parameter."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.Algorithm",
              "Operator": "Operators.Status",
              "Description": "Symbolic access to Peregrine data",
              "Fields": [
                {
                  "Name": "peregrine_id",
                  "Type": "uint8",
                  "Description": "Some algos may have duplicate managers running for each peregrine.  This is to id them individually."
                },
                {
                  "Name": "algorithm_name",
                  "Type": "uint8",
                  "Count": 32,
                  "Units": "ASCII",
                  "Description": "Null-terminated name of algorithm."
                },
                {
                  "Name": "length",
                  "Type": "uint8",
                  "Description": "Number of bytes in response."
                },
                {
                  "Name": "data",
                  "Type": "uint8",
                  "Count": 64,
                  "Description": "data - meaning depends on target parameter."
                }
              ]
            }
          ]
        },
        {
          "Name": "BMAPRecorderStart",
          "Value": 69,
          "Mandatory": "O",
          "Description": "BMAP Recorder Start",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BMAPRecorderStart",
              "Operator": "Operators.Set",
              "Description": "BMAP Recorder Start",
              "Fields": [
                {
                  "Name": "BMAPRecorderStart",
                  "Type": "uint8",
                  "Description": "Dummy field"
                }
              ]
            }
          ]
        },
        {
          "Name": "BMAPRecorderStop",
          "Value": 70,
          "Mandatory": "O",
          "Description": "BMAP Recorder Stop",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BMAPRecorderStop",
              "Operator": "Operators.Set",
              "Description": "BMAP Recorder Stop",
              "Fields": [
                {
                  "Name": "BMAPRecorderStop",
                  "Type": "uint8",
                  "Description": "Dummy field"
                }
              ]
            }
          ]
        },
        {
          "Name": "BMAPReplay",
          "Value": 71,
          "Mandatory": "O",
          "Description": "BMAP Recorder replay",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BMAPReplay",
              "Operator": "Operators.Set",
              "Description": "BMAP Recorder replay",
              "Fields": [
                {
                  "Name": "BmapRecorderReplay",
                  "Type": "uint8",
                  "Description": "Dummy field"
                }
              ]
            }
          ]
        },
        {
          "Name": "BMAPRecorderAttach",
          "Value": 72,
          "Mandatory": "O",
          "Description": "BMAP Recorder Event attach",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.BMAPRecorderAttach",
              "Operator": "Operators.Set",
              "Description": "BMAP Recorder Event attach",
              "Fields": [
                {
                  "Name": "BMAPRecorderAttach",
                  "Type": "uint8",
                  "Description": "0 - No Event, 1 - Bootup"
                }
              ]
            }
          ]
        },
        {
          "Name": "Broadcast",
          "Value": 73,
          "Mandatory": "O",
          "Description": "Broadcast message from a cervelo algorithm",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.Broadcast",
              "Operator": "Operators.Get",
              "Description": "Get any pending broadcast messages from Cervelo",
              "Fields": [
                {
                  "Name": "ignored",
                  "Type": "uint8",
                  "Description": "Pypolycomm bug workaround, need at least one field"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.Broadcast",
              "Operator": "Operators.Status",
              "Description": "Broadcast message from Cervelo",
              "Fields": [
                {
                  "Name": "bytecnt",
                  "Type": "uint8",
                  "Description": "how many bytes of payload"
                },
                {
                  "Name": "data",
                  "Type": "uint8",
                  "Count": 16,
                  "Description": "payload of broadcast message"
                }
              ]
            }
          ]
        },
        {
          "Name": "UeLed",
          "Value": 74,
          "Mandatory": 0,
          "Description": "Stimulate UE response",
          "LongDescription": "Stimulates a UE LED response for test purposes",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.UeLed",
              "Operator": "Operators.Set",
              "Description": "Stimulates a UE LED response for test purposes",
              "VariableLength": false,
              "Fields": [
                {
                  "Name": "MasterStatusOld",
                  "Type": "int16",
                  "Count": 1,
                  "Description": "Sink state master is exiting"
                },
                {
                  "Name": "MasterStatusNew",
                  "Type": "int16",
                  "Count": 1,
                  "Description": "Sink state master is entering"
                },
                {
                  "Name": "Event",
                  "Type": "int8",
                  "Enum": "UeLedEvent",
                  "Count": 1,
                  "Description": "Event that just occurred, which the UE subsystem cares about"
                },
                {
                  "Name": "BudPhyStatus",
                  "Type": "int8",
                  "Enum": "UeBudPhysicalStatus",
                  "Count": 1,
                  "Description": "Location of buds"
                },
                {
                  "Name": "ChargeStatus",
                  "Type": "int8",
                  "Enum": "UeChargeStatus",
                  "Count": 1,
                  "Description": "Charging status"
                },
                {
                  "Name": "LidStatus",
                  "Type": "int8",
                  "Enum": "UeLidStatus",
                  "Count": 1,
                  "Description": "Lid status, for products with a charging case"
                },
                {
                  "Name": "BudOrientation",
                  "Type": "int8",
                  "Enum": "UeBudOrientation",
                  "Count": 1,
                  "Description": "Left or right"
                },
                {
                  "Name": "BattStatus",
                  "Type": "int8",
                  "Enum": "UeBatteryStatus",
                  "Count": 1,
                  "Description": "Battery statuses which the UE cares about"
                }
              ]
            }
          ]
        },
        {
          "Name": "SwindonDataLpuartTx",
          "Value": 75,
          "Mandatory": 0,
          "Description": "Capture Lpuart",
          "LongDescription": "LPUART Tx activity snooped and presented here",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SwindonDataLpuartTx",
              "Operator": "Operators.Status",
              "Description": "LP UART TX bus capture",
              "Fields": [
                {
                  "Name": "TimeStamp",
                  "Type": "uint32",
                  "Units": "HEX",
                  "Description": "TimeStamp 32 bits"
                },
                {
                  "Name": "Buffer",
                  "Type": "uint16",
                  "Count": 124,
                  "Units": "HEX",
                  "Description": "LPUART Tx Capture - 16 bits, MS - 8 bits = 0x10"
                }
              ]
            }
          ]
        },
        {
          "Name": "SwindonDataLpuartRx",
          "Value": 76,
          "Mandatory": 0,
          "Description": "Capture Lpuart",
          "LongDescription": "LPUART Rx activity snooped and presented here",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SwindonDataLpuartRx",
              "Operator": "Operators.Status",
              "Description": "LP UART RX bus capture",
              "Fields": [
                {
                  "Name": "TimeStamp",
                  "Type": "uint32",
                  "Units": "HEX",
                  "Description": "TimeStamp 32 bits"
                },
                {
                  "Name": "Buffer",
                  "Type": "uint16",
                  "Count": 124,
                  "Units": "HEX",
                  "Description": "LPUART Tx Capture - 16 bits, MS - 8 bits = 0x20"
                }
              ]
            }
          ]
        },
        {
          "Name": "SwindonDataI2C",
          "Value": 77,
          "Mandatory": 0,
          "Description": "Capture I2C",
          "LongDescription": "I2C activity snooped and presented here",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SwindonDataI2C",
              "Operator": "Operators.Status",
              "Description": "I2C bus capture",
              "Fields": [
                {
                  "Name": "TimeStamp",
                  "Type": "uint32",
                  "Units": "HEX",
                  "Description": "TimeStamp 32 bits"
                },
                {
                  "Name": "Buffer",
                  "Type": "uint16",
                  "Count": 124,
                  "Units": "HEX",
                  "Description": "I2C Capture - 16 bits, MS - 8 bits = 0x08 / 0x04 / 0x02 / 0x01"
                }
              ]
            }
          ]
        },
        {
          "Name": "AudioSampleTimingRefReset",
          "Value": 78,
          "Mandatory": 0,
          "Description": "Restart timing",
          "LongDescription": "Reset the audio Sample Timer to 0",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.AudioSampleTimingRefReset",
              "Operator": "Operators.Set",
              "Description": "Reset the Audio Sample timer to 0"
            }
          ]
        },
        {
          "Name": "SwindonSAISrcSelAndTimingRefSel",
          "Value": 79,
          "Mandatory": 0,
          "Description": "SAI src sel",
          "LongDescription": "Select the SAI source Peregrine Left / Right (Rx / Tx) and Timing Ref Enable / Disable",
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SwindonSAISrcSelAndTimingRefSel",
              "Operator": "Operators.Get",
              "Description": "Swindon Source Selector and Timing Refrence enable / Disable"
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SwindonSAISrcSelAndTimingRefSel",
              "Operator": "Operators.Set",
              "Description": "Swindon Source Selector and Timing Refrence enable / Disable",
              "Fields": [
                {
                  "Name": "SourceSelector",
                  "Type": "uint8",
                  "Enum": "SourceSelector"
                },
                {
                  "Name": "TimingRefrence",
                  "Type": "uint8",
                  "Enum": "TimingRefrence"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Experimental",
              "Function": "ExperimentalFunctions.SwindonSAISrcSelAndTimingRefSel",
              "Operator": "Operators.Status",
              "Description": "Swindon Source Selector and Timing Refrence enable / Disable results from get and Firmware Version",
              "Fields": [
                {
                  "Name": "SourceSelector",
                  "Type": "uint8",
                  "Enum": "SourceSelector"
                },
                {
                  "Name": "TimingRefrence",
                  "Type": "uint8",
                  "Enum": "TimingRefrence"
                },
                {
                  "Name": "Version",
                  "Type": "uint32",
                  "Units": "HEX",
                  "Description": "Version 32 bits"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Cloud",
      "Version": "1.1.0",
      "Mandatory": "O",
      "Description": "Cloud-connected product management",
      "Value": 20,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Cloud FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Cloud FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "Count": 60,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all cloud information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start command"
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned"
            }
          ]
        },
        {
          "Name": "Activate",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Activate the product on a cloud service",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.Activate",
              "Operator": "Operators.Get",
              "Description": "Determine the activation status."
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.Activate",
              "Operator": "Operators.Status",
              "Description": "The activation status of the product",
              "Fields": [
                {
                  "Name": "ProductActivationStatus",
                  "Description": "Activation status of the product",
                  "Type": "uint8",
                  "Enum": "CloudActivationStates"
                }
              ]
            }
          ]
        },
        {
          "Name": "Synchronize",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Synchronize product settings with a cloud service",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.Synchronize",
              "Operator": "Operators.Start",
              "Description": "Tells the product to synchronize its state with a cloud service",
              "Fields": [
                {
                  "Name": "Properties",
                  "Type": "uint8",
                  "Units": "Bitfield",
                  "VariableLength": true,
                  "Bitfield": "CloudProperties",
                  "Description": "Bitfield of properties being synchronized",
                  "LongPostDescription": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.Synchronize",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge Start message"
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.Synchronize",
              "Operator": "Operators.Result",
              "Type": "Response",
              "Description": "Sent when the synchronization process has completed.",
              "Fields": [
                {
                  "Name": "Properties",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Enum": "CloudProperties",
                  "Description": "Variable length bitfield of properties that were synchronized"
                }
              ]
            }
          ]
        },
        {
          "Name": "UpdateState",
          "Value": 4,
          "Mandatory": "M",
          "Description": "Used to get the current update state",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.UpdateState",
              "Operator": "Operators.Get",
              "Description": null
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.UpdateState",
              "Operator": "Operators.Status",
              "Description": "Current state of the software update state machine",
              "Fields": [
                {
                  "Name": "currentFwuState",
                  "Type": "uint8",
                  "Enum": "CloudUpdateStates",
                  "Description": "Current FWU state of device"
                },
                {
                  "Name": "deadline",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "Unix timestamp of deadline (32-bit unix epoch)"
                },
                {
                  "Name": "Container",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "percent",
                      "Description": "Percent complete (0 to 100)",
                      "NumBits": 7
                    },
                    {
                      "Name": "deferrable",
                      "Description": "Is update deferable (0 == not deferrable, 1 == deferrable)",
                      "NumBits": 1
                    }
                  ]
                },
                {
                  "Name": "availableVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "Version that is available to update to (semantic versioning)"
                }
              ]
            }
          ]
        },
        {
          "Name": "InstallUpdate",
          "Value": 5,
          "Mandatory": "M",
          "Description": "Instruct a cloud-connected product to perform a software update",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.InstallUpdate",
              "Operator": "Operators.Start",
              "Description": "Command to start process of applying update to product",
              "Fields": [
                {
                  "Name": "updateDelay",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "Number of seconds update will be delayed (32-bit unsigned)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.InstallUpdate",
              "Operator": "Operators.Processing",
              "Description": "Acknowledgement from product that process to apply update to product has successfully started. This is a broadcast message to all connected devices."
            },
            {
              "FunctionBlock": "FunctionBlocks.Cloud",
              "Function": "CloudFunctions.InstallUpdate",
              "Operator": "Operators.Result",
              "Description": null,
              "Fields": [
                {
                  "Name": "updateDelay",
                  "Type": "uint8",
                  "Count": 4,
                  "Description": "Number of seconds update will be delayed (32-bit unsigned)"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "AugmentedReality",
      "Version": "1.1.0",
      "Mandatory": "O",
      "Description": "Features that enable augmented reality experiences",
      "Value": 21,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Augmented Reality FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "AugmentedReality FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "Count": 60,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all AR function block information.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start command"
            },
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned"
            }
          ]
        },
        {
          "Name": "ARStatus",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Indicates Bose AR Service status.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.ARStatus",
              "Operator": "Operators.Get",
              "Description": "Determine the AR connection status."
            },
            {
              "FunctionBlock": "FunctionBlocks.AugmentedReality",
              "Function": "AugmentedRealityFunctions.ARStatus",
              "Operator": "Operators.Status",
              "Description": "The Bose AR Service status.",
              "Fields": [
                {
                  "Name": "ARStatus",
                  "Type": "uint8",
                  "Description": "Bitfield of Bose AR Service status.",
                  "Bitfields": [
                    {
                      "Name": "ARStatusConnected",
                      "NumBits": 1,
                      "Description": "0 - no clients connected, 1 - client(s) connected"
                    },
                    {
                      "Name": "ARStatusStreaming",
                      "NumBits": 1,
                      "Description": "0 - no AR data streaming, 1 - AR data streaming"
                    },
                    {
                      "Name": "ARStatusUnused",
                      "NumBits": 6,
                      "Description": "Unused bits"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Print",
      "Version": "1.1.0",
      "Mandatory": "O",
      "Description": "Debug printing via logprint interaction",
      "Value": 22,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Info",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Print Function Block Info Status Response",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Retrieves all supported Print FBlock functions",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message."
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all supported functions returned."
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.GetAll",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.GetAll",
              "Operator": "Operators.Status",
              "Description": "Bitfield of supported functions."
            }
          ]
        },
        {
          "Name": "Output",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Prints through BMAP are sent through this function",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Output",
              "Operator": "Operators.Error",
              "Description": "Output error occurs in Output function",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Output",
              "Operator": "Operators.Result",
              "Description": "Output Print",
              "Fields": [
                {
                  "Name": "Message",
                  "Type": "uint8",
                  "Units": "ASCII",
                  "Count": 255,
                  "VariableLength": true,
                  "Description": "Asynchronous debug string"
                }
              ]
            }
          ]
        },
        {
          "Name": "Bind",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Bind a print transport and print client together",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Bind",
              "Operator": "Operators.SetGet",
              "Description": "Bind request",
              "Fields": [
                {
                  "Name": "BindPackage",
                  "Type": "uint8",
                  "Count": 255,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "String used to address client and transport for logprint, using comma delimiter between them"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Bind",
              "Operator": "Operators.Error",
              "Description": "Error in binding",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Bind",
              "Operator": "Operators.Status",
              "Description": "Confirmation of successful bind"
            }
          ]
        },
        {
          "Name": "Unbind",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Unbind a print transport and print client",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Unbind",
              "Operator": "Operators.SetGet",
              "Description": "Unbind request",
              "Fields": [
                {
                  "Name": "UnbindPackage",
                  "Type": "uint8",
                  "Count": 255,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "String used to address client and transport for logprint, using comma delimiter between them"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Unbind",
              "Operator": "Operators.Error",
              "Description": "Error in binding",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Unbind",
              "Operator": "Operators.Status",
              "Description": "Confirmation of successful unbind"
            }
          ]
        },
        {
          "Name": "Verbosity",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Change the verbosity of a specified client",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Verbosity",
              "Operator": "Operators.SetGet",
              "Description": "Verbosity change request",
              "Fields": [
                {
                  "Name": "Client",
                  "Type": "uint8",
                  "Count": 127,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "String of clients name"
                },
                {
                  "Name": "Verbosity",
                  "Type": "uint8",
                  "Enum": "VerbosityType",
                  "Count": 1,
                  "Description": "Verbosity that client will be changed to."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Verbosity",
              "Operator": "Operators.Error",
              "Description": "Error in changing verbosity",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Verbosity",
              "Operator": "Operators.Status",
              "Description": "Confirmation of successful change in verbosity"
            }
          ]
        },
        {
          "Name": "Transports",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Prints list of transports",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Transports",
              "Operator": "Operators.Get",
              "Description": "Transports print request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Transports",
              "Operator": "Operators.Status",
              "Description": "List of transports printed as a string",
              "Fields": [
                {
                  "Name": "Transports",
                  "Type": "uint8",
                  "Count": 255,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "String displaying transports currently registered"
                }
              ]
            }
          ]
        },
        {
          "Name": "Clients",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Prints list of clients",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Clients",
              "Operator": "Operators.Get",
              "Description": "Clients print request"
            },
            {
              "FunctionBlock": "FunctionBlocks.Print",
              "Function": "PrintFunctions.Clients",
              "Operator": "Operators.Status",
              "Description": "List of clients printed as a string",
              "Fields": [
                {
                  "Name": "Clients",
                  "Type": "uint8",
                  "Count": 255,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "String of clients, the transports they are bound to, and their verbosity"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Manufacturing",
      "Version": "1.1.0",
      "Mandatory": "O",
      "Description": "Allows setting and retrieving information related to manufacturing",
      "Value": 23,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get Manufacturing FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block Version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported manufacturing functions in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Queries currently selected source"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "GetAll processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "GetAll result response"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.GetAll",
              "Operator": "Operators.Error",
              "Description": "GetAll error response",
              "Fields": [
                {
                  "Name": "Busy",
                  "Type": "uint8",
                  "Description": "A busy error will be sent if the product is already processing a response to a GetAll command"
                }
              ]
            }
          ]
        },
        {
          "Name": "TestStation",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Set and query Test Station Flags in manufacturing line",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.TestStation",
              "Operator": "Operators.Get",
              "Description": "Get Test Station Flags."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.TestStation",
              "Operator": "Operators.SetGet",
              "Description": "Change the Test Station Flag",
              "Fields": [
                {
                  "Name": "TestStation",
                  "Type": "uint8",
                  "Description": "Test Station ID",
                  "Enum": "TestStationID"
                },
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Description": "Test Station status.",
                  "Enum": "TestStationStatus"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.TestStation",
              "Operator": "Operators.Status",
              "Description": "Test Station status.",
              "Fields": [
                {
                  "Name": "StatusPartA",
                  "Type": "uint32",
                  "Description": "Status for Test Stations 1 - 16",
                  "Bitfields": [
                    {
                      "Name": "Station1Status",
                      "Description": "Test Station 1 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station2Status",
                      "Description": "Test Station 2 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station3Status",
                      "Description": "Test Station 3 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station4Status",
                      "Description": "Test Station 4 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station5Status",
                      "Description": "Test Station 5 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station6Status",
                      "Description": "Test Station 6 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station7Status",
                      "Description": "Test Station 7 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station8Status",
                      "Description": "Test Station 8 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station9Status",
                      "Description": "Test Station 9 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station10Status",
                      "Description": "Test Station 10 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station11Status",
                      "Description": "Test Station 11 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station12Status",
                      "Description": "Test Station 12 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station13Status",
                      "Description": "Test Station 13 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station14Status",
                      "Description": "Test Station 14 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station15Status",
                      "Description": "Test Station 15 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station16Status",
                      "Description": "Test Station 16 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    }
                  ]
                },
                {
                  "Name": "StatusPartB",
                  "Type": "uint16",
                  "Description": "Status for Test Stations 17 - 24",
                  "Bitfields": [
                    {
                      "Name": "Station17Status",
                      "Description": "Test Station 17 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station18Status",
                      "Description": "Test Station 18 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station19Status",
                      "Description": "Test Station 19 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station20Status",
                      "Description": "Test Station 20 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station21Status",
                      "Description": "Test Station 21 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station22Status",
                      "Description": "Test Station 22 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station23Status",
                      "Description": "Test Station 23 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    },
                    {
                      "Name": "Station24Status",
                      "Description": "Test Station 24 status.",
                      "NumBits": 2,
                      "Enum": "TestStationStatus"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "ShipMode",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Sets the product into Ship Mode",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ShipMode",
              "Operator": "Operators.Start",
              "Description": "Initiate Ship Mode.",
              "Fields": [
                {
                  "Name": "Delay",
                  "Type": "uint16",
                  "Description": "Ship Mode delay in milliseconds."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ShipMode",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ShipMode",
              "Operator": "Operators.Processing"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ShipMode",
              "Operator": "Operators.Result",
              "Description": "Ship Mode initiated."
            }
          ]
        },
        {
          "Name": "SpeakerTrim",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Allows setting and retrieving of Speaker Trim",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SpeakerTrim",
              "Operator": "Operators.Get",
              "Description": "Get the Speaker Trim"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SpeakerTrim",
              "Operator": "Operators.SetGet",
              "Description": "Change the Speaker Trim",
              "Fields": [
                {
                  "Name": "Speaker",
                  "Type": "uint8",
                  "Description": "Which speaker.",
                  "Enum": "SpeakerID"
                },
                {
                  "Name": "TrimValue",
                  "Type": "int16",
                  "Description": "Speaker Trim value. Valid range -5400 to 5400."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SpeakerTrim",
              "Operator": "Operators.Status",
              "Description": "Speaker Trim status info.",
              "Fields": [
                {
                  "Name": "NumSpeakersSupported",
                  "Type": "uint8",
                  "Description": "Number of speakers supported by this product. Max is 4."
                },
                {
                  "Name": "Trim0",
                  "Type": "int16",
                  "Description": "Trim Value of Speaker."
                },
                {
                  "Name": "Trim1",
                  "Type": "int16",
                  "Description": "Trim Value of Speaker."
                },
                {
                  "Name": "Trim2",
                  "Type": "int16",
                  "Description": "Trim Value of Speaker."
                },
                {
                  "Name": "Trim3",
                  "Type": "int16",
                  "Description": "Trim Value of Speaker."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SpeakerTrim",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "MicTrim",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Allows setting and retrieving of Microphone Trim",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.MicTrim",
              "Operator": "Operators.Get",
              "Description": "Get the Microphone Trim"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.MicTrim",
              "Operator": "Operators.SetGet",
              "Description": "Change the Microphone Trim",
              "Fields": [
                {
                  "Name": "Microphone",
                  "Type": "uint8",
                  "Description": "Which microphone.",
                  "Enum": "MicrophoneID"
                },
                {
                  "Name": "TrimValue",
                  "Type": "uint32",
                  "Description": "32-bit Microphone Trim value. To set to default use 0."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.MicTrim",
              "Operator": "Operators.Status",
              "Description": "Microphone Trim status info.",
              "Fields": [
                {
                  "Name": "Mic0",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone0. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic1",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone1. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic2",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone2. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic3",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone3. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic4",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone3. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic5",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone3. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic6",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone3. 4 bytes for each microphone in the product."
                },
                {
                  "Name": "Mic7",
                  "Type": "uint32",
                  "Description": "Trim Value of Microphone3. 4 bytes for each microphone in the product."
                }
              ]
            }
          ]
        },
        {
          "Name": "Color",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Allows setting and retrieving of color (Hardware Variant)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.Color",
              "Operator": "Operators.Get",
              "Description": "Get Color"
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.Color",
              "Operator": "Operators.SetGet",
              "Description": "Set (and Get) Color",
              "Fields": [
                {
                  "Name": "Color",
                  "Type": "uint8",
                  "Description": "Color variant of device hardware"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.Color",
              "Operator": "Operators.Status",
              "Description": "Hardware color",
              "Fields": [
                {
                  "Name": "Color",
                  "Type": "uint8",
                  "Description": "Color variant of device hardware"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.Color",
              "Operator": "Operators.Error",
              "Description": "Error from Color function",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes",
                  "Description": "The code encountered some error"
                }
              ]
            }
          ]
        },
        {
          "Name": "SerialNumber",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Allows setting/getting the Serial Numbers of product components",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SerialNumber",
              "Operator": "Operators.Get",
              "Description": "Get Serial Number.",
              "Fields": [
                {
                  "Name": "SerialNumberID",
                  "Type": "uint8",
                  "Enum": "SerialNumberIDs",
                  "Description": "Serial Number ID (Product, Board, Battery etc ID)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SerialNumber",
              "Operator": "Operators.SetGet",
              "Description": "SetGet Serial Number.",
              "Fields": [
                {
                  "Name": "SerialNumberID",
                  "Type": "uint8",
                  "Enum": "SerialNumberIDs",
                  "Description": "Serial Number ID (Product, Board, Battery etc ID)"
                },
                {
                  "Name": "SerialNumber",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 59,
                  "Units": "ASCII",
                  "Description": "Serial Number (ASCII String)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SerialNumber",
              "Operator": "Operators.Status",
              "Description": "Serial Number Status.",
              "Fields": [
                {
                  "Name": "SerialNumberID",
                  "Type": "uint8",
                  "Enum": "SerialNumberIDs",
                  "Description": "Serial Number ID (Product, Board, Battery etc ID)"
                },
                {
                  "Name": "SerialNumber",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 59,
                  "Units": "ASCII",
                  "Description": "Serial Number (ASCII String)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.SerialNumber",
              "Operator": "Operators.Error",
              "Description": "Serial Number Error.",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes",
                  "Description": "Generic BMAP error."
                },
                {
                  "Name": "AppSpecificErrorCode",
                  "Type": "uint8",
                  "Enum": "PSKeyErrorCode",
                  "Description": "App specific error."
                }
              ]
            }
          ]
        },
        {
          "Name": "ManufacturingMode",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Allows setting / getting the device manufacturing mode",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ManufacturingMode",
              "Operator": "Operators.Get",
              "Description": "Get Manufacturing Mode."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ManufacturingMode",
              "Operator": "Operators.SetGet",
              "Description": "SetGet Manufacturing Mode.",
              "Fields": [
                {
                  "Name": "Enabled",
                  "Type": "uint8",
                  "Enum": "Boolean",
                  "Description": "Enabled."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ManufacturingMode",
              "Operator": "Operators.Status",
              "Description": "Manufacturing Mode Status.",
              "Fields": [
                {
                  "Name": "Enabled",
                  "Type": "uint8",
                  "Enum": "Boolean",
                  "Description": "Enabled."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.ManufacturingMode",
              "Operator": "Operators.Error",
              "Description": "Manufacturing Mode Error.",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes",
                  "Description": "Error code."
                }
              ]
            }
          ]
        },
        {
          "Name": "EarbudAddress",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Allows setting and retrieving the paired earbud MAC address.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudAddress",
              "Operator": "Operators.Get",
              "Description": "Get MAC address of paired earbud."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudAddress",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get MAC address of paired earbud.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of paired earbud."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudAddress",
              "Operator": "Operators.Status",
              "Description": "Returned MAC address of paired earbud.",
              "Fields": [
                {
                  "Name": "MACAddress",
                  "Type": "uint8",
                  "Count": 6,
                  "Description": "MAC address of paired earbud."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudAddress",
              "Operator": "Operators.Error",
              "Description": "Error issuing earbud MAC address command.",
              "Fields": [
                {
                  "Name": "Error",
                  "Type": "uint8",
                  "Description": "Error Response",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "EarbudMode",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Allows setting and retrieving the earbud mode (Master/Puppet).",
          "LongDescription": null,
          "Operators": [
            {
              "Function": "ManufacturingFunctions.EarbudMode",
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Operator": "Operators.Get",
              "Description": "Get earbud mode."
            },
            {
              "Function": "ManufacturingFunctions.EarbudMode",
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Operator": "Operators.SetGet",
              "Description": "Set/Get earbud mode.",
              "Fields": [
                {
                  "Name": "Mode",
                  "Type": "uint8",
                  "Description": "Earbud mode.",
                  "Enum": "EarbudMode"
                }
              ]
            },
            {
              "Function": "ManufacturingFunctions.EarbudMode",
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Operator": "Operators.Status",
              "Description": "Returned earbud mode.",
              "Fields": [
                {
                  "Name": "Mode",
                  "Type": "uint8",
                  "Description": "Earbud mode.",
                  "Enum": "EarbudMode"
                }
              ]
            },
            {
              "Function": "ManufacturingFunctions.EarbudMode",
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Operator": "Operators.Error",
              "Description": "Error issuing earbud mode command.",
              "Fields": [
                {
                  "Name": "Error",
                  "Type": "uint8",
                  "Description": "Error Response",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "EarbudPair",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Issues the command to connect to the paired earbud.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudPair",
              "Operator": "Operators.Start",
              "Description": "Attempt to connect to paired earbud."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudPair",
              "Operator": "Operators.Processing",
              "Description": "Begun attempt to connect to paired earbud."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudPair",
              "Operator": "Operators.Result",
              "Description": "Connected to paired earbud."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.EarbudPair",
              "Operator": "Operators.Error",
              "Description": "Error connecting to paired earbud.",
              "Fields": [
                {
                  "Name": "Error",
                  "Type": "uint8",
                  "Description": "Error Response",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "FactoryMicTrim",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Provides commands to load/unload factory, send/receive msgs to/from DSP, read relevant PSKeys.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.FactoryMicTrim",
              "Operator": "Operators.SetGet",
              "Description": "Command with payload",
              "Fields": [
                {
                  "Name": "CommandId",
                  "Type": "uint8",
                  "Enum": "FactoryMicTrimCommandIds",
                  "Description": "Must have at least 1 byte for Command Id."
                },
                {
                  "Name": "CommandParams",
                  "Type": "uint8",
                  "Description": "For startProcessingWthParams and Load params this is NumMicTrims 0 - 10. For Read Processing Values this is processing msg 0 - 6."
                },
                {
                  "Name": "FMicTrim1",
                  "Type": "int32",
                  "Description": "Value for MicTrim1."
                },
                {
                  "Name": "FMicTrim2",
                  "Type": "int32",
                  "Description": "Value for MicTrim2."
                },
                {
                  "Name": "FMicTrim3",
                  "Type": "int32",
                  "Description": "Value for MicTrim3."
                },
                {
                  "Name": "FMicTrim4",
                  "Type": "int32",
                  "Description": "Value for MicTrim4."
                },
                {
                  "Name": "FMicTrim5",
                  "Type": "int32",
                  "Description": "Value for MicTrim5."
                },
                {
                  "Name": "FMicTrim6",
                  "Type": "int32",
                  "Description": "Value for MicTrim6."
                },
                {
                  "Name": "FMicTrim7",
                  "Type": "int32",
                  "Description": "Value for MicTrim7."
                },
                {
                  "Name": "FMicTrim8",
                  "Type": "int32",
                  "Description": "Value for MicTrim8."
                },
                {
                  "Name": "FMicTrim9",
                  "Type": "int32",
                  "Description": "Value for MicTrim9."
                },
                {
                  "Name": "FMicTrim10",
                  "Type": "int32",
                  "Description": "Value for MicTrim10."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.FactoryMicTrim",
              "Operator": "Operators.Status",
              "Description": "Response",
              "Fields": [
                {
                  "Name": "Status",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Response for FactoryMicTrim commands."
                },
                {
                  "Name": "Response",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 160,
                  "Units": "ASCII",
                  "Description": "Values returned from GetStatus or ReadProcessing cmds."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.FactoryMicTrim",
              "Operator": "Operators.Error",
              "Description": "Error from FactoryMicTrim function",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Enum": "ErrorResponseCodes",
                  "Description": "Error Code.",
                  "LongDescription": "Function specific error codes are Capability_Not_Loaded = 00, Capability_Already_Loaded = 0x01."
                }
              ]
            }
          ]
        },
        {
          "Name": "BLEAdPacketFormat",
          "Value": 13,
          "Mandatory": "O",
          "Description": "BLE Advertising Mode ECO1 or ECO2",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.BLEAdPacketFormat",
              "Operator": "Operators.Get",
              "Description": "Get current BLE ad packet format."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.BLEAdPacketFormat",
              "Operator": "Operators.SetGet",
              "Description": "Set BLE Ad packet format.",
              "Fields": [
                {
                  "Name": "BLEAdFormat",
                  "Type": "uint8",
                  "Description": "0 = BLE_AD_ECO2, 1 = BLE_AD_ECO1."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.BLEAdPacketFormat",
              "Operator": "Operators.Status",
              "Description": "BLE Ad Packet Format",
              "Fields": [
                {
                  "Name": "BLEAdFormat",
                  "Type": "uint8",
                  "Enum": "BLEAdFormatE",
                  "Description": "Current BLE Ad Pckt Format, 0 = BLE_AD_ECO2, 1 = BLE_AD_ECO1."
                }
              ]
            }
          ]
        },
        {
          "Name": "BLEBondableTimeoutEnabled",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Enable or Disable the BLE Bondable Timeout Timer",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.BLEBondableTimeoutEnabled",
              "Operator": "Operators.Get",
              "Description": "Get whether the BLE Bondable Timeout is enabled."
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.BLEBondableTimeoutEnabled",
              "Operator": "Operators.SetGet",
              "Description": "Set if the BLE Bondable Timeout is enabled or disabled.",
              "Fields": [
                {
                  "Name": "Enabled",
                  "Type": "uint8",
                  "Enum": "Boolean",
                  "Description": "Enabled."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.Manufacturing",
              "Function": "ManufacturingFunctions.BLEBondableTimeoutEnabled",
              "Operator": "Operators.Status",
              "Description": "BLE Bondable Timeout Timer Status",
              "Fields": [
                {
                  "Name": "Enabled",
                  "Type": "uint8",
                  "Enum": "Boolean",
                  "Description": "Enabled."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "SensorInterface",
      "Version": "1.1.1",
      "Mandatory": "O",
      "Description": "Configure and retrieve information from a sensor interface system",
      "Value": 24,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get SensorInterface FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block Version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported SensorInterface functions in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Queries currently selected source"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "GetAll processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "GetAll result response"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.GetAll",
              "Operator": "Operators.Error",
              "Description": "GetAll error response",
              "Fields": [
                {
                  "Name": "Busy",
                  "Type": "uint8",
                  "Description": "A busy error will be sent if the product is already processing a response to a GetAll command"
                }
              ]
            }
          ]
        },
        {
          "Name": "HardwareInfo",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Hardware information of SensorInterface module",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.HardwareInfo",
              "Operator": "Operators.Get",
              "Description": "Hardware Info Get request"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.HardwareInfo",
              "Operator": "Operators.Status",
              "Description": "Hardware Info Status response",
              "Fields": [
                {
                  "Name": "PrimaryMicroprocessorID",
                  "Type": "uint32",
                  "Description": "Primary Microprocessor ID"
                },
                {
                  "Name": "SecondaryMicroprocessorID",
                  "Type": "uint32",
                  "Description": "Secondary Microprocessor ID"
                },
                {
                  "Name": "Sensor1ID",
                  "Type": "uint16",
                  "Description": "Sensor 1 ID"
                },
                {
                  "Name": "Sensor2ID",
                  "Type": "uint16",
                  "Description": "Sensor 2 ID"
                },
                {
                  "Name": "Sensor3ID",
                  "Type": "uint16",
                  "Description": "Sensor 3 ID"
                },
                {
                  "Name": "Sensor4ID",
                  "Type": "uint16",
                  "Description": "Sensor 4 ID"
                }
              ]
            }
          ]
        },
        {
          "Name": "SensorVersion",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Get version numbers associated with sensorInterface components",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorVersion",
              "Operator": "Operators.Get",
              "Description": "Version Number Get request",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor Id"
                },
                {
                  "Name": "Id",
                  "Type": "uint8",
                  "Enum": "SensorVIdEnum",
                  "Description": "Id that you want version of."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorVersion",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Version Status response (ASCII String)",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor Id"
                },
                {
                  "Name": "Id",
                  "Type": "uint8",
                  "Enum": "SensorVIdEnum",
                  "Description": "Id that you want version of."
                },
                {
                  "Name": "Version",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 30,
                  "Units": "ASCII",
                  "Description": "Sensor components Version (UTF-8 string)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorVersion",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "Reset",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Reset SensorInterface module",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.Reset",
              "Operator": "Operators.Start",
              "Description": "Get the Microphone Trim",
              "Fields": [
                {
                  "Name": "ResetMode",
                  "Type": "uint8",
                  "Description": "Reset Mode (0 - soft reset)"
                },
                {
                  "Name": "Delay",
                  "Type": "uint16",
                  "Description": "Reset Delay in milliseconds"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.Reset",
              "Operator": "Operators.Result",
              "Description": "Reset initiated"
            }
          ]
        },
        {
          "Name": "SensorValues",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Get raw sensor values from sensors.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorValues",
              "Operator": "Operators.Get",
              "Description": "SensorValues get operation",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type."
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location right or left."
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor id in case of multiples, generally 0."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorValues",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Sensor Values response",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type."
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor id in case of multiples, generally 0."
                },
                {
                  "Name": "RetType",
                  "Type": "uint8",
                  "Enum": "SensorValuesEnum",
                  "Description": "Sensor raw values type label"
                },
                {
                  "Name": "V1",
                  "Type": "int16",
                  "Description": "Raw value returned."
                },
                {
                  "Name": "V2",
                  "Type": "int16",
                  "Description": "Raw value returned"
                },
                {
                  "Name": "V3",
                  "Type": "int16",
                  "Description": "Raw value returned."
                },
                {
                  "Name": "V4",
                  "Type": "int16",
                  "VariableLength": true,
                  "Description": "Raw value returned."
                },
                {
                  "Name": "V5",
                  "Type": "int16",
                  "VariableLength": true,
                  "Description": "Raw value returned"
                },
                {
                  "Name": "V6",
                  "Type": "int16",
                  "VariableLength": true,
                  "Description": "Raw value returned."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorValues",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "SensorParams",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Set and Get for sensor parameters to control sensor function.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorParams",
              "Operator": "Operators.Get",
              "Description": "Sensor param that you want to retrieve.",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor Id"
                },
                {
                  "Name": "SensorParam",
                  "Type": "uint8",
                  "Enum": "SensorParamsEnum",
                  "Description": "Sensor-Param that you want to get value of."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorParams",
              "Operator": "Operators.SetGet",
              "Description": "Sensor param that you want to retrieve.",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor Id"
                },
                {
                  "Name": "SensorParam",
                  "Type": "uint8",
                  "Enum": "SensorParamsEnum",
                  "Description": "Sensor-Param that you want to set value of. Use param=None to select by SensorType and id."
                },
                {
                  "Name": "SensorParamValue",
                  "Type": "uint16",
                  "Description": "Sensor param value that you want to set. Use Value=0xFFFF(65535) to set sensorType to default values (also needs sensorParam=None)."
                },
                {
                  "Name": "Persist",
                  "Type": "uint8",
                  "Description": "0 = Do not Persist, 1 = Persist Param Value."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorParams",
              "Operator": "Operators.Status",
              "Description": "Result of set and get command",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor Id"
                },
                {
                  "Name": "SensorParam",
                  "Type": "uint8",
                  "Enum": "SensorParamsEnum"
                },
                {
                  "Name": "SensorParamValue",
                  "Type": "uint16",
                  "Description": "Status or Parameter value requested."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorParams",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "SensorConfig",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Sensor Configuration",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorConfig",
              "Operator": "Operators.Start",
              "Description": "SensorConfig get operation"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorConfig",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorConfig",
              "Operator": "Operators.Status",
              "Type": "Response",
              "Description": "Sensor Config response",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor Id"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorConfig",
              "Operator": "Operators.Result",
              "Type": "Response",
              "Description": "Sensor Config response , signals end of processing"
            }
          ]
        },
        {
          "Name": "SensorEvent",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Send Sensor Event",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorEvent",
              "Operator": "Operators.Start",
              "Description": "Sensor Event you want to send",
              "Fields": [
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location id that you would like to send event to."
                },
                {
                  "Name": "SensorEvent",
                  "Type": "uint8",
                  "Enum": "SensorEvents",
                  "Description": "Sensor-Event that you want to intitiate."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorEvent",
              "Operator": "Operators.Error",
              "Description": "Error.",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "ErrorResponseCodes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SensorEvent",
              "Operator": "Operators.Result",
              "Description": "Signals End of Processing.",
              "Fields": [
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum"
                },
                {
                  "Name": "SensorEvent",
                  "Type": "uint8",
                  "Enum": "SensorEvents",
                  "Description": "Sensor-Event received."
                }
              ]
            }
          ]
        },
        {
          "Name": "SelfCalibrate",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Self-Calibration function for sensors.",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SelfCalibrate",
              "Operator": "Operators.Start",
              "Description": "Sensor Event you want to send",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor ID if there is more than one of the same sensor type."
                },
                {
                  "Name": "NumThresholds",
                  "Type": "uint8",
                  "Description": "Number of thresholds included for this calibration."
                },
                {
                  "Name": "Threshold1",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold2",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold3",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold4",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold5",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold6",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold7",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold8",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold9",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold10",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold11",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                },
                {
                  "Name": "Threshold12",
                  "Type": "int16",
                  "Description": "Specify sensor threshold value(s) that internal calibration should aim for."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SelfCalibrate",
              "Operator": "Operators.Processing",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SelfCalibrate",
              "Operator": "Operators.Result",
              "Description": "Signals End of Processing",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor ID if there is more than one of the same sensor type."
                },
                {
                  "Name": "CalStatus",
                  "Type": "uint8",
                  "Enum": "SensorCalibStatusEnum",
                  "Description": "Calibration status for this parameter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SelfCalibrate",
              "Operator": "Operators.Get",
              "Description": "Get calibration results values",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor ID if there is more than one of the same sensor type."
                },
                {
                  "Name": "SensorParam",
                  "Type": "uint8",
                  "Enum": "SensorParamsEnum",
                  "Description": "Which sensor parameter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SensorInterface",
              "Function": "SensorInterfaceFunctions.SelfCalibrate",
              "Operator": "Operators.Status",
              "Description": "Returned calibration status value",
              "Fields": [
                {
                  "Name": "SensorType",
                  "Type": "uint8",
                  "Enum": "SensorTypeEnum",
                  "Description": "Sensor Type"
                },
                {
                  "Name": "SensorLocation",
                  "Type": "uint8",
                  "Enum": "SensorLocationEnum",
                  "Description": "Sensor Location"
                },
                {
                  "Name": "SensorId",
                  "Type": "uint8",
                  "Description": "Sensor ID if there is more than one of the same sensor type."
                },
                {
                  "Name": "SensorParam",
                  "Type": "uint8",
                  "Enum": "SensorParamsEnum",
                  "Description": "Which sensor parameter"
                },
                {
                  "Name": "CalStatus",
                  "Type": "uint8",
                  "Enum": "SensorCalibStatusEnum",
                  "Description": "Calibration status for this parameter"
                },
                {
                  "Name": "CalValue",
                  "Type": "int16",
                  "Description": "Calibration value for this parameter"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "BatteryDebug",
      "Version": "1.0.5",
      "Mandatory": "O",
      "Description": "Configure and retrieve information from the battery system",
      "Value": 25,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function block version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get BatteryDebug FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status BatteryDebug FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all battery related information from product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Start settings GetAll"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "Sent immediately to acknowledge message"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "Sent after all settings returned"
            }
          ]
        },
        {
          "Name": "Voltage",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Voltage in mV",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.Voltage",
              "Operator": "Operators.Get",
              "Description": "Get voltage"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.Voltage",
              "Operator": "Operators.SetGet",
              "Description": "Set battery voltage",
              "Fields": [
                {
                  "Name": "Voltage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Voltage"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.Voltage",
              "Operator": "Operators.Status",
              "Description": "Battery voltage status",
              "Fields": [
                {
                  "Name": "Voltage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Voltage"
                }
              ]
            }
          ]
        },
        {
          "Name": "VoltageTimeStamp",
          "Value": 3,
          "Mandatory": "O",
          "Description": "Timestamp for voltage in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageTimeStamp",
              "Operator": "Operators.Get",
              "Description": "Get timestamp for voltage"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageTimeStamp",
              "Operator": "Operators.SetGet",
              "Description": "Set battery voltage timestamp",
              "Fields": [
                {
                  "Name": "VoltageTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp for voltage"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageTimeStamp",
              "Operator": "Operators.Status",
              "Description": "Battery voltage timestamp status",
              "Fields": [
                {
                  "Name": "VoltageTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp for voltage"
                }
              ]
            }
          ]
        },
        {
          "Name": "VoltageFiltering",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Filtered voltage in mV",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageFiltering",
              "Operator": "Operators.Get",
              "Description": "Get filtered voltage"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageFiltering",
              "Operator": "Operators.SetGet",
              "Description": "Set battery filtered voltage",
              "Fields": [
                {
                  "Name": "VoltageFiltering",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Filtered voltage"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageFiltering",
              "Operator": "Operators.Status",
              "Description": "Battery filtered voltage status",
              "Fields": [
                {
                  "Name": "VoltageFiltering",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Filtered voltage"
                }
              ]
            }
          ]
        },
        {
          "Name": "VoltageAverage",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Averaged voltage in mV",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageAverage",
              "Operator": "Operators.Get",
              "Description": "Get average voltage"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageAverage",
              "Operator": "Operators.SetGet",
              "Description": "Set battery average voltage",
              "Fields": [
                {
                  "Name": "VoltageAverage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Average voltage"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.VoltageAverage",
              "Operator": "Operators.Status",
              "Description": "Battery average voltage status",
              "Fields": [
                {
                  "Name": "VoltageAverage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Average voltage"
                }
              ]
            }
          ]
        },
        {
          "Name": "Temperature",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Temperature in Celsius",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.Temperature",
              "Operator": "Operators.Get",
              "Description": "Get temperature"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.Temperature",
              "Operator": "Operators.SetGet",
              "Description": "Set battery temperature",
              "Fields": [
                {
                  "Name": "Temperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.Temperature",
              "Operator": "Operators.Status",
              "Description": "Battery temperature status",
              "Fields": [
                {
                  "Name": "Temperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "TemperatureTimeStamp",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Timestamp for temperature in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureTimeStamp",
              "Operator": "Operators.Get",
              "Description": "Get timestamp for temperature"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureTimeStamp",
              "Operator": "Operators.SetGet",
              "Description": "Set battery temperature timestamp",
              "Fields": [
                {
                  "Name": "TemperatureTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp for temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureTimeStamp",
              "Operator": "Operators.Status",
              "Description": "Battery temperature timestamp status",
              "Fields": [
                {
                  "Name": "TemperatureTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp for temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "TemperatureFiltering",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Filtered temperature in Celsius",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureFiltering",
              "Operator": "Operators.Get",
              "Description": "Get filtered temperature"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureFiltering",
              "Operator": "Operators.SetGet",
              "Description": "Set battery filtered temperature",
              "Fields": [
                {
                  "Name": "TemperatureFiltering",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Filtered temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureFiltering",
              "Operator": "Operators.Status",
              "Description": "Battery filtered temperature status",
              "Fields": [
                {
                  "Name": "TemperatureFiltering",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Filtered temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "TemperatureAverage",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Averaged temperature in Celsius",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureAverage",
              "Operator": "Operators.Get",
              "Description": "Get average temperature"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureAverage",
              "Operator": "Operators.SetGet",
              "Description": "Set battery average temperature",
              "Fields": [
                {
                  "Name": "TemperatureAverage",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Average temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.TemperatureAverage",
              "Operator": "Operators.Status",
              "Description": "Battery average temperature status",
              "Fields": [
                {
                  "Name": "TemperatureAverage",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Average temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "SystemTemperature",
          "Value": 10,
          "Mandatory": "O",
          "Description": "System temperature in Celsius",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemTemperature",
              "Operator": "Operators.Get",
              "Description": "Get system temperature"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemTemperature",
              "Operator": "Operators.SetGet",
              "Description": "Set battery system temperature",
              "Fields": [
                {
                  "Name": "SystemTemperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "System temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemTemperature",
              "Operator": "Operators.Status",
              "Description": "Battery system temperature status",
              "Fields": [
                {
                  "Name": "SystemTemperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "System temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "SystemTemperatureTimeStamp",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Timestamp for system temperature in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemTemperatureTimeStamp",
              "Operator": "Operators.Get",
              "Description": "Get timestamp for system temperature"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemTemperatureTimeStamp",
              "Operator": "Operators.SetGet",
              "Description": "Set battery system temperature timestamp",
              "Fields": [
                {
                  "Name": "SystemTemperatureTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp fo system temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemTemperatureTimeStamp",
              "Operator": "Operators.Status",
              "Description": "Battery system temperature timestamp status",
              "Fields": [
                {
                  "Name": "SystemTemperatureTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp fo system temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "SOCPercentage",
          "Value": 12,
          "Mandatory": "O",
          "Description": "State of charge in percentage",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCPercentage",
              "Operator": "Operators.Get",
              "Description": "Get state of charge percentage"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCPercentage",
              "Operator": "Operators.SetGet",
              "Description": "Set battery SOC percentage",
              "Fields": [
                {
                  "Name": "SOCPercentage",
                  "Type": "uint8",
                  "Description": "State of charge percentage"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCPercentage",
              "Operator": "Operators.Status",
              "Description": "Battery SOC percentage status",
              "Fields": [
                {
                  "Name": "SOCPercentage",
                  "Type": "uint8",
                  "Description": "State of charge percentage"
                }
              ]
            }
          ]
        },
        {
          "Name": "SOCTime",
          "Value": 13,
          "Mandatory": "O",
          "Description": "State of charge in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTime",
              "Operator": "Operators.Get",
              "Description": "Get state of charge time"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTime",
              "Operator": "Operators.SetGet",
              "Description": "Set battery SOC time",
              "Fields": [
                {
                  "Name": "SOCTime",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "State of charge time"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTime",
              "Operator": "Operators.Status",
              "Description": "Battery SOC time status",
              "Fields": [
                {
                  "Name": "SOCTime",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "State of charge time"
                }
              ]
            }
          ]
        },
        {
          "Name": "SOCTimeStamp",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Timestamp for state of charge in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeStamp",
              "Operator": "Operators.Get",
              "Description": "Get timestamp for state of charge"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeStamp",
              "Operator": "Operators.SetGet",
              "Description": "Set battery SOC timestamp",
              "Fields": [
                {
                  "Name": "SOCTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp for state of charge"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeStamp",
              "Operator": "Operators.Status",
              "Description": "Battery SOC timestamp status",
              "Fields": [
                {
                  "Name": "SOCTimeStamp",
                  "Type": "uint32",
                  "Units": "min",
                  "Description": "Timestamp for state of charge"
                }
              ]
            }
          ]
        },
        {
          "Name": "SOCTimeFiltering",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Filtered state of charge in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeFiltering",
              "Operator": "Operators.Get",
              "Description": "Get filtered state of charge time"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeFiltering",
              "Operator": "Operators.SetGet",
              "Description": "Set battery SOC filtered time",
              "Fields": [
                {
                  "Name": "SOCTimeFiltering",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "Filtered state of charge time"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeFiltering",
              "Operator": "Operators.Status",
              "Description": "Battery SOC filtered time status",
              "Fields": [
                {
                  "Name": "SOCTimeFiltering",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "Filtered state of charge time"
                }
              ]
            }
          ]
        },
        {
          "Name": "SOCTimeAverage",
          "Value": 16,
          "Mandatory": "O",
          "Description": "Averaged state of charge in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeAverage",
              "Operator": "Operators.Get",
              "Description": "Get average state of charge time"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeAverage",
              "Operator": "Operators.SetGet",
              "Description": "Set battery SOC average time",
              "Fields": [
                {
                  "Name": "SOCTimeAverage",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "Average state of charge time"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SOCTimeAverage",
              "Operator": "Operators.Status",
              "Description": "Battery SOC average time status",
              "Fields": [
                {
                  "Name": "SOCTimeAverage",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "Average state of charge time"
                }
              ]
            }
          ]
        },
        {
          "Name": "BatteryCapacity",
          "Value": 17,
          "Mandatory": "O",
          "Description": "Battery capacity",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.BatteryCapacity",
              "Operator": "Operators.Get",
              "Description": "Get battery capacity"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.BatteryCapacity",
              "Operator": "Operators.SetGet",
              "Description": "Set battery capacity",
              "Fields": [
                {
                  "Name": "BatteryCapacity",
                  "Type": "uint8",
                  "Enum": "BatteryCapacity",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.BatteryCapacity",
              "Operator": "Operators.Status",
              "Description": "Battery capacity status",
              "Fields": [
                {
                  "Name": "BatteryCapacity",
                  "Type": "uint8",
                  "Enum": "BatteryCapacity",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "SourceStatus",
          "Value": 18,
          "Mandatory": "O",
          "Description": "Source status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SourceStatus",
              "Operator": "Operators.Get",
              "Description": "Get battery source status"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SourceStatus",
              "Operator": "Operators.SetGet",
              "Description": "Set source status",
              "Fields": [
                {
                  "Name": "SourceStatus",
                  "Type": "uint8",
                  "Enum": "SourceStatus",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SourceStatus",
              "Operator": "Operators.Status",
              "Description": "Source status",
              "Fields": [
                {
                  "Name": "SourceStatus",
                  "Type": "uint8",
                  "Enum": "SourceStatus",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerStatus",
          "Value": 19,
          "Mandatory": "O",
          "Description": "Charger status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerStatus",
              "Operator": "Operators.Get",
              "Description": "Get battery charger status"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerStatus",
              "Operator": "Operators.SetGet",
              "Description": "Set charger status",
              "Fields": [
                {
                  "Name": "ChargerStatus",
                  "Type": "uint8",
                  "Enum": "ChargerStatus",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerStatus",
              "Operator": "Operators.Status",
              "Description": "Ccharger status",
              "Fields": [
                {
                  "Name": "ChargerStatus",
                  "Type": "uint8",
                  "Enum": "ChargerStatus",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeStatus",
          "Value": 20,
          "Mandatory": "O",
          "Description": "Fuel gauge status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeStatus",
              "Operator": "Operators.Get",
              "Description": "Get battery FuelGauge status"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeStatus",
              "Operator": "Operators.SetGet",
              "Description": "Set fuel gauge status",
              "Fields": [
                {
                  "Name": "FuelGaugeStatus",
                  "Type": "uint8",
                  "Enum": "FuelGaugeStatus",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeStatus",
              "Operator": "Operators.Status",
              "Description": "Fuel gauge status",
              "Fields": [
                {
                  "Name": "FuelGaugeStatus",
                  "Type": "uint8",
                  "Enum": "FuelGaugeStatus",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "DriverFaults",
          "Value": 21,
          "Mandatory": "O",
          "Description": "Fuel gauge status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.DriverFaults",
              "Operator": "Operators.Get",
              "Description": "Get battery driver faults"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.DriverFaults",
              "Operator": "Operators.SetGet",
              "Description": "Set battery driver faults",
              "Fields": [
                {
                  "Name": "DriverFault",
                  "Type": "uint8",
                  "Enum": "DriverFault",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.DriverFaults",
              "Operator": "Operators.Status",
              "Description": "Battery driver faults status",
              "Fields": [
                {
                  "Name": "DriverFault",
                  "Type": "uint8",
                  "Enum": "DriverFault",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargeCapacityCurrent",
          "Value": 22,
          "Mandatory": "O",
          "Description": "Charge capacity current in mA",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargeCapacityCurrent",
              "Operator": "Operators.Get",
              "Description": "Get battery charge capacity current"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargeCapacityCurrent",
              "Operator": "Operators.SetGet",
              "Description": "Set battery charge capacity current",
              "Fields": [
                {
                  "Name": "ChargeCapacityCurrent",
                  "Type": "int16",
                  "Description": "Battery charge capacity current"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargeCapacityCurrent",
              "Operator": "Operators.Status",
              "Description": "Battery charge capacity current status",
              "Fields": [
                {
                  "Name": "ChargeCapacityCurrent",
                  "Type": "int16",
                  "Description": "Battery charge capacity current"
                }
              ]
            }
          ]
        },
        {
          "Name": "NetChargeCurrent",
          "Value": 23,
          "Mandatory": "O",
          "Description": "Net charge current in mA",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.NetChargeCurrent",
              "Operator": "Operators.Get",
              "Description": "Get net charge current"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.NetChargeCurrent",
              "Operator": "Operators.SetGet",
              "Description": "Set battery net charge current",
              "Fields": [
                {
                  "Name": "NetChargeCurrent",
                  "Type": "int16",
                  "Units": "mA",
                  "Description": "Net charge current"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.NetChargeCurrent",
              "Operator": "Operators.Status",
              "Description": "Battery net charge current status",
              "Fields": [
                {
                  "Name": "NetChargeCurrent",
                  "Type": "int16",
                  "Units": "mA",
                  "Description": "Net charge current"
                }
              ]
            }
          ]
        },
        {
          "Name": "SystemFaults",
          "Value": 24,
          "Mandatory": "O",
          "Description": "System faults",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemFaults",
              "Operator": "Operators.Get",
              "Description": "Get battery system fault"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemFaults",
              "Operator": "Operators.SetGet",
              "Description": "Set battery system faults",
              "Fields": [
                {
                  "Name": "SystemFault",
                  "Type": "uint8",
                  "Enum": "SystemFault",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.SystemFaults",
              "Operator": "Operators.Status",
              "Description": "Battery system faults status",
              "Fields": [
                {
                  "Name": "SystemFault",
                  "Type": "uint8",
                  "Enum": "SystemFault",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "CurrentRegionTimeLeft",
          "Value": 25,
          "Mandatory": "O",
          "Description": "Current Region time left in minutes",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionTimeLeft",
              "Operator": "Operators.Get",
              "Description": "Get current region time left in minutes"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionTimeLeft",
              "Operator": "Operators.SetGet",
              "Description": "Set current region time left in minutes",
              "Fields": [
                {
                  "Name": "CurrentRegionTimeLeft",
                  "Type": "uint16",
                  "Description": "Current region time left in minutes"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionTimeLeft",
              "Operator": "Operators.Status",
              "Description": "Battery current region time left in minutes status",
              "Fields": [
                {
                  "Name": "CurrentRegionTimeLeft",
                  "Type": "uint16",
                  "Description": "Current region time left in minutes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BrickCounter",
          "Value": 26,
          "Mandatory": "O",
          "Description": "Brick counter",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.BrickCounter",
              "Operator": "Operators.Get",
              "Description": "Get brick counter"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.BrickCounter",
              "Operator": "Operators.SetGet",
              "Description": "Set battery brick counter",
              "Fields": [
                {
                  "Name": "BrickCounter",
                  "Type": "uint16",
                  "Description": "Current brick counter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.BrickCounter",
              "Operator": "Operators.Status",
              "Description": "Battery brick counter status",
              "Fields": [
                {
                  "Name": "BrickCounter",
                  "Type": "uint16",
                  "Description": "Current brick counter"
                }
              ]
            }
          ]
        },
        {
          "Name": "CurrentRegionType",
          "Value": 27,
          "Mandatory": "O",
          "Description": "Type of current region",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionType",
              "Operator": "Operators.Get",
              "Description": "Get current region type"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionType",
              "Operator": "Operators.SetGet",
              "Description": "Set current region type",
              "Fields": [
                {
                  "Name": "CurrentRegionType",
                  "Type": "uint8",
                  "Enum": "RegionType",
                  "Description": null
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionType",
              "Operator": "Operators.Status",
              "Description": "Current region type status",
              "Fields": [
                {
                  "Name": "CurrentRegionType",
                  "Type": "uint8",
                  "Enum": "RegionType",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "CurrentRegionIndex",
          "Value": 28,
          "Mandatory": "O",
          "Description": "Index of current region",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionIndex",
              "Operator": "Operators.Get",
              "Description": "Get index of current region"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionIndex",
              "Operator": "Operators.SetGet",
              "Description": "Set current region index",
              "Fields": [
                {
                  "Name": "CurrentRegionIndex",
                  "Type": "uint16",
                  "Description": "Index of current region"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionIndex",
              "Operator": "Operators.Status",
              "Description": "Current region index status",
              "Fields": [
                {
                  "Name": "CurrentRegionIndex",
                  "Type": "uint16",
                  "Description": "Index of current region"
                }
              ]
            }
          ]
        },
        {
          "Name": "EnteringRegionType",
          "Value": 29,
          "Mandatory": "O",
          "Description": "Event for entering region type",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.EnteringRegionType",
              "Operator": "Operators.Status",
              "Description": "Entering region type event status",
              "Fields": [
                {
                  "Name": "EnteringRegionType",
                  "Type": "uint8",
                  "Enum": "RegionType",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "ExitingRegionType",
          "Value": 30,
          "Mandatory": "O",
          "Description": "Event for exiting region type",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ExitingRegionType",
              "Operator": "Operators.Status",
              "Description": "Exiting region type event status",
              "Fields": [
                {
                  "Name": "ExitingRegionType",
                  "Type": "uint8",
                  "Enum": "RegionType",
                  "Description": null
                }
              ]
            }
          ]
        },
        {
          "Name": "CurrentRegionProperties",
          "Value": 31,
          "Mandatory": "O",
          "Description": "Properties of current region",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionProperties",
              "Operator": "Operators.Get",
              "Description": "Get properties of current region"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionProperties",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "ChargeCurrent",
                  "Type": "int16",
                  "Units": "mA",
                  "Description": "Charge current"
                },
                {
                  "Name": "ChargeTimeout",
                  "Type": "uint16",
                  "Units": "min",
                  "Description": "Charge timeout"
                },
                {
                  "Name": "TimeoutRegionType",
                  "Type": "uint8",
                  "Enum": "RegionType",
                  "Description": "Timeout region type."
                },
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel Gauge ID"
                },
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                }
              ]
            }
          ]
        },
        {
          "Name": "CurrentRegionDefinitions",
          "Value": 32,
          "Mandatory": "O",
          "Description": "Definitions for current region",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionDefinitions",
              "Operator": "Operators.Get",
              "Description": "Get battery current region definitions"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.CurrentRegionDefinitions",
              "Operator": "Operators.Status",
              "Description": null,
              "Fields": [
                {
                  "Name": "TemperatureLowerBound",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Temperature lower bound for current region"
                },
                {
                  "Name": "TemperatureUpperBound",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Temperature upper bound for current region"
                },
                {
                  "Name": "VoltageLowerBound",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Voltage lower bound for current region"
                },
                {
                  "Name": "VoltageUpperBound",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Voltage upper bound for current region"
                },
                {
                  "Name": "RegionType",
                  "Type": "uint8",
                  "Enum": "RegionType",
                  "Description": "Region type for current region"
                }
              ]
            }
          ]
        },
        {
          "Name": "RegionTimerStart",
          "Value": 33,
          "Mandatory": "O",
          "Description": "Start of region timer",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.RegionTimerStart",
              "Operator": "Operators.Get",
              "Description": "Get battery region timer start"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.RegionTimerStart",
              "Operator": "Operators.SetGet",
              "Description": "Region timer start",
              "Fields": [
                {
                  "Name": "RegionTimerStart",
                  "Type": "uint16",
                  "Description": "Region timer start"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.RegionTimerStart",
              "Operator": "Operators.Status",
              "Description": "Region timer start",
              "Fields": [
                {
                  "Name": "RegionTimerStart",
                  "Type": "uint16",
                  "Description": "Region timer start"
                }
              ]
            }
          ]
        },
        {
          "Name": "RegionTimerStop",
          "Value": 34,
          "Mandatory": "O",
          "Description": "Stop of region timer",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.RegionTimerStop",
              "Operator": "Operators.Get",
              "Description": "Get battery region timer stop"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.RegionTimerStop",
              "Operator": "Operators.SetGet",
              "Description": "Region timer stop",
              "Fields": [
                {
                  "Name": "RegionTimerStop",
                  "Type": "uint16",
                  "Description": "Region timer stop"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.RegionTimerStop",
              "Operator": "Operators.Status",
              "Description": "Region timer stop",
              "Fields": [
                {
                  "Name": "RegionTimerStop",
                  "Type": "uint16",
                  "Description": "Region timer stop"
                }
              ]
            }
          ]
        },
        {
          "Name": "DebugMode",
          "Value": 35,
          "Mandatory": "O",
          "Description": "Debug mode",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.DebugMode",
              "Operator": "Operators.Get",
              "Description": "Get debug mode"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.DebugMode",
              "Operator": "Operators.SetGet",
              "Description": "Set or clear debug features.",
              "Fields": [
                {
                  "Name": "DebugMode",
                  "Type": "uint8",
                  "Count": 1,
                  "Description": "Each bit is mapped to a specific debug feature.  \nBit  \n\t0 = Enable/Disable driver sampling clock,  \n\t1 = Force all interactions with simulated drivers"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.DebugMode",
              "Operator": "Operators.Status",
              "Description": "Debug mode status",
              "Fields": [
                {
                  "Name": "DebugMode",
                  "Type": "uint8",
                  "Bitfields": [
                    {
                      "Name": "SampleClock",
                      "NumBits": 1,
                      "Description": "Enable/disable driver sampling clock"
                    },
                    {
                      "Name": "SimulatedDrivers",
                      "NumBits": 1,
                      "Description": "Force all interactions with simulated drivers"
                    },
                    {
                      "Name": "Reserved",
                      "NumBits": 6,
                      "Description": "Reserved"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeIDs",
          "Value": 38,
          "Mandatory": "O",
          "Description": "Fuel Gauge IDs",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeIDs",
              "Operator": "Operators.Get",
              "Description": "Get fuel gauge device IDs"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeIDs",
              "Operator": "Operators.Status",
              "Description": "Fuel gauge device IDs status",
              "Fields": [
                {
                  "Name": "FuelGaugeIDs",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 72,
                  "Units": "ASCII",
                  "Description": "List of fuel gauge device IDs"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerIDs",
          "Value": 39,
          "Mandatory": "O",
          "Description": "Charger IDs",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerIDs",
              "Operator": "Operators.Get",
              "Description": "Get charger device IDs"
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerIDs",
              "Operator": "Operators.Status",
              "Description": "Charger device IDs status",
              "Fields": [
                {
                  "Name": "ChargerIDs",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 72,
                  "Units": "ASCII",
                  "Description": "List of charger device IDs"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeRegister",
          "Value": 40,
          "Mandatory": "O",
          "Description": "Fuel Gauge Register",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeRegister",
              "Operator": "Operators.Get",
              "Description": "Read fuel gauge register",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "Register address"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeRegister",
              "Operator": "Operators.SetGet",
              "Description": "Write fuel gauge register",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "Register address"
                },
                {
                  "Name": "RegisterValue",
                  "Type": "uint32",
                  "Description": "Register value"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeRegister",
              "Operator": "Operators.Status",
              "Description": "Fuel gauge register status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "Register address"
                },
                {
                  "Name": "RegisterValue",
                  "Type": "uint32",
                  "Description": "Register value"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerRegister",
          "Value": 41,
          "Mandatory": "O",
          "Description": "Charger Register",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerRegister",
              "Operator": "Operators.Get",
              "Description": "Read charger register",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "Register address"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerRegister",
              "Operator": "Operators.SetGet",
              "Description": "Write charger register",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "Register address"
                },
                {
                  "Name": "RegisterValue",
                  "Type": "uint32",
                  "Description": "Register value"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerRegister",
              "Operator": "Operators.Status",
              "Description": "Charger register status",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "Register address"
                },
                {
                  "Name": "RegisterValue",
                  "Type": "uint32",
                  "Description": "Register value"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerDriverEnable",
          "Value": 42,
          "Mandatory": "O",
          "Description": "Charger Driver Enable",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverEnable",
              "Operator": "Operators.SetGet",
              "Description": "Set Charger Driver Enable/Disable",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverEnable",
                  "Type": "uint8",
                  "Description": "Charger Driver Enable/Disable"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverEnable",
              "Operator": "Operators.Status",
              "Description": "Charger Driver Enable/Disable",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverEnable",
                  "Type": "uint8",
                  "Description": "Charger Driver Enable/Disable"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerDriverCurrent",
          "Value": 43,
          "Mandatory": "O",
          "Description": "Charger Driver Current",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverCurrent",
              "Operator": "Operators.SetGet",
              "Description": "Set Charger Driver Current",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverSourceCurrent",
                  "Type": "uint16",
                  "Description": "Charger Driver Source Current"
                },
                {
                  "Name": "ChargerDriverBatteryCurrent",
                  "Type": "uint16",
                  "Description": "Charger Driver Battery Current"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverCurrent",
              "Operator": "Operators.Status",
              "Description": "Charger Driver Current",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverSourceCurrent",
                  "Type": "uint16",
                  "Description": "Charger Driver Source Current"
                },
                {
                  "Name": "ChargerDriverBatteryCurrent",
                  "Type": "uint16",
                  "Description": "Charger Driver Battery Current"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerDriverTemperature",
          "Value": 44,
          "Mandatory": "O",
          "Description": "Charger Driver Temperature",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverTemperature",
              "Operator": "Operators.Get",
              "Description": "Get Charger Driver Temperature",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverTemperature",
              "Operator": "Operators.Set",
              "Description": "Set Charger Driver Temperature",
              "Fields": [
                {
                  "Name": "ChargerDriverTemperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Charger Driver Temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverTemperature",
              "Operator": "Operators.Status",
              "Description": "Charger Driver Temperature Status",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverTemperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Charger Driver Temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerDriverStatus",
          "Value": 45,
          "Mandatory": "O",
          "Description": "Charger Driver Status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverStatus",
              "Operator": "Operators.Get",
              "Description": "Get Charger Driver Status",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverStatus",
              "Operator": "Operators.Set",
              "Description": "Set Charger Driver Status",
              "Fields": [
                {
                  "Name": "ChargerDriverStatus",
                  "Type": "uint8",
                  "Description": "Charger Driver Status"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverStatus",
              "Operator": "Operators.Status",
              "Description": "Charger Driver Status Status",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverStatus",
                  "Type": "uint8",
                  "Description": "Charger Driver Status"
                }
              ]
            }
          ]
        },
        {
          "Name": "ChargerDriverFaults",
          "Value": 46,
          "Mandatory": "O",
          "Description": "Charger Driver Faults",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverFaults",
              "Operator": "Operators.Get",
              "Description": "Get Charger Driver Faults",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverFaults",
              "Operator": "Operators.Set",
              "Description": "Set Charger Driver Faults",
              "Fields": [
                {
                  "Name": "ChargerDriverFaults",
                  "Type": "uint8",
                  "Description": "Charger Driver Faults"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.ChargerDriverFaults",
              "Operator": "Operators.Status",
              "Description": "Charger Driver Faults Status",
              "Fields": [
                {
                  "Name": "ChargerID",
                  "Type": "uint8",
                  "Description": "Charger ID"
                },
                {
                  "Name": "ChargerDriverFaults",
                  "Type": "uint8",
                  "Description": "Charger Driver Faults"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverEnable",
          "Value": 47,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver Enable",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverEnable",
              "Operator": "Operators.SetGet",
              "Description": "Set Fuel Gauge Driver Enable/Disable",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverEnable",
                  "Type": "uint8",
                  "Description": "Fuel Gauge Driver Enable/Disable"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverEnable",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver Enable/Disable",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverEnable",
                  "Type": "uint8",
                  "Description": "Fuel Gauge Driver Enable/Disable"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverVoltage",
          "Value": 48,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver Voltage",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverVoltage",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver Voltage",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverVoltage",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver Voltage",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverVoltage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Fuel Gauge Driver Voltage"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverVoltage",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver Voltage Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverVoltage",
                  "Type": "uint16",
                  "Units": "mV",
                  "Description": "Fuel Gauge Driver Voltage"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverCurrent",
          "Value": 49,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver Current",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverCurrent",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver Current",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel Gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverCurrent",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver Current",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverCurrent",
                  "Type": "int16",
                  "Units": "mA",
                  "Description": "Fuel Gauge Driver Current"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverCurrent",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver Current Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel Gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverCurrent",
                  "Type": "int16",
                  "Units": "mA",
                  "Description": "Fuel Gauge Driver Current"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverTemperature",
          "Value": 50,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver Temperature",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverTemperature",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver Temperature",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverTemperature",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver Temperature",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverTemperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Fuel Gauge Driver Temperature"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverTemperature",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver Temperature Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverTemperature",
                  "Type": "int16",
                  "Units": "C",
                  "Description": "Fuel Gauge Driver Temperature"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverSOCPercent",
          "Value": 51,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver SOC Percent",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverSOCPercent",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver SOC Percent",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverSOCPercent",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver SOC Percent",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverSOCPercent",
                  "Type": "uint8",
                  "Units": "Percent",
                  "Description": "Fuel Gauge Driver SOC Percent"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverSOCPercent",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver SOC Percent Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverSOCPercent",
                  "Type": "uint8",
                  "Units": "Percent",
                  "Description": "Fuel Gauge Driver SOC Percent"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverSOCTime",
          "Value": 52,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver SOC Time",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverSOCTime",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver SOC Time",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverSOCTime",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver SOC Time",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverSOCTime",
                  "Type": "uint16",
                  "Units": "minutes",
                  "Description": "Fuel Gauge Driver SOC Time"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverSOCTime",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver SOC Time Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverSOCTime",
                  "Type": "uint16",
                  "Units": "minutes",
                  "Description": "Fuel Gauge Driver SOC Time"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverStatus",
          "Value": 53,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver Status",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverStatus",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverStatus",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver Status",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverStatus",
                  "Type": "uint8",
                  "Description": "Fuel Gauge Driver Status"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverStatus",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver Status Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverStatus",
                  "Type": "uint8",
                  "Description": "Fuel Gauge Driver Status"
                }
              ]
            }
          ]
        },
        {
          "Name": "FuelGaugeDriverFaults",
          "Value": 54,
          "Mandatory": "O",
          "Description": "Fuel Gauge Driver Faults",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverFaults",
              "Operator": "Operators.Get",
              "Description": "Get Fuel Gauge Driver Faults",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverFaults",
              "Operator": "Operators.Set",
              "Description": "Set Fuel Gauge Driver Faults",
              "Fields": [
                {
                  "Name": "FuelGaugeDriverFaults",
                  "Type": "uint8",
                  "Description": "Fuel Gauge Driver Faults"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.BatteryDebug",
              "Function": "BatteryDebugFunctions.FuelGaugeDriverFaults",
              "Operator": "Operators.Status",
              "Description": "Fuel Gauge Driver Faults Status",
              "Fields": [
                {
                  "Name": "FuelGaugeID",
                  "Type": "uint8",
                  "Description": "Fuel gauge ID"
                },
                {
                  "Name": "FuelGaugeDriverFaults",
                  "Type": "uint8",
                  "Description": "Fuel Gauge Driver Faults"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "SmartANRPlatform",
      "Version": "1.1.0",
      "Mandatory": "O",
      "Description": "Control and configure the ARM and BSC(s)",
      "Value": 26,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "Function Block Version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get SmartANRPlatform FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "Status FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "VariableLength": true,
                  "Count": 60,
                  "Units": "ASCII",
                  "Description": "Function Block Version (UTF-8 string)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all supported SmartANRPlatform functions in product",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.GetAll",
              "Operator": "Operators.Start",
              "Description": "Queries currently selected source"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.GetAll",
              "Operator": "Operators.Processing",
              "Description": "GetAll processing response"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.GetAll",
              "Operator": "Operators.Result",
              "Description": "GetAll result response"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.GetAll",
              "Operator": "Operators.Error",
              "Description": "GetAll error response",
              "Fields": [
                {
                  "Name": "Busy",
                  "Type": "uint8",
                  "Description": "A busy error will be sent if the product is already processing a response to a GetAll command"
                }
              ]
            }
          ]
        },
        {
          "Name": "Status",
          "Value": 2,
          "Mandatory": "O",
          "Description": "Current state and status of SmartANNRPlatform",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.Status",
              "Operator": "Operators.Get",
              "Description": "Get the current state and status of SmartANNRPlatform"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.Status",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "State",
                  "Type": "uint8",
                  "Description": "State",
                  "Enum": "SmartANRPlatformStates"
                },
                {
                  "Name": "ByteTwo",
                  "Type": "uint8",
                  "Description": "Bit 0 - CER_INT_OUT status, Bit 1- Broadcast to other other SmartANNRPlatforms in product, Bits 2-7 - reserved"
                },
                {
                  "Name": "Algorithm",
                  "Type": "uint16",
                  "Description": "2 byte Algorithm ID flags"
                }
              ]
            }
          ]
        },
        {
          "Name": "State",
          "Value": 3,
          "Mandatory": "O",
          "Description": "State of SmartANNRPlatform (Passive, Active, Firmware update, Tuning, Turn off)",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.State",
              "Operator": "Operators.Get",
              "Description": "Get the current state"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.State",
              "Operator": "Operators.SetGet",
              "Description": "Change current state, get the new current state",
              "Fields": [
                {
                  "Name": "State",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformStates",
                  "Description": "state to set"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.State",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "State",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformStates",
                  "Description": "current state"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.State",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCSymbolicParam",
          "Value": 4,
          "Mandatory": "O",
          "Description": "Symbolic access to BSC data",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSymbolicParam",
              "Operator": "Operators.Get",
              "Description": "Get the FDSP or SDSP signal flow parameters",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "SymbolicName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the symbol"
                },
                {
                  "Name": "WordCount",
                  "Type": "uint8",
                  "Max": 16,
                  "Description": "Number of words to get (May not be greater than 16)"
                },
                {
                  "Name": "Offset",
                  "Type": "int16",
                  "Description": "Offset word to start from."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSymbolicParam",
              "Operator": "Operators.SetGet",
              "Description": "Set FDSP or SDSP signal flow parameters. Get if parameters were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "SymbolicName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the symbol"
                },
                {
                  "Name": "WordCount",
                  "Type": "uint8",
                  "Max": 16,
                  "Description": "Number of words to set (May not be greater than 16)"
                },
                {
                  "Name": "Offset",
                  "Type": "int16",
                  "Description": "Offset word to start from."
                },
                {
                  "Name": "ParameterData",
                  "Type": "uint32",
                  "Count": 16,
                  "Description": "Signal flow parameter data to set"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSymbolicParam",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "ParameterData",
                  "Type": "uint32",
                  "Count": 16,
                  "VariableLength": true,
                  "Description": "SetGet- 0 byte payload indicating success. Get- Signal flow parameter data."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSymbolicParam",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCMemory",
          "Value": 5,
          "Mandatory": "O",
          "Description": "Raw read/write of BSC address space",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCMemory",
              "Operator": "Operators.Get",
              "Description": "Raw read of BSC address space.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "16-bit address to begin read/write"
                },
                {
                  "Name": "DataLength",
                  "Type": "uint8",
                  "Max": 32,
                  "Description": "Byte count of data to read/write"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCMemory",
              "Operator": "Operators.SetGet",
              "Description": "Raw write of BSC address space. Get if data was written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "RegisterAddress",
                  "Type": "uint16",
                  "Description": "16-bit address to begin read/write"
                },
                {
                  "Name": "DataLength",
                  "Type": "uint8",
                  "Max": 32,
                  "Description": "Byte count of data to read/write"
                },
                {
                  "Name": "RegisterData",
                  "Type": "uint8",
                  "Count": 32,
                  "Description": "BSC Data at register address"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCMemory",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "RegisterData",
                  "Type": "uint8",
                  "Count": 32,
                  "VariableLength": true,
                  "Description": "SetGet- 0 byte payload indicating success. Get-  BSC Data at register address."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCMemory",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPBq",
          "Value": 6,
          "Mandatory": "O",
          "Description": "Symbolic access to BSC FDSP Filter",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBq",
              "Operator": "Operators.Get",
              "Description": "Get the FDSP Filter signal flow coefficients.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "BiquadNum",
                  "Type": "uint8",
                  "Description": "Which biquad within the filter"
                },
                {
                  "Name": "FilterName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the filter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBq",
              "Operator": "Operators.SetGet",
              "Description": "Set the FDSP Filter signal flow coefficients. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "BiquadNum",
                  "Type": "uint8",
                  "Description": "Which biquad within the filter"
                },
                {
                  "Name": "FilterName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the filter"
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Filter signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBq",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "VariableLength": true,
                  "Description": "SetGet- 0 byte payload indicating success. Get- 5 FDSP Filter signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBq",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPLim",
          "Value": 7,
          "Mandatory": "O",
          "Description": "Symbolic access to BSC FDSP Limiter",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPLim",
              "Operator": "Operators.Get",
              "Description": "Get the FDSP Limiter signal flow coefficients.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "LimiterName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Limiter"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPLim",
              "Operator": "Operators.SetGet",
              "Description": "Set the FDSP Limiter signal flow coefficients. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "LimiterName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Limiter"
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Limiter signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPLim",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "VariableLength": true,
                  "Description": "SetGet- 0 byte payload indicating success. Get- 5 FDSP Limiter signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPLim",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPExp",
          "Value": 8,
          "Mandatory": "O",
          "Description": "Symbolic access to BSC FDSP Expander",
          "LongDescription": null,
          "Operators": []
        },
        {
          "Name": "BSCFDSPVol",
          "Value": 9,
          "Mandatory": "O",
          "Description": "Symbolic access to BSC FDSP Volume Block",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPVol",
              "Operator": "Operators.Get",
              "Description": "Get the FDSP Volume Block signal flow coefficients.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "VolumeBlockName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Volume Block"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPVol",
              "Operator": "Operators.SetGet",
              "Description": "Set the FDSP Volume Block signal flow coefficients. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "VolumeBlockName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Volume Block"
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Volume Block signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPVol",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "VariableLength": true,
                  "Description": "SetGet- 0 byte payload indicating success. Get- 5 FDSP Volume Block signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPVol",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPMix",
          "Value": 10,
          "Mandatory": "O",
          "Description": "Symbolic access to BSC FDSP Mixer",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPMix",
              "Operator": "Operators.Get",
              "Description": "Get the FDSP Mixer signal flow coefficients.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "MixerName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Mixer"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPMix",
              "Operator": "Operators.SetGet",
              "Description": "Set the FDSP Mixer signal flow coefficients. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                },
                {
                  "Name": "MixerName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Mixer"
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Mixer signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPMix",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "VariableLength": true,
                  "Description": "SetGet- 0 byte payload indicating success. Get- 5 FDSP Mixer signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPMix",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPBank",
          "Value": 11,
          "Mandatory": "O",
          "Description": "Access to FDSP Current Bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBank",
              "Operator": "Operators.Get",
              "Description": "Read the Current FDSP Bank",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBank",
              "Operator": "Operators.SetGet",
              "Description": "Set and then get the Current FDSP Bank",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Bank Number (0, 1, 2)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBank",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "BankNum",
                  "Type": "uint8",
                  "Description": "Current Bank"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBank",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPBankCopy",
          "Value": 12,
          "Mandatory": "O",
          "Description": "Copy from one FDSP bank to another",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBankCopy",
              "Operator": "Operators.SetGet",
              "Description": "Set destination FDSP bank's contents equal to the contents of the source FDSP bank. Get if copy was successful.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access"
                },
                {
                  "Name": "DestBankNum",
                  "Type": "uint8",
                  "Description": "Destination Bank (0, 1, 2)"
                },
                {
                  "Name": "SourceBankNum",
                  "Type": "uint8",
                  "Description": "Source Bank (0, 1, 2)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBankCopy",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPBankCopy",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPSafeLoadBq",
          "Value": 13,
          "Mandatory": "O",
          "Description": "Safe access to BSC FDSP filter param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadBq",
              "Operator": "Operators.SetGet",
              "Description": "Safe load FDSP Filter coefficients in the current bank. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access."
                },
                {
                  "Name": "BiquadNum",
                  "Type": "uint8",
                  "Description": "Which biquad within the filter."
                },
                {
                  "Name": "FilterName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Filter."
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Filter signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadBq",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadBq",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPSafeLoadLim",
          "Value": 14,
          "Mandatory": "O",
          "Description": "Safe access to BSC FDSP limiter param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadLim",
              "Operator": "Operators.SetGet",
              "Description": "Safe load FDSP Limiter coefficients in the current bank. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access."
                },
                {
                  "Name": "LimiterName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Limiter."
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Limiter signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadLim",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadLim",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPSafeLoadExp",
          "Value": 15,
          "Mandatory": "O",
          "Description": "Safe access to BSC FDSP expander param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadExp",
              "Operator": "Operators.SetGet",
              "Description": "Safe load FDSP Expander coefficients in the current bank. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access."
                },
                {
                  "Name": "ExpanderName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Expander."
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Expander signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadExp",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadExp",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPSafeLoadVol",
          "Value": 16,
          "Mandatory": "O",
          "Description": "Safe access to BSC FDSP volume block param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadVol",
              "Operator": "Operators.SetGet",
              "Description": "Safe load FDSP Volume Block coefficients in the current bank. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access."
                },
                {
                  "Name": "VolumeBlockName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Volume Block."
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Volume Block signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadVol",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadVol",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCFDSPSafeLoadMix",
          "Value": 17,
          "Mandatory": "O",
          "Description": "Safe access to BSC FDSP mixer param in the active bank",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadMix",
              "Operator": "Operators.SetGet",
              "Description": "Safe load FDSP Mixer coefficients in the current bank. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access."
                },
                {
                  "Name": "MixerName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the Mixer."
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "5 FDSP Mixer signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadMix",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCFDSPSafeLoadMix",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BSCSDSPSafeLoad",
          "Value": 18,
          "Mandatory": "O",
          "Description": "Safe load a BSC SDSP symbol",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSDSPSafeLoad",
              "Operator": "Operators.SetGet",
              "Description": "Safe load SDSP coefficients to the current bank. Get if coefficients were written successfully.",
              "Fields": [
                {
                  "Name": "BSCID",
                  "Type": "uint8",
                  "Description": "ID of BSC to access."
                },
                {
                  "Name": "SymbolicName",
                  "Type": "uint8",
                  "Count": 120,
                  "Units": "ASCII",
                  "Description": "The name of the symbol."
                },
                {
                  "Name": "WordCount",
                  "Type": "uint8",
                  "Max": 5,
                  "Description": "Number of SDSP coefficients."
                },
                {
                  "Name": "Offset",
                  "Type": "int16",
                  "Description": "Offset word to start from"
                },
                {
                  "Name": "CoefficientArray",
                  "Type": "uint32",
                  "Count": 5,
                  "Description": "1 to 5 SDSP signal flow coefficients."
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSDSPSafeLoad",
              "Operator": "Operators.Status",
              "Description": "0 byte payload indicating success."
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BSCSDSPSafeLoad",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BDSPMemAccess",
          "Value": 19,
          "Mandatory": "O",
          "Description": "Access the BDSP memory",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BDSPMemAccess",
              "Operator": "Operators.Get",
              "Description": "Read specified number of bytes from an address",
              "Fields": [
                {
                  "Name": "FirstIntegerAddress",
                  "Type": "uint32",
                  "Description": "Address of first integer to read"
                },
                {
                  "Name": "NumberOfIntegers",
                  "Type": "uint8",
                  "Max": 12,
                  "Description": "Number of integers to read (max 12)"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BDSPMemAccess",
              "Operator": "Operators.SetGet",
              "Description": "Write and return specified number of bytes from an address",
              "Fields": [
                {
                  "Name": "FirstIntegerAddress",
                  "Type": "uint32",
                  "Description": "Address of first integer to write"
                },
                {
                  "Name": "NumberOfIntegers",
                  "Type": "uint8",
                  "Max": 12,
                  "Description": "Number of integers to write (max 12)"
                },
                {
                  "Name": "Values",
                  "Type": "uint32",
                  "Count": 12,
                  "Description": "Values to be written"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BDSPMemAccess",
              "Operator": "Operators.Status",
              "Description": "Response to Get, SetGet on success. There is no payload included in response to a SetGet.",
              "Fields": [
                {
                  "Name": "NumberOfIntegers",
                  "Type": "uint8",
                  "Max": 12,
                  "Description": "Number of integers read back"
                },
                {
                  "Name": "Values",
                  "Type": "uint32",
                  "Count": 12,
                  "Description": "Values read back"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BDSPMemAccess",
              "Operator": "Operators.Error",
              "Description": "Error",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "BDSPInfo",
          "Value": 20,
          "Mandatory": "O",
          "Description": "Access BDSP information",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BDSPInfo",
              "Operator": "Operators.Get",
              "Description": "Request info status message"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.BDSPInfo",
              "Operator": "Operators.Status",
              "Description": "Address for Xmodel Master",
              "Fields": [
                {
                  "Name": "XmodelMasterAddress",
                  "Type": "uint32",
                  "Description": "Address of Xmodel Master"
                }
              ]
            }
          ]
        },
        {
          "Name": "Fault",
          "Value": 21,
          "Mandatory": "O",
          "Description": "Get the most recent fault",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.Fault",
              "Operator": "Operators.Get",
              "Description": "Get the current fault information from SmartANR"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.Fault",
              "Operator": "Operators.Status",
              "Description": "Status",
              "Fields": [
                {
                  "Name": "Fault",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformFaults",
                  "Description": "Fault that occurred"
                },
                {
                  "Name": "State",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformStates",
                  "Description": "State SmartANR was in when the fault occurred"
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.Fault",
              "Operator": "Operators.Error",
              "Description": "Error while retrieving SmartANR fault information",
              "Fields": [
                {
                  "Name": "ErrorCode",
                  "Type": "uint8",
                  "Enum": "SmartANRPlatformErrorResponseCodes"
                }
              ]
            }
          ]
        },
        {
          "Name": "LowPowerMode",
          "Value": 22,
          "Mandatory": "O",
          "Description": "Low power mode configuration",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.LowPowerMode",
              "Operator": "Operators.Get",
              "Description": "Request low power mode configuration"
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.LowPowerMode",
              "Operator": "Operators.SetGet",
              "Description": "Set and return low power mode configuration",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "Enabled",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Whether low power mode entry when idle is enabled"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 7,
                      "Description": "Unused bits"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.SmartANRPlatform",
              "Function": "SmartANRPlatformFunctions.LowPowerMode",
              "Operator": "Operators.Status",
              "Description": "Response to Get, SetGet on success",
              "Fields": [
                {
                  "Name": "Configuration",
                  "Type": "uint8",
                  "Description": null,
                  "Bitfields": [
                    {
                      "Name": "Enabled",
                      "NumBits": 1,
                      "Units": "Boolean",
                      "Description": "Whether low power mode entry when idle is enabled"
                    },
                    {
                      "Name": "UnusedBits",
                      "NumBits": 7,
                      "Description": "Unused bits"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "EarbudDebug",
      "Version": "0.0.1",
      "Mandatory": "O",
      "Description": "Debug capabilities for the Earbud Application",
      "Value": 27,
      "Category": "Public",
      "Functions": [
        {
          "Name": "FBlockInfo",
          "Value": 0,
          "Mandatory": "M",
          "Description": "FBlock version",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.FBlockInfo",
              "Operator": "Operators.Get",
              "Description": "Get EarbudDebug FunctionBlock Info"
            },
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.FBlockInfo",
              "Operator": "Operators.Status",
              "Description": "EarbudDebug FunctionBlock Info",
              "Fields": [
                {
                  "Name": "FunctionBlockVersion",
                  "Type": "uint8",
                  "Count": 60,
                  "VariableLength": true,
                  "Units": "ASCII",
                  "Description": "FunctionBlockVersion (UTF-8 String)"
                }
              ]
            }
          ]
        },
        {
          "Name": "GetAll",
          "Value": 1,
          "Mandatory": "M",
          "Description": "Query all Earbud Debug support in product",
          "LongDescription": null,
          "Operators": []
        },
        {
          "Name": "Events",
          "Value": 2,
          "Mandatory": "M",
          "Description": "Send events to the Earbud Subsystem",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.Events",
              "Operator": "Operators.Start",
              "Description": "Send an event to the Earbud Subsystem",
              "Fields": [
                {
                  "Name": "Value",
                  "Type": "uint8",
                  "Description": "Event",
                  "Bitfields": [
                    {
                      "Name": "Event",
                      "NumBits": 8,
                      "Enum": "EarbudEvents"
                    }
                  ]
                }
              ]
            },
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.Events",
              "Operator": "Operators.Result",
              "Description": "Event result response"
            }
          ]
        },
        {
          "Name": "State",
          "Value": 3,
          "Mandatory": "M",
          "Description": "Earbud State configuration",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.State",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.State",
              "Operator": "Operators.Status",
              "Description": "(Empty)",
              "Fields": [
                {
                  "Name": "Value",
                  "Type": "uint8",
                  "Description": "The current state of the Earbud Subsystem",
                  "Bitfields": [
                    {
                      "Name": "State",
                      "NumBits": 8,
                      "Enum": "EarbudStates"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "Name": "B2bConnectionState",
          "Value": 4,
          "Mandatory": "M",
          "Description": "Earbud to earbud connection state",
          "LongDescription": null,
          "Operators": [
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.B2bConnectionState",
              "Operator": "Operators.Get",
              "Description": "(Empty)"
            },
            {
              "FunctionBlock": "FunctionBlocks.EarbudDebug",
              "Function": "EarbudDebugFunctions.B2bConnectionState",
              "Operator": "Operators.Status",
              "Description": "(Empty)",
              "Fields": [
                {
                  "Name": "Value",
                  "Type": "uint8",
                  "Description": "The current state of the B2B connection",
                  "Bitfields": [
                    {
                      "Name": "State",
                      "NumBits": 8,
                      "Enum": "B2bConnectionStates"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}